'use strict';

var React = require('react');
var ReactDOM = require('react-dom');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);
var ReactDOM__namespace = /*#__PURE__*/_interopNamespaceDefault(ReactDOM);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */
function __rest$1(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}
typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function r(e) { var t, f, n = ""; if ("string" == typeof e || "number" == typeof e)
    n += e;
else if ("object" == typeof e)
    if (Array.isArray(e))
        for (t = 0; t < e.length; t++)
            e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    else
        for (t in e)
            e[t] && (n && (n += " "), n += t); return n; }
function clsx() { for (var e, t, f = 0, n = ""; f < arguments.length;)
    (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t); return n; }

const CollapseContext = React.createContext(null);

const defaultElement$X = "div";
function Accordion(_a) {
    var { as, id, animate, isOpen, borderless, appearance, reversed, util, className, testId, children } = _a, attrs = __rest$1(_a, ["as", "id", "animate", "isOpen", "borderless", "appearance", "reversed", "util", "className", "testId", "children"]);
    const Tag = as || defaultElement$X;
    const isBorderless = borderless || appearance === "borderless";
    const isLink = !borderless && appearance === "link";
    const contextValues = React.useMemo(() => ({
        id,
        isOpen,
        borderless: isBorderless,
        link: !isBorderless && isLink,
        animate,
        reversed,
    }), [animate, id, isBorderless, isLink, isOpen, reversed]);
    if (!id)
        return null;
    const containerClassNames = clsx("kds-accordion", {
        "kds-accordion--borderless": isBorderless,
        "kds-accordion--link": !isBorderless && isLink,
        "kds-accordion--reversed": reversed,
        "kds-accordion--open": isOpen,
    }, util || className);
    return (React.createElement(CollapseContext.Provider, { value: contextValues },
        React.createElement(Tag, Object.assign({ className: containerClassNames, "data-testid": testId }, attrs, { id: id }), children)));
}
Accordion.defaultProps = {
    as: defaultElement$X,
    animate: true,
    reversed: false,
};

var canUseDOM$1 = !!(typeof window !== "undefined" && window.document && window.document.createElement);

const useIsomorphicLayoutEffect$1 = canUseDOM$1 ? React.useLayoutEffect : React.useEffect;

/**
 * Do not edit directly
 * Generated on Fri, 19 Jan 2024 09:20:30 GMT
 */
var BREAKPOINT_XS = "0";
var BREAKPOINT_SM = "576";
var BREAKPOINT_MD = "768";
var BREAKPOINT_LG = "992";
var BREAKPOINT_XL = "1200";
var BREAKPOINT_2XL = "1400";
var BREAKPOINT_3XL = "1600";
var EASING_DEFAULT = "cubic-bezier(0.4, 0.0, 0.2, 1)";
var EASING_DECELERATE = "cubic-bezier(0.0, 0.0, 0.2, 1)";
var EASING_ACCELERATE = "cubic-bezier(0.4, 0.0, 1, 1)";
var TIMINGS_TOOLTIP_DELAY = 400;
var DURATION_SMALL_ENTER = 125;
var DURATION_MEDIUM_DEFAULT = 150;
var DURATION_MEDIUM_ENTER = 200;
var DURATION_MEDIUM_EXIT = 125;
var DURATION_LARGE_ENTER = 250;
var DURATION_LARGE_EXIT = 175;

const updateElementCSSClass = (element, cssClass, mode = "add") => {
    if (!element)
        return;
    const elementHasClass = element.classList.contains(cssClass);
    if (mode === "add") {
        return !elementHasClass && element.classList.add(cssClass);
    }
    if (mode === "remove") {
        return elementHasClass && element.classList.remove(cssClass);
    }
    elementHasClass ? element.classList.remove(cssClass) : element.classList.add(cssClass);
};

const ANIMATION_DURATION_DEFAULT = DURATION_MEDIUM_DEFAULT;
const ANIMATION_EASING_ENTER = EASING_DECELERATE;
const ANIMATION_EASING_EXIT = EASING_ACCELERATE;
const supportsAnimations = () => {
    if (canUseDOM$1) {
        const wantsAnimations = getComputedStyle(document.documentElement, null).getPropertyValue("--kds-is-animated");
        const hasAnimate = "animate" in document.body;
        // No support for prefers-reduced-motion media query, css custom variables
        // or information is missing --> default to no animations.
        if (typeof wantsAnimations === "undefined" || wantsAnimations === "")
            return false;
        if (wantsAnimations.includes("1") && hasAnimate)
            return true;
    }
    return false;
};
const resolveAnimation = (animation) => {
    return new Promise((resolve) => animation.finished.then((effect) => {
        effect.cancel();
        resolve(effect);
    }));
};
const fadeIn = (element, { duration = ANIMATION_DURATION_DEFAULT, direction = "normal", MIN_OPACITY = 0, MAX_OPACITY = 1, } = {}) => {
    const animation = element === null || element === void 0 ? void 0 : element.animate([{ opacity: MIN_OPACITY }, { opacity: MAX_OPACITY }], {
        duration,
        direction,
        fill: "both",
        easing: direction === "normal" ? ANIMATION_EASING_ENTER : ANIMATION_EASING_EXIT,
    });
    return resolveAnimation(animation);
};
const slideFromTop = (element, { duration = ANIMATION_DURATION_DEFAULT, direction = "normal" } = {}) => {
    const animation = element === null || element === void 0 ? void 0 : element.animate([{ transform: "translateY(-100vh)" }, { transform: "translateY(0)" }], {
        duration,
        direction,
        fill: "both",
        easing: direction === "normal" ? ANIMATION_EASING_ENTER : ANIMATION_EASING_EXIT,
    });
    return resolveAnimation(animation);
};

const handleAnimation = (animationRef, collapseContentRef, isOpen) => {
    var _a, _b, _c;
    ((_a = animationRef.current) === null || _a === void 0 ? void 0 : _a.playState) === "running" && animationRef.current.cancel();
    const direction = isOpen ? "normal" : "reverse";
    const durationNormal = DURATION_MEDIUM_ENTER;
    const durationReverse = DURATION_MEDIUM_EXIT;
    const easingNormal = EASING_DECELERATE;
    const easingReverse = EASING_ACCELERATE;
    const styles = window.getComputedStyle(collapseContentRef.current);
    const initialStyles = {
        top: styles.getPropertyValue("padding-top"),
        bottom: styles.getPropertyValue("padding-bottom"),
        height: (_b = collapseContentRef.current) === null || _b === void 0 ? void 0 : _b.style.height,
    };
    updateElementCSSClass(collapseContentRef.current, "kds-collapse--collapsing");
    animationRef.current = (_c = collapseContentRef.current) === null || _c === void 0 ? void 0 : _c.animate([
        {
            height: "0",
            paddingTop: "0",
            paddingBottom: "0",
            opacity: "0",
        },
        {
            offset: 0.99,
            height: `${collapseContentRef.current.scrollHeight}px`,
        },
        {
            height: initialStyles.height === "auto" ? "auto" : `${collapseContentRef.current.scrollHeight}px`,
            paddingTop: initialStyles.top,
            paddingBottom: initialStyles.bottom,
            opacity: "1",
        },
    ], {
        direction,
        duration: direction === "normal" ? durationNormal : durationReverse,
        easing: direction === "normal" ? easingNormal : easingReverse,
        fill: "none",
    });
    animationRef.current &&
        (animationRef.current.onfinish = () => {
            updateElementCSSClass(collapseContentRef.current, "kds-collapse--collapsing", "remove");
            !isOpen && updateElementCSSClass(collapseContentRef.current, "kds-collapse--visible", "remove");
        });
};
const useCollapse = (ref, isOpen, animate = true) => {
    const prevIsOpen = React.useRef(isOpen);
    const isAnimated = animate && supportsAnimations();
    const animationRef = React.useRef(null);
    const toggleCollapse = () => {
        updateElementCSSClass(ref.current, "kds-collapse");
        isOpen && updateElementCSSClass(ref.current, "kds-collapse--visible");
        if (prevIsOpen.current !== isOpen) {
            if (isAnimated) {
                handleAnimation(animationRef, ref, isOpen);
            }
            else if (!isOpen) {
                updateElementCSSClass(ref.current, "kds-collapse--visible", "remove");
            }
            prevIsOpen.current = isOpen;
        }
    };
    return toggleCollapse;
};

function AccordionBody(_a) {
    var _b;
    var { util, className, children, testId } = _a, attrs = __rest$1(_a, ["util", "className", "children", "testId"]);
    const collapseContext = React.useContext(CollapseContext);
    const elRef = React.useRef(null);
    const [hasClientInteracted, setHasClientInteracted] = React.useState(false);
    const toggleCollapse = useCollapse(elRef, !!(collapseContext === null || collapseContext === void 0 ? void 0 : collapseContext.isOpen), collapseContext.animate);
    const isOpen = collapseContext === null || collapseContext === void 0 ? void 0 : collapseContext.isOpen;
    React.useEffect(() => {
        if (!hasClientInteracted) {
            setHasClientInteracted(true);
        }
    }, [isOpen, hasClientInteracted]);
    const bodyClassNames = clsx("kds-accordion__body", "kds-collapse", {
        "kds-collapse--visible": hasClientInteracted ? false : (_b = collapseContext === null || collapseContext === void 0 ? void 0 : collapseContext.isOpen) !== null && _b !== void 0 ? _b : false,
    }, util || className);
    useIsomorphicLayoutEffect$1(() => {
        toggleCollapse();
    }, [toggleCollapse]);
    return (React.createElement("div", Object.assign({ "data-testid": testId, ref: elRef, id: `${collapseContext === null || collapseContext === void 0 ? void 0 : collapseContext.id}-body`, "aria-labelledby": `${collapseContext === null || collapseContext === void 0 ? void 0 : collapseContext.id}-toggle`, className: bodyClassNames, role: "region" }, attrs), children));
}

const defaultElement$W = "div";
function AccordionTitle(_a) {
    var { as, util, className, children, testId } = _a, attrs = __rest$1(_a, ["as", "util", "className", "children", "testId"]);
    const collapseContext = React.useContext(CollapseContext);
    const Tag = collapseContext.borderless && as == "div" ? "h5" : as || defaultElement$W;
    const classNames = clsx("kds-accordion__title", { "kds-accordion__title--borderless": collapseContext.borderless }, util || className);
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
AccordionTitle.defaultProps = {
    as: defaultElement$W,
};

function Icon(_a) {
    var { children, color, size = "xs", util, className, testId } = _a, attrs = __rest$1(_a, ["children", "color", "size", "util", "className", "testId"]);
    if (!children)
        return;
    const classNames = clsx(util, className, "kds-icon", {
        [`kds-icon--size-${size}`]: size,
    });
    const componentStyle = color ? { color: color } : undefined;
    const IconElement = React.cloneElement(children, Object.assign({ className: classNames, style: componentStyle, "data-testid": testId }, attrs));
    return IconElement;
}

function SvgIconCaretUp(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "m3 17 9-10 9 10" }),
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }))));
}

function SvgIconCaretDown(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "m3 7 9 10 9-10" }),
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }))));
}

function AccordionToggle(_a) {
    var { onClick, util, className, children, testId } = _a, attrs = __rest$1(_a, ["onClick", "util", "className", "children", "testId"]);
    const collapseContext = React.useContext(CollapseContext);
    const { id, isOpen, borderless, link, reversed } = collapseContext;
    const toggleClassNames = clsx("kds-accordion__toggle kds-no-focus-ring", util || className, {
        "kds-accordion__toggle--reversed": (link && reversed) || borderless,
    });
    if (!collapseContext)
        return null;
    const handleClick = (e) => {
        e.preventDefault();
        onClick(e);
    };
    const getIconSize = ({ borderless, link }) => {
        if (borderless) {
            return "s";
        }
        else if (link) {
            return "xs";
        }
        return "s";
    };
    const iconSize = getIconSize({ borderless, link });
    return (React.createElement("button", Object.assign({ type: "button", className: toggleClassNames, onClick: handleClick, "aria-controls": `${id}-body`, id: `${id}-toggle`, "aria-expanded": isOpen }, attrs),
        React.createElement(React.Fragment, null,
            React.createElement("span", { className: "kds-accordion__toggle-title", "data-testid": testId }, children),
            React.createElement("span", { className: "kds-accordion__toggle-icon" }, isOpen ? React.createElement(SvgIconCaretUp, { size: iconSize }) : React.createElement(SvgIconCaretDown, { size: iconSize })))));
}

const defaultElement$V = "button";
/**
 * Ref-prop välitetään komponentin renderöimän painikkeen HTML-elementille.
 */
const Button$1 = React.forwardRef((_a, ref) => {
    var { as, variant = "primary", appearance = "solid", rounded, type, block, large, small, caret, caretUp, iconBefore, iconAfter, onClick, disabled, testId, util, className, children } = _a, attrs = __rest$1(_a, ["as", "variant", "appearance", "rounded", "type", "block", "large", "small", "caret", "caretUp", "iconBefore", "iconAfter", "onClick", "disabled", "testId", "util", "className", "children"]);
    const Tag = as || defaultElement$V;
    const classNames = clsx(util || className, `kds-btn kds-btn--${appearance} kds-btn--${variant}`, {
        "kds-btn--rounded": rounded,
        "kds-btn--disabled": disabled,
        "kds-btn--lg": large,
        "kds-btn--sm": small,
        "kds-btn--block": block,
        "kds-btn--toggle": caret || caretUp,
        "kds-btn--toggle-open": caretUp,
        "kds-btn--with-icon-before": iconBefore,
        "kds-btn--with-icon-after": iconAfter,
    });
    const isDisabled = Tag === "button" && disabled;
    return (React.createElement(Tag, Object.assign({ "data-testid": testId, className: classNames, onClick: onClick, ref: ref, disabled: isDisabled }, attrs, { type: Tag === "button" ? type : undefined }),
        iconBefore
            ? React.cloneElement(iconBefore, {
                className: clsx("kds-mr-2", iconBefore.props.util || iconBefore.props.className),
            })
            : false,
        iconBefore || iconAfter ? React.cloneElement(React.createElement("span", null), {}, children) : children,
        iconAfter
            ? React.cloneElement(iconAfter, {
                className: clsx("kds-ml-2", iconAfter.props.util || iconAfter.props.className),
            })
            : false));
});
Button$1.displayName = "Button";
Button$1.defaultProps = {
    as: defaultElement$V,
    type: "button",
    onClick: () => void 0,
};

const defaultElement$U = "div";
function AccordionGroup(_a) {
    var { as, children, util, className, toggleAll, testId, openLabel, closeLabel } = _a, attrs = __rest$1(_a, ["as", "children", "util", "className", "toggleAll", "testId", "openLabel", "closeLabel"]);
    const Tag = as || defaultElement$U;
    const [isOpen, setIsOpen] = React.useState(false);
    const accordionGroupClassnames = clsx("kds-accordion-group", util || className);
    const handleClick = (e) => {
        e.preventDefault();
        setIsOpen(!isOpen);
        toggleAll(e);
    };
    const labelText = isOpen ? closeLabel : openLabel;
    return (React.createElement(React.Fragment, null,
        React.createElement(Tag, Object.assign({ className: accordionGroupClassnames, "data-testid": testId }, attrs),
            toggleAll ? (React.createElement("div", { className: "kds-accordion-group__toggle kds-mb-2" },
                React.createElement(Button$1, { appearance: "link", onClick: handleClick }, labelText))) : null,
            children)));
}

function SvgIconClose(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeMiterlimit: 10, strokeWidth: 2, d: "M4 20 20 4m0 16L4 4" }),
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }))));
}

function Collapse({ id, isOpen, animate, children }) {
    const generatedId = React.useId();
    const contextValues = React.useMemo(() => ({
        id: id || generatedId,
        isOpen,
        animate,
    }), [animate, generatedId, id, isOpen]);
    return React.createElement(CollapseContext.Provider, { value: contextValues }, children);
}
Collapse.defaultProps = {
    animate: true,
};

const defaultElement$T = "div";
function CollapseBody(_a) {
    var { as, children, testId, className } = _a, attrs = __rest$1(_a, ["as", "children", "testId", "className"]);
    const Tag = as || defaultElement$T;
    const elRef = React.useRef(null);
    const collapseContext = React.useContext(CollapseContext);
    const toggleCollapse = useCollapse(elRef, !!(collapseContext === null || collapseContext === void 0 ? void 0 : collapseContext.isOpen), collapseContext.animate);
    const [isOpenByDefault] = React.useState(collapseContext === null || collapseContext === void 0 ? void 0 : collapseContext.isOpen);
    useIsomorphicLayoutEffect$1(() => {
        toggleCollapse();
    }, [toggleCollapse]);
    return (React.createElement(Tag, Object.assign({ "data-testid": testId, id: `${collapseContext === null || collapseContext === void 0 ? void 0 : collapseContext.id}-body`, ref: elRef, role: "region", "aria-labelledby": `${collapseContext === null || collapseContext === void 0 ? void 0 : collapseContext.id}-toggle`, className: clsx(className, "kds-collapse", { "kds-collapse--visible": isOpenByDefault }) }, attrs), React.Children.only(children)));
}
CollapseBody.defaultProps = {
    as: defaultElement$T,
};

function CollapseToggle(_a) {
    var { children } = _a, attrs = __rest$1(_a, ["children"]);
    const context = React.useContext(CollapseContext);
    if (!React.isValidElement(children))
        return null;
    return React.cloneElement(children, Object.assign({ id: `${context === null || context === void 0 ? void 0 : context.id}-toggle`, "aria-controls": `${context === null || context === void 0 ? void 0 : context.id}-body`, "aria-expanded": context === null || context === void 0 ? void 0 : context.isOpen }, attrs));
}

function SvgIconInfoCircle(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }),
            React__namespace.createElement("circle", { cx: 12, cy: 12, r: 10, fill: "none", stroke: "currentColor", strokeMiterlimit: 10, strokeWidth: 2 }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeMiterlimit: 10, strokeWidth: 2, d: "M12 17v-6" }),
            React__namespace.createElement("circle", { cx: 12, cy: 7, r: 0.3, fill: "none", stroke: "currentColor", strokeMiterlimit: 10, strokeWidth: 2 }))));
}

function SvgIconCheck(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M21 13.13V21H3V3h14.63" }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "m8 11 4 4L22 5" }))));
}

function SvgIconWarning(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeMiterlimit: 10, strokeWidth: 2, d: "M10.12 4.72 2.26 17.66A2.2 2.2 0 0 0 4.14 21h15.72a2.2 2.2 0 0 0 1.88-3.34L13.88 4.72a2.2 2.2 0 0 0-3.76 0Z" }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeMiterlimit: 10, strokeWidth: 2, d: "M12 8.27v5" }),
            React__namespace.createElement("circle", { cx: 12, cy: 17.27, r: 0.3, fill: "none", stroke: "currentColor", strokeMiterlimit: 10, strokeWidth: 2 }))));
}

function SvgIconError(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinejoin: "round", strokeWidth: 2, d: "M16.14 2H7.86L2 7.86v8.28L7.86 22h8.28L22 16.14V7.86z" }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeMiterlimit: 10, strokeWidth: 2, d: "M12 7v6" }),
            React__namespace.createElement("circle", { cx: 12, cy: 17, r: 0.3, fill: "none", stroke: "currentColor", strokeMiterlimit: 10, strokeWidth: 2 }))));
}

const AlertIcon = ({ icon, variant, iconAriaLabel }) => {
    let alertIcon = null;
    if (icon) {
        alertIcon = React.cloneElement(icon, { className: "kds-alert__icon", "aria-label": iconAriaLabel, size: "s" });
    }
    else if (variant === "primary") {
        alertIcon = React.createElement(SvgIconInfoCircle, { className: "kds-alert__icon", size: "s", "aria-label": iconAriaLabel });
    }
    else if (variant === "success") {
        alertIcon = React.createElement(SvgIconCheck, { className: "kds-alert__icon", size: "s", "aria-label": iconAriaLabel });
    }
    else if (variant === "warning") {
        alertIcon = React.createElement(SvgIconWarning, { className: "kds-alert__icon", size: "s", "aria-label": iconAriaLabel });
    }
    else if (variant === "danger") {
        alertIcon = React.createElement(SvgIconError, { className: "kds-alert__icon", size: "s", "aria-label": iconAriaLabel });
    }
    return alertIcon;
};

const AlertCollapseTitle = ({ icon, title, isOpen }) => (React.createElement(React.Fragment, null,
    React.createElement("span", { className: "kds-alert__collapse-btn-title" },
        icon,
        " ",
        title),
    React.createElement("span", { className: "kds-alert__collapse-btn-toggle" }, isOpen ? React.createElement(SvgIconCaretUp, { size: "s" }) : React.createElement(SvgIconCaretDown, { size: "s" }))));

const AlertContent = ({ variant, children, collapseTitle, collapseTitleContainer, container, onClick, isOpen, isCollapsible, icon, iconAriaLabel, }) => {
    const alertIcon = React.createElement(AlertIcon, { icon: icon, iconAriaLabel: iconAriaLabel, variant: variant });
    const contentClasses = clsx("kds-alert__content", {
        "kds-alert__content--container": !!container,
    });
    if (isCollapsible) {
        const toggleClasses = clsx("kds-alert__collapse-btn", {
            "kds-alert__collapse-btn--open": isOpen,
            "kds-alert__collapse-btn--container": !!collapseTitleContainer,
        });
        return (React.createElement(Collapse, { isOpen: isOpen },
            React.createElement(CollapseToggle, null,
                React.createElement("button", { type: "button", className: toggleClasses, onClick: onClick },
                    collapseTitleContainer &&
                        collapseTitleContainer({
                            children: React.createElement(AlertCollapseTitle, { icon: alertIcon, title: collapseTitle, isOpen: isOpen }),
                        }),
                    !collapseTitleContainer && React.createElement(AlertCollapseTitle, { icon: alertIcon, title: collapseTitle, isOpen: isOpen }))),
            React.createElement(CollapseBody, null,
                React.createElement(React.Fragment, null,
                    container &&
                        container({
                            children: React.createElement("div", { className: contentClasses }, children),
                        }),
                    !container && React.createElement("div", { className: "kds-alert__content" }, children)))));
    }
    return (React.createElement(React.Fragment, null,
        container &&
            container({
                children: (React.createElement(React.Fragment, null,
                    alertIcon,
                    React.createElement("div", { className: contentClasses }, children))),
            }),
        !container && (React.createElement(React.Fragment, null,
            alertIcon,
            React.createElement("div", { className: "kds-alert__content" }, children)))));
};

function Alert(_a) {
    var { variant, util, className, children, collapseTitle, onClick, isOpen, dismissible, flush, small, medium, testId, icon, textOnly, "aria-label": ariaLabel, iconAriaLabel, bgColor, iconPosition, collapseTitleContainer, container } = _a, attrs = __rest$1(_a, ["variant", "util", "className", "children", "collapseTitle", "onClick", "isOpen", "dismissible", "flush", "small", "medium", "testId", "icon", "textOnly", "aria-label", "iconAriaLabel", "bgColor", "iconPosition", "collapseTitleContainer", "container"]);
    const [show, setShow] = React.useState(true);
    if (!show) {
        return null;
    }
    const isCollapsible = !!collapseTitle;
    const classNames = clsx(util || className, "kds-alert", {
        "kds-alert--collapsible": isCollapsible,
        "kds-alert--dismissible": dismissible,
        "kds-alert--flush": flush,
        "kds-alert--text-only": textOnly,
        "kds-alert--sm": small,
        "kds-alert--md": medium,
        "kds-alert--container": !!container,
        [`kds-alert--icon-${iconPosition}`]: !isCollapsible && !!iconPosition,
        "kds-bg-white": !isCollapsible && bgColor && bgColor === "white",
    }, `kds-alert--${variant}`);
    return (React.createElement("div", Object.assign({ className: classNames, "data-testid": testId }, attrs),
        React.createElement(AlertContent, { collapseTitle: collapseTitle, collapseTitleContainer: collapseTitleContainer, container: container, isCollapsible: isCollapsible, isOpen: isOpen, onClick: onClick, variant: variant, icon: icon, iconAriaLabel: iconAriaLabel }, children),
        dismissible && !isCollapsible && (React.createElement("button", { type: "button", className: "kds-alert__close", onClick: () => setShow(false), "aria-label": ariaLabel },
            React.createElement(SvgIconClose, null)))));
}
Alert.defaultProps = {
    "aria-label": "Sulje",
    dismissible: false,
    iconPosition: "auto",
};

const defaultElement$S = "span";
function Badge(_a) {
    var { as, children, pill, testId, util, className, variant } = _a, attrs = __rest$1(_a, ["as", "children", "pill", "testId", "util", "className", "variant"]);
    const Tag = as || defaultElement$S;
    const classNames = clsx(util || className, "kds-badge", {
        "kds-badge--pill": pill,
        [`kds-badge--${variant}`]: variant,
    });
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
Badge.defaultProps = {
    as: defaultElement$S,
    pill: true,
};

const defaultElement$R = "div";
function Box(_a) {
    var { as, children, testId, util, className, appearance, variant, bgColor } = _a, attrs = __rest$1(_a, ["as", "children", "testId", "util", "className", "appearance", "variant", "bgColor"]);
    const Tag = as || defaultElement$R;
    const classNames = clsx(util || className, "kds-box", {
        [`kds-box--${variant}`]: variant,
        [`kds-box--outline`]: appearance === "outline",
        "kds-bg-white": bgColor === "white",
    });
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
Box.defaultProps = {
    as: defaultElement$R,
    appearance: "outline",
};

function Breadcrumb(_a) {
    var { children, util, className, testId } = _a, attrs = __rest$1(_a, ["children", "util", "className", "testId"]);
    const classNames = clsx("kds-breadcrumb", util || className);
    return (React.createElement("nav", Object.assign({ className: classNames, "data-testid": testId }, attrs),
        React.createElement("ol", null, children)));
}

const defaultElement$Q = "a";
function BreadcrumbItem(_a) {
    var { as, active = false, disabled = false, testId, util, className, children } = _a, attrs = __rest$1(_a, ["as", "active", "disabled", "testId", "util", "className", "children"]);
    const LinkTag = as || defaultElement$Q;
    const classNames = clsx({ "kds-breadcrumb__item": !active, "kds-breadcrumb__item--active": active }, util || className);
    if (active) {
        return (React.createElement("li", { className: classNames, "data-testid": testId, "aria-current": "page" }, children));
    }
    return (React.createElement("li", { className: classNames, "data-testid": testId },
        disabled ? React.createElement("span", { className: "kds-breadcrumb__link" }, children) : React.createElement(LinkTag, Object.assign({}, attrs), children),
        React.createElement("span", { className: "kds-breadcrumb__divider" }, "/")));
}

function ButtonGroup(_a) {
    var { fluid = true, large = false, small = false, horizontal, util, className, testId, children } = _a, attrs = __rest$1(_a, ["fluid", "large", "small", "horizontal", "util", "className", "testId", "children"]);
    const classNames = clsx(util || className, "kds-btn-group", {
        "kds-btn-group--lg": large,
        "kds-btn-group--sm": small,
        "kds-btn-group--fluid": fluid,
        [`${horizontal}:kds-btn-group--horizontal`]: horizontal,
    });
    return (React.createElement("div", Object.assign({ role: "group", className: classNames, "data-testid": testId }, attrs), children));
}

function ButtonToolbar(_a) {
    var { util, className, children, testId } = _a, attrs = __rest$1(_a, ["util", "className", "children", "testId"]);
    const classNames = clsx(util || className, "kds-btn-toolbar");
    return (React.createElement("div", Object.assign({ role: "toolbar", className: classNames, "data-testid": testId }, attrs), children));
}

const defaultElement$P = "div";
function Card(_a) {
    var { as, util, className, children, direction, testId } = _a, attrs = __rest$1(_a, ["as", "util", "className", "children", "direction", "testId"]);
    const Tag = as || defaultElement$P;
    const classNames = clsx("kds-card", `kds-card--${direction}`, util || className);
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
Card.defaultProps = {
    as: defaultElement$P,
    direction: "vertical",
};

const defaultElement$O = "div";
function CardBody(_a) {
    var { as, util, className, children, testId } = _a, attrs = __rest$1(_a, ["as", "util", "className", "children", "testId"]);
    const Tag = as || defaultElement$O;
    const classNames = clsx("kds-card__body", util || className);
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
CardBody.defaultProps = {
    as: defaultElement$O,
};

const defaultElement$N = "div";
function CardFooter(_a) {
    var { as, util, className, children, testId } = _a, attrs = __rest$1(_a, ["as", "util", "className", "children", "testId"]);
    const Tag = as || defaultElement$N;
    const classNames = clsx(util || className, "kds-card__footer");
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
CardFooter.defaultProps = {
    as: defaultElement$N,
};

const defaultElement$M = "div";
function CardHeader(_a) {
    var { as, util, className, testId, children } = _a, attrs = __rest$1(_a, ["as", "util", "className", "testId", "children"]);
    const Tag = as || defaultElement$M;
    const classNames = clsx(util || className, "kds-card__header");
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
CardHeader.defaultProps = {
    as: defaultElement$M,
};

const defaultElement$L = "figure";
function CardImage(_a) {
    var { as, src, testId, alt, caption, util, className } = _a, attrs = __rest$1(_a, ["as", "src", "testId", "alt", "caption", "util", "className"]);
    const Tag = as || defaultElement$L;
    const classNames = clsx("kds-card__figure", "kds-ratio kds-ratio--16x9", util || className);
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs),
        React.createElement("img", { className: "kds-card__img", src: src, alt: alt }),
        caption && React.createElement("figcaption", { className: "kds-card__figure-caption" }, caption)));
}
CardImage.defaultProps = {
    as: defaultElement$L,
    alt: "",
};

const defaultElement$K = "h2";
const Heading = React.forwardRef((_a, ref) => {
    var { as, size, underline, display, util, className, testId, children } = _a, attrs = __rest$1(_a, ["as", "size", "underline", "display", "util", "className", "testId", "children"]);
    const Tag = as || defaultElement$K;
    const classNames = clsx(util || className, "kds-heading", {
        [`kds-heading--display-${display}`]: display,
        [`kds-heading--underline`]: underline,
        [`kds-heading--${size}`]: size,
    });
    return (React.createElement(Tag, Object.assign({ className: classNames, ref: ref, "data-testid": testId }, attrs), children));
});
Heading.displayName = "Heading";
Heading.defaultProps = {
    as: defaultElement$K,
};

const defaultElement$J = "h2";
function CardTitle(_a) {
    var { as, util, className, children, testId } = _a, attrs = __rest$1(_a, ["as", "util", "className", "children", "testId"]);
    const headingAs = as || defaultElement$J;
    const classNames = clsx("kds-card__title", util || className);
    return (React.createElement(Heading, Object.assign({ as: headingAs, size: 4, className: classNames, "data-testid": testId }, attrs), children));
}
CardTitle.defaultProps = {
    as: defaultElement$J,
};

const defaultElement$I = "figure";
function CardIcon(_a) {
    var { as, testId, bgColor, util, className, children } = _a, attrs = __rest$1(_a, ["as", "testId", "bgColor", "util", "className", "children"]);
    const Tag = as || defaultElement$I;
    const classNames = clsx("kds-card__figure kds-ratio kds-ratio--16x9", util || className);
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs),
        React.createElement("div", { className: "kds-card__icon", style: { backgroundColor: bgColor } }, React.isValidElement(children) && React.cloneElement(children, { size: "none" }))));
}

var keyCodes;
(function (keyCodes) {
    keyCodes["BACKSPACE"] = "Backspace";
    keyCodes["DELETE"] = "Delete";
    keyCodes["ENTER"] = "Enter";
    keyCodes["ESC"] = "Escape";
    keyCodes["TAB"] = "Tab";
    keyCodes["SPACE"] = " ";
    keyCodes["UP"] = "ArrowUp";
    keyCodes["DOWN"] = "ArrowDown";
    keyCodes["HOME"] = "Home";
    keyCodes["END"] = "End";
})(keyCodes || (keyCodes = {}));
const isBackspace = (event) => event.key === keyCodes.BACKSPACE;
const isDelete = (event) => event.key === keyCodes.DELETE;
const isDown = (event) => event.key === keyCodes.DOWN;
const isEnter = (event) => event.key === keyCodes.ENTER;
const isEsc = (event) => event.key === keyCodes.ESC;
const isSpace = (event) => event.key === keyCodes.SPACE;
const isTab = (event) => event.key === keyCodes.TAB;
const isTabForward = (event) => !event.shiftKey && event.key === keyCodes.TAB;
const isTabBackward = (event) => event.shiftKey && event.key === keyCodes.TAB;
const isUp = (event) => event.key === keyCodes.UP;
const focusableElements = [
    "a[href]",
    "area[href]",
    "input:not([disabled]):not([type=hidden])",
    "select:not([disabled])",
    "textarea:not([disabled])",
    "button:not([disabled])",
    "object",
    "embed",
    '[tabindex]:not(.modal):not([tabindex="-1"])',
    "audio[controls]",
    "video[controls]",
    '[contenteditable]:not([contenteditable="false"])',
];
function getFocusableChildren(parent) {
    if (!parent)
        return [];
    const nodes = Array.from(parent.querySelectorAll(focusableElements.join(", ")));
    return nodes.filter((node) => node.getBoundingClientRect().width > 0 && node.getBoundingClientRect().height > 0);
}

const defaultElement$H = "span";
/**
 * Ref-prop välitetään komponentin juurielementille
 */
const Chip = React.forwardRef((_a, ref) => {
    var { as, deleteButtonAriaLabel, label, onClick, onDelete, util, className, testId, variant = "primary" } = _a, attrs = __rest$1(_a, ["as", "deleteButtonAriaLabel", "label", "onClick", "onDelete", "util", "className", "testId", "variant"]);
    const Tag = as || defaultElement$H;
    const isTestEnv = process.env.NODE_ENV === "test";
    const classNames = clsx(util || className, "kds-chip", {
        [`kds-chip--${variant}`]: variant,
        "kds-chip--interactive": onClick || attrs.href,
    });
    function handleKeyUp(e) {
        if (onClick && (isEnter(e) || isSpace(e))) {
            e.preventDefault();
            return onClick(e);
        }
        if (onDelete && (isBackspace(e) || isDelete(e))) {
            return onDelete(e);
        }
    }
    function handleDeleteKeyUp(e) {
        e.stopPropagation();
        if (isBackspace(e) || isDelete(e)) {
            return onDelete(e);
        }
    }
    return (React.createElement(Tag, Object.assign({ className: classNames, onClick: onClick, onKeyUp: handleKeyUp, ref: ref, "data-testid": testId, role: onClick ? "button" : undefined, tabIndex: onClick ? 0 : undefined }, attrs),
        React.createElement("span", { className: "kds-chip__label" }, label),
        onDelete && (React.createElement("button", { "data-testid": isTestEnv ? "kds-chip-delete-button" : undefined, "aria-label": deleteButtonAriaLabel, className: "kds-chip__delete", onKeyUp: handleDeleteKeyUp, onClick: (e) => {
                e.stopPropagation();
                e.preventDefault();
                return onDelete(e);
            }, type: "button" },
            React.createElement(SvgIconClose, null)))));
});
Chip.displayName = "Chip";

const defaultElement$G = "div";
/**
 * Ref-prop välitetään komponentin ainoalle HTML-elementille.
 */
const Chat = React.forwardRef((_a, ref) => {
    var { as, children, util, className, testId } = _a, attrs = __rest$1(_a, ["as", "children", "util", "className", "testId"]);
    const Tag = as || defaultElement$G;
    const containerClassNames = clsx("kds-chat", util || className);
    return (React.createElement(Tag, Object.assign({ ref: ref, "data-testid": testId, className: containerClassNames }, attrs), children));
});
Chat.displayName = "Chat";
Chat.defaultProps = {
    as: defaultElement$G,
};

function Skeleton(props) {
    const { as, variant, util, className, testId } = props, attrs = __rest$1(props, ["as", "variant", "util", "className", "testId"]);
    const Tag = as || Skeleton.defaultProps.as;
    const classNames = clsx("kds-skeleton", util || className, {
        [`kds-skeleton--${variant}`]: variant,
    });
    if (variant === "paragraph") {
        return (React.createElement("div", { "data-testid": testId },
            React.createElement(Tag, Object.assign({ className: classNames }, attrs)),
            React.createElement(Tag, Object.assign({ className: classNames }, attrs)),
            React.createElement(Tag, Object.assign({ className: `${classNames} last` }, attrs))));
    }
    return React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs));
}
Skeleton.defaultProps = {
    variant: "",
    as: "span",
};

const defaultElement$F = "div";
function ChatMessage(_a) {
    var { as, position, name, form, outline, loading, animate, onMount, onLoaded, util, className, children, testId } = _a, attrs = __rest$1(_a, ["as", "position", "name", "form", "outline", "loading", "animate", "onMount", "onLoaded", "util", "className", "children", "testId"]);
    const Tag = as || defaultElement$F;
    const [isAnimated, setAnimated] = React.useState(animate);
    const containerRef = React.useRef(null);
    const prevRect = React.useRef();
    const mountAnimation = React.useRef();
    const updateAnimation = React.useRef();
    // Appear animation on mount
    useIsomorphicLayoutEffect$1(() => {
        var _a, _b;
        if (isAnimated && supportsAnimations() && containerRef.current) {
            mountAnimation.current = (_a = containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) === null || _a === void 0 ? void 0 : _a.animate([
                {
                    opacity: 0,
                    transform: position === "left" ? "translate(-4rem, 1rem)" : "translate(4rem, 1rem)",
                },
                {
                    opacity: 1,
                    transform: "translate(0, 0)",
                },
            ], {
                duration: DURATION_LARGE_ENTER,
                easing: EASING_DECELERATE,
            });
        }
        // Enable animations after first render
        setAnimated(true);
        // Store skeleton size for animations
        if (loading) {
            prevRect.current = (_b = containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect();
        }
        if (onMount)
            onMount();
        // Clean animations on unmount
        return () => {
            if (mountAnimation.current)
                mountAnimation.current.cancel();
            if (updateAnimation.current)
                updateAnimation.current.cancel();
        };
    }, []);
    // Animated size change when loading state changes
    // Performance is not optimal, see https://css-tricks.com/animating-layouts-with-the-flip-technique/ for improvements
    useIsomorphicLayoutEffect$1(() => {
        if (isAnimated && supportsAnimations() && containerRef.current && prevRect.current) {
            const currRect = containerRef.current.getBoundingClientRect();
            if (prevRect.current.width !== currRect.width || prevRect.current.height !== currRect.height) {
                updateAnimation.current = containerRef.current.animate([
                    {
                        position: "relative",
                        width: `${prevRect.current.width}px`,
                        height: `${prevRect.current.height}px`,
                    },
                    {
                        position: "relative",
                        width: `${currRect.width}px`,
                        height: `${currRect.height}px`,
                    },
                ], {
                    duration: DURATION_SMALL_ENTER,
                    easing: EASING_DECELERATE,
                });
                updateAnimation.current.onfinish = () => {
                    var _a;
                    prevRect.current = (_a = containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
                    if (onLoaded) {
                        onLoaded();
                    }
                };
            }
        }
    }, [loading, children]);
    const containerClassNames = clsx("kds-chat__message", {
        [`kds-chat__message--${position}`]: position,
    });
    const bubbleClassNames = clsx("kds-chat__bubble", util || className, {
        "kds-chat__bubble--loading": loading,
        "kds-chat__bubble--form": form,
        "kds-chat__bubble--outline": outline,
    });
    return (React.createElement(Tag, { className: containerClassNames, "data-testid": testId },
        name && React.createElement("small", { className: "kds-chat__message-name" }, name),
        React.createElement("div", Object.assign({ ref: containerRef, className: bubbleClassNames }, attrs), loading ? React.createElement(Skeleton, null) : children)));
}
ChatMessage.defaultProps = {
    as: "div",
    form: false,
    animate: true,
};

const defaultElement$E = "p";
function InputText(_a) {
    var { as, error, info, addon, testId, children, util, className } = _a, attrs = __rest$1(_a, ["as", "error", "info", "addon", "testId", "children", "util", "className"]);
    const Tag = as || defaultElement$E;
    const textClassNames = clsx(util || className, "kds-input-text", {
        "kds-input-text--info": info,
        "kds-input-text--invalid": error,
        "kds-input-text--addon": addon,
    });
    return (React.createElement(Tag, Object.assign({ className: textClassNames, "data-testid": testId }, attrs), info ? React.createElement("small", null, children) : children));
}
InputText.defaultProps = {
    as: defaultElement$E,
    error: false,
    info: false,
    addon: false,
};

/**
 * Ref-prop välitetään komponentin input-elementille.
 */
const Checkbox = React.forwardRef((_a, ref) => {
    var { id, labelText, infoText, errorText, testId, size = "md", hideLabel = false, disabled = false, invalid = false, required = false, requiredGroup = false, center, util, className } = _a, attrs = __rest$1(_a, ["id", "labelText", "infoText", "errorText", "testId", "size", "hideLabel", "disabled", "invalid", "required", "requiredGroup", "center", "util", "className"]);
    const generatedId = React.useId();
    const elementId = id || generatedId;
    const textIds = clsx({
        [`${elementId}-error`]: errorText && invalid,
    });
    const inputDescribedBy = textIds.length > 0 ? textIds : undefined;
    const containerClassNames = clsx("kds-option kds-checkbox", util || className, {
        "kds-option--centered": center,
        "kds-option--label-hidden": hideLabel,
        "kds-option--invalid kds-checkbox--invalid": disabled && invalid ? false : invalid,
    });
    const inputTextClassName = clsx({ "kds-text-sm": size === "xs" });
    const inputClassName = `kds-option__input kds-checkbox__input kds-option__input--${size} kds-checkbox__input--${size}`;
    const labelClassNames = clsx("kds-flex kds-flex-col", {
        "kds-sr-only": hideLabel,
        "kds-text-sm": size === "xs",
    });
    return (React.createElement("div", { className: containerClassNames, "data-testid": testId },
        invalid && errorText && (React.createElement(InputText, { className: inputTextClassName, error: true, id: `${elementId}-error` }, errorText)),
        React.createElement("div", { className: "kds-flex" },
            React.createElement("input", Object.assign({ type: "checkbox", id: elementId, ref: ref, disabled: disabled, className: inputClassName, required: required || requiredGroup, "aria-describedby": inputDescribedBy }, attrs)),
            !infoText || typeof infoText === "string" ? (React.createElement("label", { className: "kds-option__label", htmlFor: elementId },
                React.createElement("span", { className: labelClassNames },
                    React.createElement("span", null,
                        labelText,
                        " ",
                        required ? React.createElement("strong", { "aria-hidden": "true" }, "\u002A") : null),
                    infoText && React.createElement("small", { className: "kds-input-text--info" }, infoText)))) : (React.createElement("div", { className: "kds-flex kds-flex-col" },
                React.createElement("label", { className: "kds-option__label", htmlFor: elementId },
                    React.createElement("span", { className: labelClassNames },
                        React.createElement("span", null,
                            labelText,
                            " ",
                            required ? React.createElement("strong", { "aria-hidden": "true" }, "\u002A") : null))),
                React.createElement("div", { className: "kds-input-text--info kds-pl-2" }, infoText))))));
});
Checkbox.displayName = "Checkbox";

const defaultElement$D = "div";
function Column(_a) {
    var { as, col, sm, md, lg, xl, xxl, xxxl, util, className, testId, children } = _a, attrs = __rest$1(_a, ["as", "col", "sm", "md", "lg", "xl", "xxl", "xxxl", "util", "className", "testId", "children"]);
    const Tag = as || defaultElement$D;
    const classNames = clsx(util || className, "kds-col", {
        [`kds-col--size kds-col--${col}`]: col,
        [`sm:kds-col--size sm:kds-col--${sm}`]: sm,
        [`md:kds-col--size md:kds-col--${md}`]: md,
        [`lg:kds-col--size lg:kds-col--${lg}`]: lg,
        [`xl:kds-col--size xl:kds-col--${xl}`]: xl,
        [`2xl:kds-col--size 2xl:kds-col--${xxl}`]: xxl,
        [`3xl:kds-col--size 3xl:kds-col--${xxxl}`]: xxxl,
    });
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
Column.defaultProps = {
    as: defaultElement$D,
};

const defaultElement$C = "div";
function Row$1(_a) {
    var { as, form, cols, sm, md, lg, xl, xxl, xxxl, gx, gy, children, testId, util, className } = _a, attrs = __rest$1(_a, ["as", "form", "cols", "sm", "md", "lg", "xl", "xxl", "xxxl", "gx", "gy", "children", "testId", "util", "className"]);
    const Tag = as || defaultElement$C;
    const classNames = clsx(util || className, "kds-row", {
        "kds-gx-2": form,
        [`kds-gx-${gx}`]: gx || gx === 0,
        [`kds-gy-${gy}`]: gy || gy === 0,
        [`kds-row--size kds-row--${cols}`]: cols,
        [`sm:kds-row--size sm:kds-row--${sm}`]: sm,
        [`md:kds-row--size md:kds-row--${md}`]: md,
        [`lg:kds-row--size lg:kds-row--${lg}`]: lg,
        [`xl:kds-row--size xl:kds-row--${xl}`]: xl,
        [`2xl:kds-row--size 2xl:kds-row--${xxl}`]: xxl,
        [`3xl:kds-row--size 3xl:kds-row--${xxxl}`]: xxxl,
    });
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
Row$1.defaultProps = {
    as: defaultElement$C,
    form: false,
};

var ActionType;
(function (ActionType) {
    ActionType["Hide"] = "HIDE";
    ActionType["HighlightNext"] = "HIGHLIGHT_NEXT";
    ActionType["HighlightPrev"] = "HIGHLIGHT_PREV";
    ActionType["Init"] = "INIT";
    ActionType["Reset"] = "RESET";
    ActionType["SelectMouse"] = "SELECT_MOUSE";
    ActionType["Show"] = "SHOW";
    ActionType["SelectKB"] = "SELECT_KB";
    ActionType["Toggle"] = "TOGGLE";
    ActionType["Update"] = "UPDATE_INPUT";
    ActionType["UpdateRef"] = "UPDATE_REF";
    ActionType["HandleValueSelectOnBlur"] = "BLUR";
    ActionType["PortalRef"] = "PORTAL_REF";
    ActionType["UsePortal"] = "USE_PORTAL";
    ActionType["FocusHandler"] = "FOCUS";
    ActionType["SetDefaultValue"] = "SET_DEFAULT_VALUE";
})(ActionType || (ActionType = {}));

const getLabelValue = ({ label, value }) => (label ? label : value);
const isOptionValueChanged = (a, b) => Object.entries(a).sort().toString() !== Object.entries(b).sort().toString();

// Filter ComboboxMenuOptions by comparing value prop to user input.
const includesOrStartsWith = (startsWith) => (startsWith ? "startsWith" : "includes");
const filterOptions = (options, userInput, threshold, startsWith) => {
    if (options.length > 0 && userInput.length >= threshold) {
        return options.filter((child) => {
            const label = getLabelValue(child.props);
            if (label) {
                const term = label.toLowerCase();
                const query = userInput.toLowerCase();
                return term[includesOrStartsWith(startsWith)](query) || child.props.isOtherOption;
            }
        });
    }
    return [];
};

const useOnClickOutside = (ref, handler) => {
    React.useEffect(() => {
        const listener = (event) => {
            const el = ref === null || ref === void 0 ? void 0 : ref.current;
            // Do nothing if clicking ref's element or descendent elements
            if (!el || el.contains(event.target)) {
                return;
            }
            handler(event);
        };
        document.addEventListener(`mousedown`, listener);
        document.addEventListener(`touchstart`, listener);
        return () => {
            document.removeEventListener(`mousedown`, listener);
            document.removeEventListener(`touchstart`, listener);
        };
        // Reload only if ref or handler changes
    }, [ref, handler]);
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT$1 = 'Expected a function';
/** Used as references for various `Number` constants. */
var NAN$1 = 0 / 0;
/** `Object#toString` result references. */
var symbolTag$1 = '[object Symbol]';
/** Used to match leading and trailing whitespace. */
var reTrim$1 = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */
var reIsBinary$1 = /^0b[01]+$/i;
/** Used to detect octal string values. */
var reIsOctal$1 = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */
var freeParseInt$1 = parseInt;
/** Detect free variable `global` from Node.js. */
var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
/** Detect free variable `self`. */
var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */
var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();
/** Used for built-in method references. */
var objectProto$1 = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$1 = objectProto$1.toString;
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$1 = Math.max, nativeMin$1 = Math.min;
/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now$1 = function () {
    return root$1.Date.now();
};
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce$2(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    wait = toNumber$1(wait) || 0;
    if (isObject$1(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax$1(toNumber$1(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
    }
    function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result = wait - timeSinceLastCall;
        return maxing ? nativeMin$1(result, maxWait - timeSinceLastInvoke) : result;
    }
    function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
            (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }
    function timerExpired() {
        var time = now$1();
        if (shouldInvoke(time)) {
            return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
        timerId = undefined;
        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
            return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
    }
    function cancel() {
        if (timerId !== undefined) {
            clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
        return timerId === undefined ? result : trailingEdge(now$1());
    }
    function debounced() {
        var time = now$1(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
            if (timerId === undefined) {
                return leadingEdge(lastCallTime);
            }
            if (maxing) {
                // Handle invocations in a tight loop.
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
            }
        }
        if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
        }
        return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
}
/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
    var leading = true, trailing = true;
    if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    if (isObject$1(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return debounce$2(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
    });
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$1(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$1(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$1(value) {
    return typeof value == 'symbol' ||
        (isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$1);
}
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber$1(value) {
    if (typeof value == 'number') {
        return value;
    }
    if (isSymbol$1(value)) {
        return NAN$1;
    }
    if (isObject$1(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject$1(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
        return value === 0 ? value : +value;
    }
    value = value.replace(reTrim$1, '');
    var isBinary = reIsBinary$1.test(value);
    return (isBinary || reIsOctal$1.test(value))
        ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex$1.test(value) ? NAN$1 : +value);
}
var lodash_throttle = throttle;
var throttle$1 = /*@__PURE__*/ getDefaultExportFromCjs(lodash_throttle);

/* eslint-disable @typescript-eslint/no-explicit-any */
const useThrottle = (callback, delay, options = { leading: true, trailing: false }) => {
    const callbackRef = React.useRef(callback);
    React.useEffect(() => {
        callbackRef.current = callback;
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
    return React.useCallback(throttle$1(() => callbackRef.current(), delay, options), [delay]);
};

const useIsFirstRender = () => {
    const isMountRef = React.useRef(true);
    React.useEffect(() => {
        isMountRef.current = false;
    }, []);
    return isMountRef.current;
};

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';
/** Used as references for various `Number` constants. */
var NAN = 0 / 0;
/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';
/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();
/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max, nativeMin = Math.min;
/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function () {
    return root.Date.now();
};
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
    }
    function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result = wait - timeSinceLastCall;
        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
    }
    function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
            (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }
    function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
            return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
        timerId = undefined;
        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
            return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
    }
    function cancel() {
        if (timerId !== undefined) {
            clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
        return timerId === undefined ? result : trailingEdge(now());
    }
    function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
            if (timerId === undefined) {
                return leadingEdge(lastCallTime);
            }
            if (maxing) {
                // Handle invocations in a tight loop.
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
            }
        }
        if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
        }
        return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
    return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
}
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
    if (typeof value == 'number') {
        return value;
    }
    if (isSymbol(value)) {
        return NAN;
    }
    if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
        return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
}
var lodash_debounce = debounce;
var debounce$1 = /*@__PURE__*/ getDefaultExportFromCjs(lodash_debounce);

/* eslint-disable @typescript-eslint/no-explicit-any */
function useIsMounted() {
    const isMountedRef = React.useRef(true);
    React.useEffect(() => {
        isMountedRef.current = true;
        return () => {
            isMountedRef.current = false;
        };
    }, []);
    return () => isMountedRef.current;
}
const useDebounce = (callback, delay, options = { leading: false, trailing: true }) => {
    const isMounted = useIsMounted();
    const inputsRef = React.useRef();
    React.useEffect(() => {
        inputsRef.current = { callback, delay };
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
    return React.useCallback(debounce$1((...args) => {
        // Don't execute callback, if (1) component in the meanwhile
        // has been unmounted or (2) delay has changed
        if (inputsRef.current.delay === delay && isMounted())
            inputsRef.current.callback(...args);
    }, delay, options), [delay, debounce$1]);
};

function Spinner(_a) {
    var { util, className, variant, srLoadingText, small, testId, medium, large } = _a, attrs = __rest$1(_a, ["util", "className", "variant", "srLoadingText", "small", "testId", "medium", "large"]);
    const classNames = clsx("kds-spinner", util || className, {
        [`kds-spinner--${variant}`]: variant,
        "kds-icon--size-s": small,
        "kds-icon--size-m": medium,
        "kds-icon--size-l": large,
    });
    return (React.createElement("div", Object.assign({}, attrs, { "data-testid": testId }),
        React.createElement("svg", { "aria-hidden": !srLoadingText ? true : undefined, className: classNames, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100", role: "img" },
            srLoadingText && React.createElement("title", null, srLoadingText),
            React.createElement("circle", { cx: "50", cy: "50", r: "45" }))));
}
Spinner.defaultProps = {
    small: false,
    medium: false,
    large: false,
};

/**
 * Ref-prop välitetään komponentin input-elementille.
 */
const Input = React.forwardRef((_a, ref) => {
    var { type, invalid, disabled, testId, addonBefore, addonAfter, htmlSize, size = "md", util, className, precision, onBlur, onInput, onWheel } = _a, attrs = __rest$1(_a, ["type", "invalid", "disabled", "testId", "addonBefore", "addonAfter", "htmlSize", "size", "util", "className", "precision", "onBlur", "onInput", "onWheel"]);
    const cssClassName = className || util;
    const hasAddOn = addonBefore || addonAfter;
    const inputClassName = clsx("kds-input__input", !hasAddOn && cssClassName, {
        "kds-input__input--invalid": disabled ? false : invalid,
        [`kds-input__input--${size}`]: size !== "md",
    });
    const handleOnBlur = (e) => {
        e.target.scrollLeft = 0;
        typeof onBlur === "function" && onBlur(e);
    };
    const handleOnInput = (e) => {
        // Limit input after set amount of decimals
        const t = e.target.value;
        if (precision && t.indexOf("." ) >= 0) {
            e.target.value = t.substr(0, t.indexOf("." )) + t.substr(t.indexOf("." ), precision + 1);
        }
        onInput === null || onInput === void 0 ? void 0 : onInput(e);
    };
    const handleOnWheel = (e) => {
        if (type === "number")
            e.target.blur();
        typeof onWheel === "function" && onWheel(e);
    };
    if (hasAddOn) {
        const containerClassName = clsx("kds-input", cssClassName, {
            "kds-input--disabled": disabled,
        });
        const addonClassName = clsx("kds-input__addon", {
            [`kds-input__addon--${size}`]: size,
        });
        return (React.createElement("div", { className: containerClassName, "data-testid": testId },
            addonBefore && React.createElement("div", { className: addonClassName }, addonBefore),
            React.createElement("input", Object.assign({ className: inputClassName, onWheel: handleOnWheel, onBlur: handleOnBlur, onInput: handleOnInput, size: htmlSize, type: type, ref: ref, disabled: disabled }, attrs)),
            addonAfter && React.createElement("div", { className: addonClassName }, addonAfter)));
    }
    return (React.createElement("input", Object.assign({ className: inputClassName, "data-testid": testId, size: htmlSize, ref: ref, disabled: disabled, onBlur: handleOnBlur, onWheel: handleOnWheel, onInput: handleOnInput, type: type }, attrs)));
});
Input.displayName = "Input";
Input.defaultProps = {
    type: "text",
    invalid: false,
    util: "",
};

const defaultElement$B = "label";
function InputLabel(_a) {
    var { as, center, required, requiredLabel, children, testId, util, className } = _a, attrs = __rest$1(_a, ["as", "center", "required", "requiredLabel", "children", "testId", "util", "className"]);
    const Tag = as || defaultElement$B;
    const labelClassNames = clsx(util || className, "kds-input-label kds-inline-block", {
        "kds-input-label--col": center,
    });
    return (React.createElement(Tag, Object.assign({ className: labelClassNames, "data-testid": testId }, attrs),
        children,
        (required || requiredLabel) && (React.createElement(React.Fragment, null,
            requiredLabel && React.createElement("span", { className: "kds-sr-only" },
                "\u00A0 ",
                requiredLabel),
            React.createElement("span", { "aria-hidden": "true" },
                " ",
                "\u002A")))));
}
InputLabel.defaultProps = {
    as: defaultElement$B,
    center: false,
    required: false,
    util: "",
};

const defaultElement$A = "div";
function InputGroup(_a) {
    var { as, inline, children, row, testId, util, className } = _a, attrs = __rest$1(_a, ["as", "inline", "children", "row", "testId", "util", "className"]);
    const htmlElement = as || defaultElement$A;
    const Tag = htmlElement;
    const containerClassNames = clsx("kds-input-group", {
        "kds-input-group--inline": inline,
    }, util || className);
    return (React.createElement(React.Fragment, null, row ? (React.cloneElement(React.createElement(Row$1, { as: htmlElement, gx: 2, className: containerClassNames, "data-testid": testId }, children), Object.assign({}, attrs))) : (React.createElement(Tag, Object.assign({ className: containerClassNames, "data-testid": testId }, attrs), children))));
}
InputGroup.defaultProps = {
    as: defaultElement$A,
    row: false,
    inline: false,
    util: "",
};

const initialComboboxState = {
    isOpen: false,
    allOptions: [],
    visibleOptions: [],
    kbNavigationIndex: null,
    isOptionSelected: false,
    showOtherOptionAlways: false,
    userInput: "",
};
const ComboboxContext = React.createContext({
    state: initialComboboxState,
    dispatch: () => null,
});

function Portal({ children, node, append }) {
    // If root node for portal is not defined, create a default DOM node
    const portalNode = React.useRef(node || (canUseDOM$1 ? document.createElement("div") : null));
    React.useEffect(() => {
        const currentPortal = portalNode.current;
        // Append new node to the end of <body>, if it's created in this component.
        if (!node) {
            append ? document.body.appendChild(currentPortal) : document.body.prepend(currentPortal);
        }
        // Destroy portal node, if it's created in this component.
        if (!node) {
            return () => {
                document.body.removeChild(currentPortal);
            };
        }
    }, [node, portalNode, append]);
    if (!canUseDOM$1)
        return null;
    // Create React Portal with provided children and container node
    return ReactDOM.createPortal(children, portalNode.current);
}
Portal.defaultProps = {
    append: true,
};

function ComboboxMenu(_a) {
    var { util, className, children, testId } = _a, attrs = __rest$1(_a, ["util", "className", "children", "testId"]);
    const { state: { id, isOpen, menuRef, visibleOptions, isPortal, showOtherOptionAlways }, dispatch, } = React.useContext(ComboboxContext);
    const comboboxMenuRef = React.useRef(null);
    const comboboxPortalRef = React.useRef(null);
    /**
     * Update options for filtering in Combobox.
     */
    React.useEffect(() => {
        const options = React.Children.toArray(children).map((item) => item);
        dispatch({ type: ActionType.Init, payload: options });
    }, [children, dispatch]);
    /**
     * Update refs for main Combobox component.
     */
    useIsomorphicLayoutEffect$1(() => {
        if (isOpen)
            dispatch({ type: ActionType.UpdateRef, payload: comboboxMenuRef });
        if (isOpen && isPortal)
            dispatch({ type: ActionType.PortalRef, payload: comboboxPortalRef });
    }, [dispatch, isOpen]);
    /**
     * Clone visible options with index to highlight active item when navigating options with keyboard.
     */
    const getOptions = React.useCallback(() => {
        const isOtherOptionVisible = (isOtherOption) => isOtherOption && (visibleOptions.length === 1 || showOtherOptionAlways);
        return React.Children.map(visibleOptions, (option, index) => {
            if (React.isValidElement(option) &&
                (!option.props.isOtherOption || isOtherOptionVisible(option.props.isOtherOption))) {
                return React.cloneElement(option, { index });
            }
        });
    }, [visibleOptions, showOtherOptionAlways]);
    // Update indexes only if visible options change.
    const memoizedOptions = React.useMemo(() => getOptions(), [getOptions]);
    if (!isOpen)
        return null;
    const menuClassNames = clsx(util || className, `kds-combobox__menu`);
    return (React.createElement(React.Fragment, null, isPortal ? (React.createElement(Portal, null,
        React.createElement("div", { ref: comboboxPortalRef, "data-testid": testId },
            React.createElement("ul", Object.assign({ role: "listbox", ref: menuRef, id: `${id}-menu`, className: menuClassNames, "aria-labelledby": `${id}-label` }, attrs), memoizedOptions)))) : (React.createElement("ul", Object.assign({ role: "listbox", ref: menuRef, id: `${id}-menu`, className: menuClassNames, "data-testid": testId, "aria-labelledby": `${id}-label` }, attrs), memoizedOptions))));
}
ComboboxMenu.defaultProps = {
    util: "",
};

function getNodeName(node) {
    if (isNode(node)) {
        return (node.nodeName || '').toLowerCase();
    }
    // Mocked nodes in testing environments may not be instances of Node. By
    // returning `#document` an infinite loop won't occur.
    // https://github.com/floating-ui/floating-ui/issues/2317
    return '#document';
}
function getWindow(node) {
    var _node$ownerDocument;
    return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
    var _ref;
    return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
    return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
    return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
    return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
    // Browsers without `ShadowRoot` support.
    if (typeof ShadowRoot === 'undefined') {
        return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
    const { overflow, overflowX, overflowY, display } = getComputedStyle$1(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);
}
function isTableElement(element) {
    return ['table', 'td', 'th'].includes(getNodeName(element));
}
function isContainingBlock(element) {
    const webkit = isWebKit();
    const css = getComputedStyle$1(element);
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
    return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));
}
function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
        if (isContainingBlock(currentNode)) {
            return currentNode;
        }
        else {
            currentNode = getParentNode(currentNode);
        }
    }
    return null;
}
function isWebKit() {
    if (typeof CSS === 'undefined' || !CSS.supports)
        return false;
    return CSS.supports('-webkit-backdrop-filter', 'none');
}
function isLastTraversableNode(node) {
    return ['html', 'body', '#document'].includes(getNodeName(node));
}
function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
    if (isElement(element)) {
        return {
            scrollLeft: element.scrollLeft,
            scrollTop: element.scrollTop
        };
    }
    return {
        scrollLeft: element.pageXOffset,
        scrollTop: element.pageYOffset
    };
}
function getParentNode(node) {
    if (getNodeName(node) === 'html') {
        return node;
    }
    const result = 
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot ||
        // DOM Element detected.
        node.parentNode ||
        // ShadowRoot detected.
        isShadowRoot(node) && node.host ||
        // Fallback.
        getDocumentElement(node);
    return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
    const parentNode = getParentNode(node);
    if (isLastTraversableNode(parentNode)) {
        return node.ownerDocument ? node.ownerDocument.body : node.body;
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
        return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
    var _node$ownerDocument2;
    if (list === void 0) {
        list = [];
    }
    if (traverseIframes === void 0) {
        traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow(scrollableAncestor);
    if (isBody) {
        return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

function activeElement(doc) {
    let activeElement = doc.activeElement;
    while (((_activeElement = activeElement) == null || (_activeElement = _activeElement.shadowRoot) == null ? void 0 : _activeElement.activeElement) != null) {
        var _activeElement;
        activeElement = activeElement.shadowRoot.activeElement;
    }
    return activeElement;
}
function contains(parent, child) {
    if (!parent || !child) {
        return false;
    }
    const rootNode = child.getRootNode && child.getRootNode();
    // First, attempt with faster native method
    if (parent.contains(child)) {
        return true;
    }
    // then fallback to custom implementation with Shadow DOM support
    if (rootNode && isShadowRoot(rootNode)) {
        let next = child;
        while (next) {
            if (parent === next) {
                return true;
            }
            // @ts-ignore
            next = next.parentNode || next.host;
        }
    }
    // Give up, the result is false
    return false;
}
// Avoid Chrome DevTools blue warning.
function getPlatform() {
    const uaData = navigator.userAgentData;
    if (uaData != null && uaData.platform) {
        return uaData.platform;
    }
    return navigator.platform;
}
function getUserAgent() {
    const uaData = navigator.userAgentData;
    if (uaData && Array.isArray(uaData.brands)) {
        return uaData.brands.map(_ref => {
            let { brand, version } = _ref;
            return brand + "/" + version;
        }).join(' ');
    }
    return navigator.userAgent;
}
// License: https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/utils/src/isVirtualEvent.ts
function isVirtualClick(event) {
    // FIXME: Firefox is now emitting a deprecation warning for `mozInputSource`.
    // Try to find a workaround for this. `react-aria` source still has the check.
    if (event.mozInputSource === 0 && event.isTrusted) {
        return true;
    }
    if (isAndroid() && event.pointerType) {
        return event.type === 'click' && event.buttons === 1;
    }
    return event.detail === 0 && !event.pointerType;
}
function isVirtualPointerEvent(event) {
    return !isAndroid() && event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse' ||
        // iOS VoiceOver returns 0.333• for width/height.
        event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0;
}
function isSafari() {
    // Chrome DevTools does not complain about navigator.vendor
    return /apple/i.test(navigator.vendor);
}
function isAndroid() {
    const re = /android/i;
    return re.test(getPlatform()) || re.test(getUserAgent());
}
function isMac() {
    return getPlatform().toLowerCase().startsWith('mac') && !navigator.maxTouchPoints;
}
function isMouseLikePointerType(pointerType, strict) {
    // On some Linux machines with Chromium, mouse inputs return a `pointerType`
    // of "pen": https://github.com/floating-ui/floating-ui/issues/2015
    const values = ['mouse', 'pen'];
    if (!strict) {
        values.push('', undefined);
    }
    return values.includes(pointerType);
}
function isReactEvent(event) {
    return 'nativeEvent' in event;
}
function isRootElement(element) {
    return element.matches('html,body');
}
function getDocument(node) {
    return (node == null ? void 0 : node.ownerDocument) || document;
}
function isEventTargetWithin(event, node) {
    if (node == null) {
        return false;
    }
    if ('composedPath' in event) {
        return event.composedPath().includes(node);
    }
    // TS thinks `event` is of type never as it assumes all browsers support composedPath, but browsers without shadow dom don't
    const e = event;
    return e.target != null && node.contains(e.target);
}
function getTarget(event) {
    if ('composedPath' in event) {
        return event.composedPath()[0];
    }
    // TS thinks `event` is of type never as it assumes all browsers support
    // `composedPath()`, but browsers without shadow DOM don't.
    return event.target;
}
const TYPEABLE_SELECTOR = "input:not([type='hidden']):not([disabled])," + "[contenteditable]:not([contenteditable='false']),textarea:not([disabled])";
function isTypeableElement(element) {
    return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);
}
function stopEvent(event) {
    event.preventDefault();
    event.stopPropagation();
}
function isTypeableCombobox(element) {
    if (!element)
        return false;
    return element.getAttribute('role') === 'combobox' && isTypeableElement(element);
}

const min$1 = Math.min;
const max$1 = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = v => ({
    x: v,
    y: v
});
const oppositeSideMap = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
};
const oppositeAlignmentMap = {
    start: 'end',
    end: 'start'
};
function clamp(start, value, end) {
    return max$1(start, min$1(value, end));
}
function evaluate(value, param) {
    return typeof value === 'function' ? value(param) : value;
}
function getSide(placement) {
    return placement.split('-')[0];
}
function getAlignment(placement) {
    return placement.split('-')[1];
}
function getOppositeAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
}
function getAxisLength(axis) {
    return axis === 'y' ? 'height' : 'width';
}
function getSideAxis(placement) {
    return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';
}
function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
        rtl = false;
    }
    const alignment = getAlignment(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const length = getAxisLength(alignmentAxis);
    let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';
    if (rects.reference[length] > rects.floating[length]) {
        mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
    const lr = ['left', 'right'];
    const rl = ['right', 'left'];
    const tb = ['top', 'bottom'];
    const bt = ['bottom', 'top'];
    switch (side) {
        case 'top':
        case 'bottom':
            if (rtl)
                return isStart ? rl : lr;
            return isStart ? lr : rl;
        case 'left':
        case 'right':
            return isStart ? tb : bt;
        default:
            return [];
    }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
    const alignment = getAlignment(placement);
    let list = getSideList(getSide(placement), direction === 'start', rtl);
    if (alignment) {
        list = list.map(side => side + "-" + alignment);
        if (flipAlignment) {
            list = list.concat(list.map(getOppositeAlignmentPlacement));
        }
    }
    return list;
}
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
    return Object.assign({ top: 0, right: 0, bottom: 0, left: 0 }, padding);
}
function getPaddingObject(padding) {
    return typeof padding !== 'number' ? expandPaddingObject(padding) : {
        top: padding,
        right: padding,
        bottom: padding,
        left: padding
    };
}
function rectToClientRect(rect) {
    return Object.assign(Object.assign({}, rect), { top: rect.y, left: rect.x, right: rect.x + rect.width, bottom: rect.y + rect.height });
}

function computeCoordsFromPlacement(_ref, placement, rtl) {
    let { reference, floating } = _ref;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === 'y';
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
        case 'top':
            coords = {
                x: commonX,
                y: reference.y - floating.height
            };
            break;
        case 'bottom':
            coords = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case 'right':
            coords = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case 'left':
            coords = {
                x: reference.x - floating.width,
                y: commonY
            };
            break;
        default:
            coords = {
                x: reference.x,
                y: reference.y
            };
    }
    switch (getAlignment(placement)) {
        case 'start':
            coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
            break;
        case 'end':
            coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
            break;
    }
    return coords;
}
/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a reference element when it is given a certain positioning strategy.
 *
 * This export does not have any `platform` interface logic. You will need to
 * write one for the platform you are using Floating UI with.
 */
const computePosition$1 = async (reference, floating, config) => {
    const { placement = 'bottom', strategy = 'absolute', middleware = [], platform } = config;
    const validMiddleware = middleware.filter(Boolean);
    const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));
    let rects = await platform.getElementRects({
        reference,
        floating,
        strategy
    });
    let { x, y } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i = 0; i < validMiddleware.length; i++) {
        const { name, fn } = validMiddleware[i];
        const { x: nextX, y: nextY, data, reset } = await fn({
            x,
            y,
            initialPlacement: placement,
            placement: statefulPlacement,
            strategy,
            middlewareData,
            rects,
            platform,
            elements: {
                reference,
                floating
            }
        });
        x = nextX != null ? nextX : x;
        y = nextY != null ? nextY : y;
        middlewareData = Object.assign(Object.assign({}, middlewareData), { [name]: Object.assign(Object.assign({}, middlewareData[name]), data) });
        if (reset && resetCount <= 50) {
            resetCount++;
            if (typeof reset === 'object') {
                if (reset.placement) {
                    statefulPlacement = reset.placement;
                }
                if (reset.rects) {
                    rects = reset.rects === true ? await platform.getElementRects({
                        reference,
                        floating,
                        strategy
                    }) : reset.rects;
                }
                ({
                    x,
                    y
                } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
            }
            i = -1;
            continue;
        }
    }
    return {
        x,
        y,
        placement: statefulPlacement,
        strategy,
        middlewareData
    };
};
/**
 * Resolves with an object of overflow side offsets that determine how much the
 * element is overflowing a given clipping boundary on each side.
 * - positive = overflowing the boundary by that number of pixels
 * - negative = how many pixels left before it will overflow
 * - 0 = lies flush with the boundary
 * @see https://floating-ui.com/docs/detectOverflow
 */
async function detectOverflow(state, options) {
    var _await$platform$isEle;
    if (options === void 0) {
        options = {};
    }
    const { x, y, platform, rects, elements, strategy } = state;
    const { boundary = 'clippingAncestors', rootBoundary = 'viewport', elementContext = 'floating', altBoundary = false, padding = 0 } = evaluate(options, state);
    const paddingObject = getPaddingObject(padding);
    const altContext = elementContext === 'floating' ? 'reference' : 'floating';
    const element = elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect(await platform.getClippingRect({
        element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),
        boundary,
        rootBoundary,
        strategy
    }));
    const rect = elementContext === 'floating' ? Object.assign(Object.assign({}, rects.floating), { x,
        y }) : rects.reference;
    const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));
    const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {
        x: 1,
        y: 1
    } : {
        x: 1,
        y: 1
    };
    const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({
        rect,
        offsetParent,
        strategy
    }) : rect);
    return {
        top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
        bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
        left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
        right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
}
/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow$1 = options => ({
    name: 'arrow',
    options,
    async fn(state) {
        const { x, y, placement, rects, platform, elements, middlewareData } = state;
        // Since `element` is required, we don't Partial<> the type.
        const { element, padding = 0 } = evaluate(options, state) || {};
        if (element == null) {
            return {};
        }
        const paddingObject = getPaddingObject(padding);
        const coords = {
            x,
            y
        };
        const axis = getAlignmentAxis(placement);
        const length = getAxisLength(axis);
        const arrowDimensions = await platform.getDimensions(element);
        const isYAxis = axis === 'y';
        const minProp = isYAxis ? 'top' : 'left';
        const maxProp = isYAxis ? 'bottom' : 'right';
        const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';
        const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
        const startDiff = coords[axis] - rects.reference[axis];
        const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));
        let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
        // DOM platform can return `window` as the `offsetParent`.
        if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {
            clientSize = elements.floating[clientProp] || rects.floating[length];
        }
        const centerToReference = endDiff / 2 - startDiff / 2;
        // If the padding is large enough that it causes the arrow to no longer be
        // centered, modify the padding so that it is centered.
        const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
        const minPadding = min$1(paddingObject[minProp], largestPossiblePadding);
        const maxPadding = min$1(paddingObject[maxProp], largestPossiblePadding);
        // Make sure the arrow doesn't overflow the floating element if the center
        // point is outside the floating element's bounds.
        const min$1$1 = minPadding;
        const max = clientSize - arrowDimensions[length] - maxPadding;
        const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
        const offset = clamp(min$1$1, center, max);
        // If the reference is small enough that the arrow's padding causes it to
        // to point to nothing for an aligned placement, adjust the offset of the
        // floating element itself. To ensure `shift()` continues to take action,
        // a single reset is performed when this is true.
        const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
        const alignmentOffset = shouldAddOffset ? center < min$1$1 ? center - min$1$1 : center - max : 0;
        return {
            [axis]: coords[axis] + alignmentOffset,
            data: Object.assign({ [axis]: offset, centerOffset: center - offset - alignmentOffset }, (shouldAddOffset && {
                alignmentOffset
            })),
            reset: shouldAddOffset
        };
    }
});
/**
 * Optimizes the visibility of the floating element by flipping the `placement`
 * in order to keep it in view when the preferred placement(s) will overflow the
 * clipping boundary. Alternative to `autoPlacement`.
 * @see https://floating-ui.com/docs/flip
 */
const flip = function (options) {
    if (options === void 0) {
        options = {};
    }
    return {
        name: 'flip',
        options,
        async fn(state) {
            var _middlewareData$arrow, _middlewareData$flip;
            const { placement, middlewareData, rects, initialPlacement, platform, elements } = state;
            const _a = evaluate(options, state), { mainAxis: checkMainAxis = true, crossAxis: checkCrossAxis = true, fallbackPlacements: specifiedFallbackPlacements, fallbackStrategy = 'bestFit', fallbackAxisSideDirection = 'none', flipAlignment = true } = _a, detectOverflowOptions = __rest$1(_a, ["mainAxis", "crossAxis", "fallbackPlacements", "fallbackStrategy", "fallbackAxisSideDirection", "flipAlignment"]);
            // If a reset by the arrow was caused due to an alignment offset being
            // added, we should skip any logic now since `flip()` has already done its
            // work.
            // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643
            if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
                return {};
            }
            const side = getSide(placement);
            const isBasePlacement = getSide(initialPlacement) === initialPlacement;
            const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
            const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
            if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {
                fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
            }
            const placements = [initialPlacement, ...fallbackPlacements];
            const overflow = await detectOverflow(state, detectOverflowOptions);
            const overflows = [];
            let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
            if (checkMainAxis) {
                overflows.push(overflow[side]);
            }
            if (checkCrossAxis) {
                const sides = getAlignmentSides(placement, rects, rtl);
                overflows.push(overflow[sides[0]], overflow[sides[1]]);
            }
            overflowsData = [...overflowsData, {
                    placement,
                    overflows
                }];
            // One or more sides is overflowing.
            if (!overflows.every(side => side <= 0)) {
                var _middlewareData$flip2, _overflowsData$filter;
                const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
                const nextPlacement = placements[nextIndex];
                if (nextPlacement) {
                    // Try next placement and re-run the lifecycle.
                    return {
                        data: {
                            index: nextIndex,
                            overflows: overflowsData
                        },
                        reset: {
                            placement: nextPlacement
                        }
                    };
                }
                // First, find the candidates that fit on the mainAxis side of overflow,
                // then find the placement that fits the best on the main crossAxis side.
                let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
                // Otherwise fallback.
                if (!resetPlacement) {
                    switch (fallbackStrategy) {
                        case 'bestFit':
                            {
                                var _overflowsData$map$so;
                                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
                                if (placement) {
                                    resetPlacement = placement;
                                }
                                break;
                            }
                        case 'initialPlacement':
                            resetPlacement = initialPlacement;
                            break;
                    }
                }
                if (placement !== resetPlacement) {
                    return {
                        reset: {
                            placement: resetPlacement
                        }
                    };
                }
            }
            return {};
        }
    };
};
// For type backwards-compatibility, the `OffsetOptions` type was also
// Derivable.
async function convertValueToCoords(state, options) {
    const { placement, platform, elements } = state;
    const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getSideAxis(placement) === 'y';
    const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;
    const crossAxisMulti = rtl && isVertical ? -1 : 1;
    const rawValue = evaluate(options, state);
    // eslint-disable-next-line prefer-const
    let { mainAxis, crossAxis, alignmentAxis } = typeof rawValue === 'number' ? {
        mainAxis: rawValue,
        crossAxis: 0,
        alignmentAxis: null
    } : Object.assign({ mainAxis: 0, crossAxis: 0, alignmentAxis: null }, rawValue);
    if (alignment && typeof alignmentAxis === 'number') {
        crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
        x: crossAxis * crossAxisMulti,
        y: mainAxis * mainAxisMulti
    } : {
        x: mainAxis * mainAxisMulti,
        y: crossAxis * crossAxisMulti
    };
}
/**
 * Modifies the placement by translating the floating element along the
 * specified axes.
 * A number (shorthand for `mainAxis` or distance), or an axes configuration
 * object may be passed.
 * @see https://floating-ui.com/docs/offset
 */
const offset = function (options) {
    if (options === void 0) {
        options = 0;
    }
    return {
        name: 'offset',
        options,
        async fn(state) {
            const { x, y } = state;
            const diffCoords = await convertValueToCoords(state, options);
            return {
                x: x + diffCoords.x,
                y: y + diffCoords.y,
                data: diffCoords
            };
        }
    };
};
/**
 * Optimizes the visibility of the floating element by shifting it in order to
 * keep it in view when it will overflow the clipping boundary.
 * @see https://floating-ui.com/docs/shift
 */
const shift = function (options) {
    if (options === void 0) {
        options = {};
    }
    return {
        name: 'shift',
        options,
        async fn(state) {
            const { x, y, placement } = state;
            const _a = evaluate(options, state), { mainAxis: checkMainAxis = true, crossAxis: checkCrossAxis = false, limiter = {
                fn: _ref => {
                    let { x, y } = _ref;
                    return {
                        x,
                        y
                    };
                }
            } } = _a, detectOverflowOptions = __rest$1(_a, ["mainAxis", "crossAxis", "limiter"]);
            const coords = {
                x,
                y
            };
            const overflow = await detectOverflow(state, detectOverflowOptions);
            const crossAxis = getSideAxis(getSide(placement));
            const mainAxis = getOppositeAxis(crossAxis);
            let mainAxisCoord = coords[mainAxis];
            let crossAxisCoord = coords[crossAxis];
            if (checkMainAxis) {
                const minSide = mainAxis === 'y' ? 'top' : 'left';
                const maxSide = mainAxis === 'y' ? 'bottom' : 'right';
                const min = mainAxisCoord + overflow[minSide];
                const max = mainAxisCoord - overflow[maxSide];
                mainAxisCoord = clamp(min, mainAxisCoord, max);
            }
            if (checkCrossAxis) {
                const minSide = crossAxis === 'y' ? 'top' : 'left';
                const maxSide = crossAxis === 'y' ? 'bottom' : 'right';
                const min = crossAxisCoord + overflow[minSide];
                const max = crossAxisCoord - overflow[maxSide];
                crossAxisCoord = clamp(min, crossAxisCoord, max);
            }
            const limitedCoords = limiter.fn(Object.assign(Object.assign({}, state), { [mainAxis]: mainAxisCoord, [crossAxis]: crossAxisCoord }));
            return Object.assign(Object.assign({}, limitedCoords), { data: {
                    x: limitedCoords.x - x,
                    y: limitedCoords.y - y
                } });
        }
    };
};
/**
 * Provides data that allows you to change the size of the floating element —
 * for instance, prevent it from overflowing the clipping boundary or match the
 * width of the reference element.
 * @see https://floating-ui.com/docs/size
 */
const size = function (options) {
    if (options === void 0) {
        options = {};
    }
    return {
        name: 'size',
        options,
        async fn(state) {
            const { placement, rects, platform, elements } = state;
            const _a = evaluate(options, state), { apply = () => { } } = _a, detectOverflowOptions = __rest$1(_a, ["apply"]);
            const overflow = await detectOverflow(state, detectOverflowOptions);
            const side = getSide(placement);
            const alignment = getAlignment(placement);
            const isYAxis = getSideAxis(placement) === 'y';
            const { width, height } = rects.floating;
            let heightSide;
            let widthSide;
            if (side === 'top' || side === 'bottom') {
                heightSide = side;
                widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';
            }
            else {
                widthSide = side;
                heightSide = alignment === 'end' ? 'top' : 'bottom';
            }
            const overflowAvailableHeight = height - overflow[heightSide];
            const overflowAvailableWidth = width - overflow[widthSide];
            const noShift = !state.middlewareData.shift;
            let availableHeight = overflowAvailableHeight;
            let availableWidth = overflowAvailableWidth;
            if (isYAxis) {
                const maximumClippingWidth = width - overflow.left - overflow.right;
                availableWidth = alignment || noShift ? min$1(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
            }
            else {
                const maximumClippingHeight = height - overflow.top - overflow.bottom;
                availableHeight = alignment || noShift ? min$1(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
            }
            if (noShift && !alignment) {
                const xMin = max$1(overflow.left, 0);
                const xMax = max$1(overflow.right, 0);
                const yMin = max$1(overflow.top, 0);
                const yMax = max$1(overflow.bottom, 0);
                if (isYAxis) {
                    availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max$1(overflow.left, overflow.right));
                }
                else {
                    availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max$1(overflow.top, overflow.bottom));
                }
            }
            await apply(Object.assign(Object.assign({}, state), { availableWidth,
                availableHeight }));
            const nextDimensions = await platform.getDimensions(elements.floating);
            if (width !== nextDimensions.width || height !== nextDimensions.height) {
                return {
                    reset: {
                        rects: true
                    }
                };
            }
            return {};
        }
    };
};

function getCssDimensions(element) {
    const css = getComputedStyle$1(element);
    // In testing environments, the `width` and `height` properties are empty
    // strings for SVG elements, returning NaN. Fallback to `0` in this case.
    let width = parseFloat(css.width) || 0;
    let height = parseFloat(css.height) || 0;
    const hasOffset = isHTMLElement(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width;
    const offsetHeight = hasOffset ? element.offsetHeight : height;
    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
    if (shouldFallback) {
        width = offsetWidth;
        height = offsetHeight;
    }
    return {
        width,
        height,
        $: shouldFallback
    };
}
function unwrapElement(element) {
    return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
    const domElement = unwrapElement(element);
    if (!isHTMLElement(domElement)) {
        return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const { width, height, $ } = getCssDimensions(domElement);
    let x = ($ ? round(rect.width) : rect.width) / width;
    let y = ($ ? round(rect.height) : rect.height) / height;
    // 0, NaN, or Infinity should always fallback to 1.
    if (!x || !Number.isFinite(x)) {
        x = 1;
    }
    if (!y || !Number.isFinite(y)) {
        y = 1;
    }
    return {
        x,
        y
    };
}
const noOffsets = /*#__PURE__*/ createCoords(0);
function getVisualOffsets(element) {
    const win = getWindow(element);
    if (!isWebKit() || !win.visualViewport) {
        return noOffsets;
    }
    return {
        x: win.visualViewport.offsetLeft,
        y: win.visualViewport.offsetTop
    };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
        isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
        return false;
    }
    return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
        includeScale = false;
    }
    if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement(element);
    let scale = createCoords(1);
    if (includeScale) {
        if (offsetParent) {
            if (isElement(offsetParent)) {
                scale = getScale(offsetParent);
            }
        }
        else {
            scale = getScale(element);
        }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x = (clientRect.left + visualOffsets.x) / scale.x;
    let y = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
        const win = getWindow(domElement);
        const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
        let currentIFrame = win.frameElement;
        while (currentIFrame && offsetParent && offsetWin !== win) {
            const iframeScale = getScale(currentIFrame);
            const iframeRect = currentIFrame.getBoundingClientRect();
            const css = getComputedStyle$1(currentIFrame);
            const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
            const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
            x *= iframeScale.x;
            y *= iframeScale.y;
            width *= iframeScale.x;
            height *= iframeScale.y;
            x += left;
            y += top;
            currentIFrame = getWindow(currentIFrame).frameElement;
        }
    }
    return rectToClientRect({
        width,
        height,
        x,
        y
    });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let { rect, offsetParent, strategy } = _ref;
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    if (offsetParent === documentElement) {
        return rect;
    }
    let scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {
        if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
            scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement(offsetParent)) {
            const offsetRect = getBoundingClientRect(offsetParent);
            scale = getScale(offsetParent);
            offsets.x = offsetRect.x + offsetParent.clientLeft;
            offsets.y = offsetRect.y + offsetParent.clientTop;
        }
    }
    return {
        width: rect.width * scale.x,
        height: rect.height * scale.y,
        x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
        y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
    };
}
function getClientRects(element) {
    return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
// Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable.
function getDocumentRect(element) {
    const html = getDocumentElement(element);
    const scroll = getNodeScroll(element);
    const body = element.ownerDocument.body;
    const width = max$1(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
    const height = max$1(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
    let x = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y = -scroll.scrollTop;
    if (getComputedStyle$1(body).direction === 'rtl') {
        x += max$1(html.clientWidth, body.clientWidth) - width;
    }
    return {
        width,
        height,
        x,
        y
    };
}
function getViewportRect(element, strategy) {
    const win = getWindow(element);
    const html = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x = 0;
    let y = 0;
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        const visualViewportBased = isWebKit();
        if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width,
        height,
        x,
        y
    };
}
// Returns the inner client rect, subtracting scrollbars if present.
function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');
    const top = clientRect.top + element.clientTop;
    const left = clientRect.left + element.clientLeft;
    const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
    const width = element.clientWidth * scale.x;
    const height = element.clientHeight * scale.y;
    const x = left * scale.x;
    const y = top * scale.y;
    return {
        width,
        height,
        x,
        y
    };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === 'viewport') {
        rect = getViewportRect(element, strategy);
    }
    else if (clippingAncestor === 'document') {
        rect = getDocumentRect(getDocumentElement(element));
    }
    else if (isElement(clippingAncestor)) {
        rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    }
    else {
        const visualOffsets = getVisualOffsets(element);
        rect = Object.assign(Object.assign({}, clippingAncestor), { x: clippingAncestor.x - visualOffsets.x, y: clippingAncestor.y - visualOffsets.y });
    }
    return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
    const parentNode = getParentNode(element);
    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
        return false;
    }
    return getComputedStyle$1(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);
}
// A "clipping ancestor" is an `overflow` element with the characteristic of
// clipping (or hiding) child elements. This returns all clipping ancestors
// of the given element up the tree.
function getClippingElementAncestors(element, cache) {
    const cachedResult = cache.get(element);
    if (cachedResult) {
        return cachedResult;
    }
    let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle$1(element).position === 'fixed';
    let currentNode = elementIsFixed ? getParentNode(element) : element;
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
    while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
        const computedStyle = getComputedStyle$1(currentNode);
        const currentNodeIsContaining = isContainingBlock(currentNode);
        if (!currentNodeIsContaining && computedStyle.position === 'fixed') {
            currentContainingBlockComputedStyle = null;
        }
        const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
        if (shouldDropCurrentNode) {
            // Drop non-containing blocks.
            result = result.filter(ancestor => ancestor !== currentNode);
        }
        else {
            // Record last containing block for next iteration.
            currentContainingBlockComputedStyle = computedStyle;
        }
        currentNode = getParentNode(currentNode);
    }
    cache.set(element, result);
    return result;
}
// Gets the maximum area that the element is visible in due to any number of
// clipping ancestors.
function getClippingRect(_ref) {
    let { element, boundary, rootBoundary, strategy } = _ref;
    const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
        const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
        accRect.top = max$1(rect.top, accRect.top);
        accRect.right = min$1(rect.right, accRect.right);
        accRect.bottom = min$1(rect.bottom, accRect.bottom);
        accRect.left = max$1(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
        width: clippingRect.right - clippingRect.left,
        height: clippingRect.bottom - clippingRect.top,
        x: clippingRect.left,
        y: clippingRect.top
    };
}
function getDimensions(element) {
    return getCssDimensions(element);
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const isFixed = strategy === 'fixed';
    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
    let scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
            scroll = getNodeScroll(offsetParent);
        }
        if (isOffsetParentAnElement) {
            const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
            offsets.x = offsetRect.x + offsetParent.clientLeft;
            offsets.y = offsetRect.y + offsetParent.clientTop;
        }
        else if (documentElement) {
            offsets.x = getWindowScrollBarX(documentElement);
        }
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}
function getTrueOffsetParent(element, polyfill) {
    if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {
        return null;
    }
    if (polyfill) {
        return polyfill(element);
    }
    return element.offsetParent;
}
// Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.
function getOffsetParent(element, polyfill) {
    const window = getWindow(element);
    if (!isHTMLElement(element)) {
        return window;
    }
    let offsetParent = getTrueOffsetParent(element, polyfill);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {
        return window;
    }
    return offsetParent || getContainingBlock(element) || window;
}
const getElementRects = async function (_ref) {
    let { reference, floating, strategy } = _ref;
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    return {
        reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
        floating: Object.assign({ x: 0, y: 0 }, (await getDimensionsFn(floating)))
    };
};
function isRTL(element) {
    return getComputedStyle$1(element).direction === 'rtl';
}
const platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement,
    isRTL
};
// https://samthor.au/2021/observing-dom/
function observeMove(element, onMove) {
    let io = null;
    let timeoutId;
    const root = getDocumentElement(element);
    function cleanup() {
        clearTimeout(timeoutId);
        io && io.disconnect();
        io = null;
    }
    function refresh(skip, threshold) {
        if (skip === void 0) {
            skip = false;
        }
        if (threshold === void 0) {
            threshold = 1;
        }
        cleanup();
        const { left, top, width, height } = element.getBoundingClientRect();
        if (!skip) {
            onMove();
        }
        if (!width || !height) {
            return;
        }
        const insetTop = floor(top);
        const insetRight = floor(root.clientWidth - (left + width));
        const insetBottom = floor(root.clientHeight - (top + height));
        const insetLeft = floor(left);
        const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
        const options = {
            rootMargin,
            threshold: max$1(0, min$1(1, threshold)) || 1
        };
        let isFirstUpdate = true;
        function handleObserve(entries) {
            const ratio = entries[0].intersectionRatio;
            if (ratio !== threshold) {
                if (!isFirstUpdate) {
                    return refresh();
                }
                if (!ratio) {
                    timeoutId = setTimeout(() => {
                        refresh(false, 1e-7);
                    }, 100);
                }
                else {
                    refresh(false, ratio);
                }
            }
            isFirstUpdate = false;
        }
        // Older browsers don't support a `document` as the root and will throw an
        // error.
        try {
            io = new IntersectionObserver(handleObserve, Object.assign(Object.assign({}, options), { 
                // Handle <iframe>s
                root: root.ownerDocument }));
        }
        catch (e) {
            io = new IntersectionObserver(handleObserve, options);
        }
        io.observe(element);
    }
    refresh(true);
    return cleanup;
}
/**
 * Automatically updates the position of the floating element when necessary.
 * Should only be called when the floating element is mounted on the DOM or
 * visible on the screen.
 * @returns cleanup function that should be invoked when the floating element is
 * removed from the DOM or hidden from the screen.
 * @see https://floating-ui.com/docs/autoUpdate
 */
function autoUpdate(reference, floating, update, options) {
    if (options === void 0) {
        options = {};
    }
    const { ancestorScroll = true, ancestorResize = true, elementResize = typeof ResizeObserver === 'function', layoutShift = typeof IntersectionObserver === 'function', animationFrame = false } = options;
    const referenceEl = unwrapElement(reference);
    const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];
    ancestors.forEach(ancestor => {
        ancestorScroll && ancestor.addEventListener('scroll', update, {
            passive: true
        });
        ancestorResize && ancestor.addEventListener('resize', update);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
        resizeObserver = new ResizeObserver(_ref => {
            let [firstEntry] = _ref;
            if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
                // Prevent update loops when using the `size` middleware.
                // https://github.com/floating-ui/floating-ui/issues/1740
                resizeObserver.unobserve(floating);
                cancelAnimationFrame(reobserveFrame);
                reobserveFrame = requestAnimationFrame(() => {
                    resizeObserver && resizeObserver.observe(floating);
                });
            }
            update();
        });
        if (referenceEl && !animationFrame) {
            resizeObserver.observe(referenceEl);
        }
        resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
    if (animationFrame) {
        frameLoop();
    }
    function frameLoop() {
        const nextRefRect = getBoundingClientRect(reference);
        if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
            update();
        }
        prevRefRect = nextRefRect;
        frameId = requestAnimationFrame(frameLoop);
    }
    update();
    return () => {
        ancestors.forEach(ancestor => {
            ancestorScroll && ancestor.removeEventListener('scroll', update);
            ancestorResize && ancestor.removeEventListener('resize', update);
        });
        cleanupIo && cleanupIo();
        resizeObserver && resizeObserver.disconnect();
        resizeObserver = null;
        if (animationFrame) {
            cancelAnimationFrame(frameId);
        }
    };
}
/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a reference element when it is given a certain CSS positioning
 * strategy.
 */
const computePosition = (reference, floating, options) => {
    // This caches the expensive `getClippingElementAncestors` function so that
    // multiple lifecycle resets re-use the same result. It only lives for a
    // single call. If other functions become expensive, we can add them as well.
    const cache = new Map();
    const mergedOptions = Object.assign({ platform }, options);
    const platformWithCache = Object.assign(Object.assign({}, mergedOptions.platform), { _c: cache });
    return computePosition$1(reference, floating, Object.assign(Object.assign({}, mergedOptions), { platform: platformWithCache }));
};

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * This wraps the core `arrow` middleware to allow React refs as the element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow = options => {
    function isRef(value) {
        return {}.hasOwnProperty.call(value, 'current');
    }
    return {
        name: 'arrow',
        options,
        fn(state) {
            const { element, padding } = typeof options === 'function' ? options(state) : options;
            if (element && isRef(element)) {
                if (element.current != null) {
                    return arrow$1({
                        element: element.current,
                        padding
                    }).fn(state);
                }
                return {};
            }
            else if (element) {
                return arrow$1({
                    element,
                    padding
                }).fn(state);
            }
            return {};
        }
    };
};
var index$1 = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;
// Fork of `fast-deep-equal` that only does the comparisons we need and compares
// functions
function deepEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (typeof a !== typeof b) {
        return false;
    }
    if (typeof a === 'function' && a.toString() === b.toString()) {
        return true;
    }
    let length, i, keys;
    if (a && b && typeof a == 'object') {
        if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length)
                return false;
            for (i = length; i-- !== 0;) {
                if (!deepEqual(a[i], b[i])) {
                    return false;
                }
            }
            return true;
        }
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) {
            return false;
        }
        for (i = length; i-- !== 0;) {
            if (!{}.hasOwnProperty.call(b, keys[i])) {
                return false;
            }
        }
        for (i = length; i-- !== 0;) {
            const key = keys[i];
            if (key === '_owner' && a.$$typeof) {
                continue;
            }
            if (!deepEqual(a[key], b[key])) {
                return false;
            }
        }
        return true;
    }
    return a !== a && b !== b;
}
function getDPR(element) {
    if (typeof window === 'undefined') {
        return 1;
    }
    const win = element.ownerDocument.defaultView || window;
    return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
    const dpr = getDPR(element);
    return Math.round(value * dpr) / dpr;
}
function useLatestRef$1(value) {
    const ref = React__namespace.useRef(value);
    index$1(() => {
        ref.current = value;
    });
    return ref;
}
/**
 * Provides data to position a floating element.
 * @see https://floating-ui.com/docs/useFloating
 */
function useFloating$1(options) {
    if (options === void 0) {
        options = {};
    }
    const { placement = 'bottom', strategy = 'absolute', middleware = [], platform, elements: { reference: externalReference, floating: externalFloating } = {}, transform = true, whileElementsMounted, open } = options;
    const [data, setData] = React__namespace.useState({
        x: 0,
        y: 0,
        strategy,
        placement,
        middlewareData: {},
        isPositioned: false
    });
    const [latestMiddleware, setLatestMiddleware] = React__namespace.useState(middleware);
    if (!deepEqual(latestMiddleware, middleware)) {
        setLatestMiddleware(middleware);
    }
    const [_reference, _setReference] = React__namespace.useState(null);
    const [_floating, _setFloating] = React__namespace.useState(null);
    const setReference = React__namespace.useCallback(node => {
        if (node != referenceRef.current) {
            referenceRef.current = node;
            _setReference(node);
        }
    }, [_setReference]);
    const setFloating = React__namespace.useCallback(node => {
        if (node !== floatingRef.current) {
            floatingRef.current = node;
            _setFloating(node);
        }
    }, [_setFloating]);
    const referenceEl = externalReference || _reference;
    const floatingEl = externalFloating || _floating;
    const referenceRef = React__namespace.useRef(null);
    const floatingRef = React__namespace.useRef(null);
    const dataRef = React__namespace.useRef(data);
    const whileElementsMountedRef = useLatestRef$1(whileElementsMounted);
    const platformRef = useLatestRef$1(platform);
    const update = React__namespace.useCallback(() => {
        if (!referenceRef.current || !floatingRef.current) {
            return;
        }
        const config = {
            placement,
            strategy,
            middleware: latestMiddleware
        };
        if (platformRef.current) {
            config.platform = platformRef.current;
        }
        computePosition(referenceRef.current, floatingRef.current, config).then(data => {
            const fullData = Object.assign(Object.assign({}, data), { isPositioned: true });
            if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
                dataRef.current = fullData;
                ReactDOM__namespace.flushSync(() => {
                    setData(fullData);
                });
            }
        });
    }, [latestMiddleware, placement, strategy, platformRef]);
    index$1(() => {
        if (open === false && dataRef.current.isPositioned) {
            dataRef.current.isPositioned = false;
            setData(data => (Object.assign(Object.assign({}, data), { isPositioned: false })));
        }
    }, [open]);
    const isMountedRef = React__namespace.useRef(false);
    index$1(() => {
        isMountedRef.current = true;
        return () => {
            isMountedRef.current = false;
        };
    }, []);
    index$1(() => {
        if (referenceEl)
            referenceRef.current = referenceEl;
        if (floatingEl)
            floatingRef.current = floatingEl;
        if (referenceEl && floatingEl) {
            if (whileElementsMountedRef.current) {
                return whileElementsMountedRef.current(referenceEl, floatingEl, update);
            }
            else {
                update();
            }
        }
    }, [referenceEl, floatingEl, update, whileElementsMountedRef]);
    const refs = React__namespace.useMemo(() => ({
        reference: referenceRef,
        floating: floatingRef,
        setReference,
        setFloating
    }), [setReference, setFloating]);
    const elements = React__namespace.useMemo(() => ({
        reference: referenceEl,
        floating: floatingEl
    }), [referenceEl, floatingEl]);
    const floatingStyles = React__namespace.useMemo(() => {
        const initialStyles = {
            position: strategy,
            left: 0,
            top: 0
        };
        if (!elements.floating) {
            return initialStyles;
        }
        const x = roundByDPR(elements.floating, data.x);
        const y = roundByDPR(elements.floating, data.y);
        if (transform) {
            return Object.assign(Object.assign(Object.assign({}, initialStyles), { transform: "translate(" + x + "px, " + y + "px)" }), (getDPR(elements.floating) >= 1.5 && {
                willChange: 'transform'
            }));
        }
        return {
            position: strategy,
            left: x,
            top: y
        };
    }, [strategy, transform, elements.floating, data.x, data.y]);
    return React__namespace.useMemo(() => (Object.assign(Object.assign({}, data), { update,
        refs,
        elements,
        floatingStyles })), [data, update, refs, elements, floatingStyles]);
}

/*!
* tabbable 6.2.0
* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
*/
// NOTE: separate `:not()` selectors has broader browser support than the newer
//  `:not([inert], [inert] *)` (Feb 2023)
// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes
//  the entire query to fail, resulting in no nodes found, which will break a lot
//  of things... so we have to rely on JS to identify nodes inside an inert container
var candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable="false"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];
var candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');
var NoElement = typeof Element === 'undefined';
var matches = NoElement ? function () { } : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {
    var _element$getRootNode;
    return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
} : function (element) {
    return element === null || element === void 0 ? void 0 : element.ownerDocument;
};
/**
 * Determines if a node is inert or in an inert ancestor.
 * @param {Element} [node]
 * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to
 *  see if any of them are inert. If false, only `node` itself is considered.
 * @returns {boolean} True if inert itself or by way of being in an inert ancestor.
 *  False if `node` is falsy.
 */
var isInert = function isInert(node, lookUp) {
    var _node$getAttribute;
    if (lookUp === void 0) {
        lookUp = true;
    }
    // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`
    //  JS API property; we have to check the attribute, which can either be empty or 'true';
    //  if it's `null` (not specified) or 'false', it's an active element
    var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');
    var inert = inertAtt === '' || inertAtt === 'true';
    // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`
    //  if it weren't for `matches()` not being a function on shadow roots; the following
    //  code works for any kind of node
    // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`
    //  so it likely would not support `:is([inert] *)` either...
    var result = inert || lookUp && node && isInert(node.parentNode); // recursive
    return result;
};
/**
 * Determines if a node's content is editable.
 * @param {Element} [node]
 * @returns True if it's content-editable; false if it's not or `node` is falsy.
 */
var isContentEditable = function isContentEditable(node) {
    var _node$getAttribute2;
    // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have
    //  to use the attribute directly to check for this, which can either be empty or 'true';
    //  if it's `null` (not specified) or 'false', it's a non-editable element
    var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');
    return attValue === '' || attValue === 'true';
};
/**
 * @param {Element} el container to check in
 * @param {boolean} includeContainer add container to check
 * @param {(node: Element) => boolean} filter filter candidates
 * @returns {Element[]}
 */
var getCandidates = function getCandidates(el, includeContainer, filter) {
    // even if `includeContainer=false`, we still have to check it for inertness because
    //  if it's inert, all its children are inert
    if (isInert(el)) {
        return [];
    }
    var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
    if (includeContainer && matches.call(el, candidateSelector)) {
        candidates.unshift(el);
    }
    candidates = candidates.filter(filter);
    return candidates;
};
/**
 * @callback GetShadowRoot
 * @param {Element} element to check for shadow root
 * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.
 */
/**
 * @callback ShadowRootFilter
 * @param {Element} shadowHostNode the element which contains shadow content
 * @returns {boolean} true if a shadow root could potentially contain valid candidates.
 */
/**
 * @typedef {Object} CandidateScope
 * @property {Element} scopeParent contains inner candidates
 * @property {Element[]} candidates list of candidates found in the scope parent
 */
/**
 * @typedef {Object} IterativeOptions
 * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;
 *  if a function, implies shadow support is enabled and either returns the shadow root of an element
 *  or a boolean stating if it has an undisclosed shadow root
 * @property {(node: Element) => boolean} filter filter candidates
 * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list
 * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;
 */
/**
 * @param {Element[]} elements list of element containers to match candidates from
 * @param {boolean} includeContainer add container list to check
 * @param {IterativeOptions} options
 * @returns {Array.<Element|CandidateScope>}
 */
var getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {
    var candidates = [];
    var elementsToCheck = Array.from(elements);
    while (elementsToCheck.length) {
        var element = elementsToCheck.shift();
        if (isInert(element, false)) {
            // no need to look up since we're drilling down
            // anything inside this container will also be inert
            continue;
        }
        if (element.tagName === 'SLOT') {
            // add shadow dom slot scope (slot itself cannot be focusable)
            var assigned = element.assignedElements();
            var content = assigned.length ? assigned : element.children;
            var nestedCandidates = getCandidatesIteratively(content, true, options);
            if (options.flatten) {
                candidates.push.apply(candidates, nestedCandidates);
            }
            else {
                candidates.push({
                    scopeParent: element,
                    candidates: nestedCandidates
                });
            }
        }
        else {
            // check candidate element
            var validCandidate = matches.call(element, candidateSelector);
            if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
                candidates.push(element);
            }
            // iterate over shadow content if possible
            var shadowRoot = element.shadowRoot ||
                // check for an undisclosed shadow
                typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);
            // no inert look up because we're already drilling down and checking for inertness
            //  on the way down, so all containers to this root node should have already been
            //  vetted as non-inert
            var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
            if (shadowRoot && validShadowRoot) {
                // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed
                //  shadow exists, so look at light dom children as fallback BUT create a scope for any
                //  child candidates found because they're likely slotted elements (elements that are
                //  children of the web component element (which has the shadow), in the light dom, but
                //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,
                //  _after_ we return from this recursive call
                var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);
                if (options.flatten) {
                    candidates.push.apply(candidates, _nestedCandidates);
                }
                else {
                    candidates.push({
                        scopeParent: element,
                        candidates: _nestedCandidates
                    });
                }
            }
            else {
                // there's not shadow so just dig into the element's (light dom) children
                //  __without__ giving the element special scope treatment
                elementsToCheck.unshift.apply(elementsToCheck, element.children);
            }
        }
    }
    return candidates;
};
/**
 * @private
 * Determines if the node has an explicitly specified `tabindex` attribute.
 * @param {HTMLElement} node
 * @returns {boolean} True if so; false if not.
 */
var hasTabIndex = function hasTabIndex(node) {
    return !isNaN(parseInt(node.getAttribute('tabindex'), 10));
};
/**
 * Determine the tab index of a given node.
 * @param {HTMLElement} node
 * @returns {number} Tab order (negative, 0, or positive number).
 * @throws {Error} If `node` is falsy.
 */
var getTabIndex = function getTabIndex(node) {
    if (!node) {
        throw new Error('No node provided');
    }
    if (node.tabIndex < 0) {
        // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
        // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
        // yet they are still part of the regular tab order; in FF, they get a default
        // `tabIndex` of 0; since Chrome still puts those elements in the regular tab
        // order, consider their tab index to be 0.
        // Also browsers do not return `tabIndex` correctly for contentEditable nodes;
        // so if they don't have a tabindex attribute specifically set, assume it's 0.
        if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
            return 0;
        }
    }
    return node.tabIndex;
};
/**
 * Determine the tab index of a given node __for sort order purposes__.
 * @param {HTMLElement} node
 * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,
 *  has tabIndex -1, but needs to be sorted by document order in order for its content to be
 *  inserted into the correct sort position.
 * @returns {number} Tab order (negative, 0, or positive number).
 */
var getSortOrderTabIndex = function getSortOrderTabIndex(node, isScope) {
    var tabIndex = getTabIndex(node);
    if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
        return 0;
    }
    return tabIndex;
};
var sortOrderedTabbables = function sortOrderedTabbables(a, b) {
    return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
};
var isInput = function isInput(node) {
    return node.tagName === 'INPUT';
};
var isHiddenInput = function isHiddenInput(node) {
    return isInput(node) && node.type === 'hidden';
};
var isDetailsWithSummary = function isDetailsWithSummary(node) {
    var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
        return child.tagName === 'SUMMARY';
    });
    return r;
};
var getCheckedRadio = function getCheckedRadio(nodes, form) {
    for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].checked && nodes[i].form === form) {
            return nodes[i];
        }
    }
};
var isTabbableRadio = function isTabbableRadio(node) {
    if (!node.name) {
        return true;
    }
    var radioScope = node.form || getRootNode(node);
    var queryRadios = function queryRadios(name) {
        return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
    };
    var radioSet;
    if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {
        radioSet = queryRadios(window.CSS.escape(node.name));
    }
    else {
        try {
            radioSet = queryRadios(node.name);
        }
        catch (err) {
            // eslint-disable-next-line no-console
            console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);
            return false;
        }
    }
    var checked = getCheckedRadio(radioSet, node.form);
    return !checked || checked === node;
};
var isRadio = function isRadio(node) {
    return isInput(node) && node.type === 'radio';
};
var isNonTabbableRadio = function isNonTabbableRadio(node) {
    return isRadio(node) && !isTabbableRadio(node);
};
// determines if a node is ultimately attached to the window's document
var isNodeAttached = function isNodeAttached(node) {
    var _nodeRoot;
    // The root node is the shadow root if the node is in a shadow DOM; some document otherwise
    //  (but NOT _the_ document; see second 'If' comment below for more).
    // If rootNode is shadow root, it'll have a host, which is the element to which the shadow
    //  is attached, and the one we need to check if it's in the document or not (because the
    //  shadow, and all nodes it contains, is never considered in the document since shadows
    //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,
    //  is hidden, or is not in the document itself but is detached, it will affect the shadow's
    //  visibility, including all the nodes it contains). The host could be any normal node,
    //  or a custom element (i.e. web component). Either way, that's the one that is considered
    //  part of the document, not the shadow root, nor any of its children (i.e. the node being
    //  tested).
    // To further complicate things, we have to look all the way up until we find a shadow HOST
    //  that is attached (or find none) because the node might be in nested shadows...
    // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the
    //  document (per the docs) and while it's a Document-type object, that document does not
    //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer
    //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,
    //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when
    //  node is actually detached.
    // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible
    //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed
    //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then
    //  `ownerDocument` will be `null`, hence the optional chaining on it.
    var nodeRoot = node && getRootNode(node);
    var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
    // in some cases, a detached node will return itself as the root instead of a document or
    //  shadow root object, in which case, we shouldn't try to look further up the host chain
    var attached = false;
    if (nodeRoot && nodeRoot !== node) {
        var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
        attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
        while (!attached && nodeRootHost) {
            var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
            // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,
            //  which means we need to get the host's host and check if that parent host is contained
            //  in (i.e. attached to) the document
            nodeRoot = getRootNode(nodeRootHost);
            nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
            attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
        }
    }
    return attached;
};
var isZeroArea = function isZeroArea(node) {
    var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
    return width === 0 && height === 0;
};
var isHidden = function isHidden(node, _ref) {
    var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
    // NOTE: visibility will be `undefined` if node is detached from the document
    //  (see notes about this further down), which means we will consider it visible
    //  (this is legacy behavior from a very long way back)
    // NOTE: we check this regardless of `displayCheck="none"` because this is a
    //  _visibility_ check, not a _display_ check
    if (getComputedStyle(node).visibility === 'hidden') {
        return true;
    }
    var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
    var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
    if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
        return true;
    }
    if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {
        if (typeof getShadowRoot === 'function') {
            // figure out if we should consider the node to be in an undisclosed shadow and use the
            //  'non-zero-area' fallback
            var originalNode = node;
            while (node) {
                var parentElement = node.parentElement;
                var rootNode = getRootNode(node);
                if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow
                ) {
                    // node has an undisclosed shadow which means we can only treat it as a black box, so we
                    //  fall back to a non-zero-area test
                    return isZeroArea(node);
                }
                else if (node.assignedSlot) {
                    // iterate up slot
                    node = node.assignedSlot;
                }
                else if (!parentElement && rootNode !== node.ownerDocument) {
                    // cross shadow boundary
                    node = rootNode.host;
                }
                else {
                    // iterate up normal dom
                    node = parentElement;
                }
            }
            node = originalNode;
        }
        // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support
        //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or
        //  it might be a falsy value, which means shadow DOM support is disabled
        // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)
        //  now we can just test to see if it would normally be visible or not, provided it's
        //  attached to the main document.
        // NOTE: We must consider case where node is inside a shadow DOM and given directly to
        //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.
        if (isNodeAttached(node)) {
            // this works wherever the node is: if there's at least one client rect, it's
            //  somehow displayed; it also covers the CSS 'display: contents' case where the
            //  node itself is hidden in place of its contents; and there's no need to search
            //  up the hierarchy either
            return !node.getClientRects().length;
        }
        // Else, the node isn't attached to the document, which means the `getClientRects()`
        //  API will __always__ return zero rects (this can happen, for example, if React
        //  is used to render nodes onto a detached tree, as confirmed in this thread:
        //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)
        //
        // It also means that even window.getComputedStyle(node).display will return `undefined`
        //  because styles are only computed for nodes that are in the document.
        //
        // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable
        //  somehow. Though it was never stated officially, anyone who has ever used tabbable
        //  APIs on nodes in detached containers has actually implicitly used tabbable in what
        //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck="none"` mode -- essentially
        //  considering __everything__ to be visible because of the innability to determine styles.
        //
        // v6.0.0: As of this major release, the default 'full' option __no longer treats detached
        //  nodes as visible with the 'none' fallback.__
        if (displayCheck !== 'legacy-full') {
            return true; // hidden
        }
        // else, fallback to 'none' mode and consider the node visible
    }
    else if (displayCheck === 'non-zero-area') {
        // NOTE: Even though this tests that the node's client rect is non-zero to determine
        //  whether it's displayed, and that a detached node will __always__ have a zero-area
        //  client rect, we don't special-case for whether the node is attached or not. In
        //  this mode, we do want to consider nodes that have a zero area to be hidden at all
        //  times, and that includes attached or not.
        return isZeroArea(node);
    }
    // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume
    //  it's visible
    return false;
};
// form fields (nested) inside a disabled fieldset are not focusable/tabbable
//  unless they are in the _first_ <legend> element of the top-most disabled
//  fieldset
var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
    if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
        var parentNode = node.parentElement;
        // check if `node` is contained in a disabled <fieldset>
        while (parentNode) {
            if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
                // look for the first <legend> among the children of the disabled <fieldset>
                for (var i = 0; i < parentNode.children.length; i++) {
                    var child = parentNode.children.item(i);
                    // when the first <legend> (in document order) is found
                    if (child.tagName === 'LEGEND') {
                        // if its parent <fieldset> is not nested in another disabled <fieldset>,
                        // return whether `node` is a descendant of its first <legend>
                        return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);
                    }
                }
                // the disabled <fieldset> containing `node` has no <legend>
                return true;
            }
            parentNode = parentNode.parentElement;
        }
    }
    // else, node's tabbable/focusable state should not be affected by a fieldset's
    //  enabled/disabled state
    return false;
};
var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
    if (node.disabled ||
        // we must do an inert look up to filter out any elements inside an inert ancestor
        //  because we're limited in the type of selectors we can use in JSDom (see related
        //  note related to `candidateSelectors`)
        isInert(node) || isHiddenInput(node) || isHidden(node, options) ||
        // For a details element with a summary, the summary element gets the focus
        isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
        return false;
    }
    return true;
};
var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {
    if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
        return false;
    }
    return true;
};
var isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {
    var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);
    if (isNaN(tabIndex) || tabIndex >= 0) {
        return true;
    }
    // If a custom element has an explicit negative tabindex,
    // browsers will not allow tab targeting said element's children.
    return false;
};
/**
 * @param {Array.<Element|CandidateScope>} candidates
 * @returns Element[]
 */
var sortByOrder = function sortByOrder(candidates) {
    var regularTabbables = [];
    var orderedTabbables = [];
    candidates.forEach(function (item, i) {
        var isScope = !!item.scopeParent;
        var element = isScope ? item.scopeParent : item;
        var candidateTabindex = getSortOrderTabIndex(element, isScope);
        var elements = isScope ? sortByOrder(item.candidates) : element;
        if (candidateTabindex === 0) {
            isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
        }
        else {
            orderedTabbables.push({
                documentOrder: i,
                tabIndex: candidateTabindex,
                item: item,
                isScope: isScope,
                content: elements
            });
        }
    });
    return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {
        sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
        return acc;
    }, []).concat(regularTabbables);
};
var tabbable = function tabbable(container, options) {
    options = options || {};
    var candidates;
    if (options.getShadowRoot) {
        candidates = getCandidatesIteratively([container], options.includeContainer, {
            filter: isNodeMatchingSelectorTabbable.bind(null, options),
            flatten: false,
            getShadowRoot: options.getShadowRoot,
            shadowRootFilter: isValidShadowRootTabbable
        });
    }
    else {
        candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
    }
    return sortByOrder(candidates);
};

// `toString()` prevents bundlers from trying to `import { useInsertionEffect } from 'react'`
const useInsertionEffect = React__namespace[ /*#__PURE__*/'useInsertionEffect'.toString()];
const useSafeInsertionEffect = useInsertionEffect || (fn => fn());
function useEffectEvent(callback) {
    const ref = React__namespace.useRef(() => {
        if (process.env.NODE_ENV !== "production") {
            throw new Error('Cannot call an event handler while rendering.');
        }
    });
    useSafeInsertionEffect(() => {
        ref.current = callback;
    });
    return React__namespace.useCallback(function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        return ref.current == null ? void 0 : ref.current(...args);
    }, []);
}
const ARROW_UP = 'ArrowUp';
const ARROW_DOWN = 'ArrowDown';
const ARROW_LEFT = 'ArrowLeft';
const ARROW_RIGHT = 'ArrowRight';
function isDifferentRow(index, cols, prevRow) {
    return Math.floor(index / cols) !== prevRow;
}
function isIndexOutOfBounds(listRef, index) {
    return index < 0 || index >= listRef.current.length;
}
function getMinIndex(listRef, disabledIndices) {
    return findNonDisabledIndex(listRef, {
        disabledIndices
    });
}
function getMaxIndex(listRef, disabledIndices) {
    return findNonDisabledIndex(listRef, {
        decrement: true,
        startingIndex: listRef.current.length,
        disabledIndices
    });
}
function findNonDisabledIndex(listRef, _temp) {
    let { startingIndex = -1, decrement = false, disabledIndices, amount = 1 } = _temp === void 0 ? {} : _temp;
    const list = listRef.current;
    const isDisabledIndex = disabledIndices ? index => disabledIndices.includes(index) : index => {
        const element = list[index];
        return element == null || element.hasAttribute('disabled') || element.getAttribute('aria-disabled') === 'true';
    };
    let index = startingIndex;
    do {
        index += decrement ? -amount : amount;
    } while (index >= 0 && index <= list.length - 1 && isDisabledIndex(index));
    return index;
}
function getGridNavigatedIndex(elementsRef, _ref) {
    let { event, orientation, loop, cols, disabledIndices, minIndex, maxIndex, prevIndex, stopEvent: stop = false } = _ref;
    let nextIndex = prevIndex;
    if (event.key === ARROW_UP) {
        stop && stopEvent(event);
        if (prevIndex === -1) {
            nextIndex = maxIndex;
        }
        else {
            nextIndex = findNonDisabledIndex(elementsRef, {
                startingIndex: nextIndex,
                amount: cols,
                decrement: true,
                disabledIndices
            });
            if (loop && (prevIndex - cols < minIndex || nextIndex < 0)) {
                const col = prevIndex % cols;
                const maxCol = maxIndex % cols;
                const offset = maxIndex - (maxCol - col);
                if (maxCol === col) {
                    nextIndex = maxIndex;
                }
                else {
                    nextIndex = maxCol > col ? offset : offset - cols;
                }
            }
        }
        if (isIndexOutOfBounds(elementsRef, nextIndex)) {
            nextIndex = prevIndex;
        }
    }
    if (event.key === ARROW_DOWN) {
        stop && stopEvent(event);
        if (prevIndex === -1) {
            nextIndex = minIndex;
        }
        else {
            nextIndex = findNonDisabledIndex(elementsRef, {
                startingIndex: prevIndex,
                amount: cols,
                disabledIndices
            });
            if (loop && prevIndex + cols > maxIndex) {
                nextIndex = findNonDisabledIndex(elementsRef, {
                    startingIndex: prevIndex % cols - cols,
                    amount: cols,
                    disabledIndices
                });
            }
        }
        if (isIndexOutOfBounds(elementsRef, nextIndex)) {
            nextIndex = prevIndex;
        }
    }
    // Remains on the same row/column.
    if (orientation === 'both') {
        const prevRow = floor(prevIndex / cols);
        if (event.key === ARROW_RIGHT) {
            stop && stopEvent(event);
            if (prevIndex % cols !== cols - 1) {
                nextIndex = findNonDisabledIndex(elementsRef, {
                    startingIndex: prevIndex,
                    disabledIndices
                });
                if (loop && isDifferentRow(nextIndex, cols, prevRow)) {
                    nextIndex = findNonDisabledIndex(elementsRef, {
                        startingIndex: prevIndex - prevIndex % cols - 1,
                        disabledIndices
                    });
                }
            }
            else if (loop) {
                nextIndex = findNonDisabledIndex(elementsRef, {
                    startingIndex: prevIndex - prevIndex % cols - 1,
                    disabledIndices
                });
            }
            if (isDifferentRow(nextIndex, cols, prevRow)) {
                nextIndex = prevIndex;
            }
        }
        if (event.key === ARROW_LEFT) {
            stop && stopEvent(event);
            if (prevIndex % cols !== 0) {
                nextIndex = findNonDisabledIndex(elementsRef, {
                    startingIndex: prevIndex,
                    disabledIndices,
                    decrement: true
                });
                if (loop && isDifferentRow(nextIndex, cols, prevRow)) {
                    nextIndex = findNonDisabledIndex(elementsRef, {
                        startingIndex: prevIndex + (cols - prevIndex % cols),
                        decrement: true,
                        disabledIndices
                    });
                }
            }
            else if (loop) {
                nextIndex = findNonDisabledIndex(elementsRef, {
                    startingIndex: prevIndex + (cols - prevIndex % cols),
                    decrement: true,
                    disabledIndices
                });
            }
            if (isDifferentRow(nextIndex, cols, prevRow)) {
                nextIndex = prevIndex;
            }
        }
        const lastRow = floor(maxIndex / cols) === prevRow;
        if (isIndexOutOfBounds(elementsRef, nextIndex)) {
            if (loop && lastRow) {
                nextIndex = event.key === ARROW_LEFT ? maxIndex : findNonDisabledIndex(elementsRef, {
                    startingIndex: prevIndex - prevIndex % cols - 1,
                    disabledIndices
                });
            }
            else {
                nextIndex = prevIndex;
            }
        }
    }
    return nextIndex;
}
let rafId = 0;
function enqueueFocus(el, options) {
    if (options === void 0) {
        options = {};
    }
    const { preventScroll = false, cancelPrevious = true, sync = false } = options;
    cancelPrevious && cancelAnimationFrame(rafId);
    const exec = () => el == null ? void 0 : el.focus({
        preventScroll
    });
    if (sync) {
        exec();
    }
    else {
        rafId = requestAnimationFrame(exec);
    }
}
var index = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;
function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
let serverHandoffComplete$1 = false;
let count = 0;
const genId$1 = () => "floating-ui-" + count++;
function useFloatingId() {
    const [id, setId] = React__namespace.useState(() => serverHandoffComplete$1 ? genId$1() : undefined);
    index(() => {
        if (id == null) {
            setId(genId$1());
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    React__namespace.useEffect(() => {
        if (!serverHandoffComplete$1) {
            serverHandoffComplete$1 = true;
        }
    }, []);
    return id;
}
// `toString()` prevents bundlers from trying to `import { useId } from 'react'`
const useReactId = React__namespace[ /*#__PURE__*/'useId'.toString()];
/**
 * Uses React 18's built-in `useId()` when available, or falls back to a
 * slightly less performant (requiring a double render) implementation for
 * earlier React versions.
 * @see https://floating-ui.com/docs/useId
 */
const useId$1 = useReactId || useFloatingId;
function createPubSub() {
    const map = new Map();
    return {
        emit(event, data) {
            var _map$get;
            (_map$get = map.get(event)) == null || _map$get.forEach(handler => handler(data));
        },
        on(event, listener) {
            map.set(event, [...(map.get(event) || []), listener]);
        },
        off(event, listener) {
            var _map$get2;
            map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter(l => l !== listener)) || []);
        }
    };
}
const FloatingNodeContext = /*#__PURE__*/ React__namespace.createContext(null);
const FloatingTreeContext = /*#__PURE__*/ React__namespace.createContext(null);
const useFloatingParentNodeId = () => {
    var _React$useContext;
    return ((_React$useContext = React__namespace.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;
};
const useFloatingTree = () => React__namespace.useContext(FloatingTreeContext);
function createAttribute(name) {
    return "data-floating-ui-" + name;
}
function useLatestRef(value) {
    const ref = React.useRef(value);
    index(() => {
        ref.current = value;
    });
    return ref;
}
const safePolygonIdentifier = /*#__PURE__*/ createAttribute('safe-polygon');
function getDelay(value, prop, pointerType) {
    if (pointerType && !isMouseLikePointerType(pointerType)) {
        return 0;
    }
    if (typeof value === 'number') {
        return value;
    }
    return value == null ? void 0 : value[prop];
}
/**
 * Opens the floating element while hovering over the reference element, like
 * CSS `:hover`.
 * @see https://floating-ui.com/docs/useHover
 */
function useHover(context, props) {
    if (props === void 0) {
        props = {};
    }
    const { open, onOpenChange, dataRef, events, elements: { domReference, floating }, refs } = context;
    const { enabled = true, delay = 0, handleClose = null, mouseOnly = false, restMs = 0, move = true } = props;
    const tree = useFloatingTree();
    const parentId = useFloatingParentNodeId();
    const handleCloseRef = useLatestRef(handleClose);
    const delayRef = useLatestRef(delay);
    const pointerTypeRef = React__namespace.useRef();
    const timeoutRef = React__namespace.useRef();
    const handlerRef = React__namespace.useRef();
    const restTimeoutRef = React__namespace.useRef();
    const blockMouseMoveRef = React__namespace.useRef(true);
    const performedPointerEventsMutationRef = React__namespace.useRef(false);
    const unbindMouseMoveRef = React__namespace.useRef(() => { });
    const isHoverOpen = React__namespace.useCallback(() => {
        var _dataRef$current$open;
        const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;
        return (type == null ? void 0 : type.includes('mouse')) && type !== 'mousedown';
    }, [dataRef]);
    // When closing before opening, clear the delay timeouts to cancel it
    // from showing.
    React__namespace.useEffect(() => {
        if (!enabled) {
            return;
        }
        function onOpenChange(_ref) {
            let { open } = _ref;
            if (!open) {
                clearTimeout(timeoutRef.current);
                clearTimeout(restTimeoutRef.current);
                blockMouseMoveRef.current = true;
            }
        }
        events.on('openchange', onOpenChange);
        return () => {
            events.off('openchange', onOpenChange);
        };
    }, [enabled, events]);
    React__namespace.useEffect(() => {
        if (!enabled || !handleCloseRef.current || !open) {
            return;
        }
        function onLeave(event) {
            if (isHoverOpen()) {
                onOpenChange(false, event, 'hover');
            }
        }
        const html = getDocument(floating).documentElement;
        html.addEventListener('mouseleave', onLeave);
        return () => {
            html.removeEventListener('mouseleave', onLeave);
        };
    }, [floating, open, onOpenChange, enabled, handleCloseRef, dataRef, isHoverOpen]);
    const closeWithDelay = React__namespace.useCallback(function (event, runElseBranch, reason) {
        if (runElseBranch === void 0) {
            runElseBranch = true;
        }
        if (reason === void 0) {
            reason = 'hover';
        }
        const closeDelay = getDelay(delayRef.current, 'close', pointerTypeRef.current);
        if (closeDelay && !handlerRef.current) {
            clearTimeout(timeoutRef.current);
            timeoutRef.current = setTimeout(() => onOpenChange(false, event, reason), closeDelay);
        }
        else if (runElseBranch) {
            clearTimeout(timeoutRef.current);
            onOpenChange(false, event, reason);
        }
    }, [delayRef, onOpenChange]);
    const cleanupMouseMoveHandler = React__namespace.useCallback(() => {
        unbindMouseMoveRef.current();
        handlerRef.current = undefined;
    }, []);
    const clearPointerEvents = React__namespace.useCallback(() => {
        if (performedPointerEventsMutationRef.current) {
            const body = getDocument(refs.floating.current).body;
            body.style.pointerEvents = '';
            body.removeAttribute(safePolygonIdentifier);
            performedPointerEventsMutationRef.current = false;
        }
    }, [refs]);
    // Registering the mouse events on the reference directly to bypass React's
    // delegation system. If the cursor was on a disabled element and then entered
    // the reference (no gap), `mouseenter` doesn't fire in the delegation system.
    React__namespace.useEffect(() => {
        if (!enabled) {
            return;
        }
        function isClickLikeOpenEvent() {
            return dataRef.current.openEvent ? ['click', 'mousedown'].includes(dataRef.current.openEvent.type) : false;
        }
        function onMouseEnter(event) {
            clearTimeout(timeoutRef.current);
            blockMouseMoveRef.current = false;
            if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && getDelay(delayRef.current, 'open') === 0) {
                return;
            }
            const openDelay = getDelay(delayRef.current, 'open', pointerTypeRef.current);
            if (openDelay) {
                timeoutRef.current = setTimeout(() => {
                    onOpenChange(true, event, 'hover');
                }, openDelay);
            }
            else {
                onOpenChange(true, event, 'hover');
            }
        }
        function onMouseLeave(event) {
            if (isClickLikeOpenEvent()) {
                return;
            }
            unbindMouseMoveRef.current();
            const doc = getDocument(floating);
            clearTimeout(restTimeoutRef.current);
            if (handleCloseRef.current) {
                // Prevent clearing `onScrollMouseLeave` timeout.
                if (!open) {
                    clearTimeout(timeoutRef.current);
                }
                handlerRef.current = handleCloseRef.current(Object.assign(Object.assign({}, context), { tree, x: event.clientX, y: event.clientY, onClose() {
                        clearPointerEvents();
                        cleanupMouseMoveHandler();
                        closeWithDelay(event, true, 'safe-polygon');
                    } }));
                const handler = handlerRef.current;
                doc.addEventListener('mousemove', handler);
                unbindMouseMoveRef.current = () => {
                    doc.removeEventListener('mousemove', handler);
                };
                return;
            }
            // Allow interactivity without `safePolygon` on touch devices. With a
            // pointer, a short close delay is an alternative, so it should work
            // consistently.
            const shouldClose = pointerTypeRef.current === 'touch' ? !contains(floating, event.relatedTarget) : true;
            if (shouldClose) {
                closeWithDelay(event);
            }
        }
        // Ensure the floating element closes after scrolling even if the pointer
        // did not move.
        // https://github.com/floating-ui/floating-ui/discussions/1692
        function onScrollMouseLeave(event) {
            if (isClickLikeOpenEvent()) {
                return;
            }
            handleCloseRef.current == null || handleCloseRef.current(Object.assign(Object.assign({}, context), { tree, x: event.clientX, y: event.clientY, onClose() {
                    clearPointerEvents();
                    cleanupMouseMoveHandler();
                    closeWithDelay(event);
                } }))(event);
        }
        if (isElement(domReference)) {
            const ref = domReference;
            open && ref.addEventListener('mouseleave', onScrollMouseLeave);
            floating == null || floating.addEventListener('mouseleave', onScrollMouseLeave);
            move && ref.addEventListener('mousemove', onMouseEnter, {
                once: true
            });
            ref.addEventListener('mouseenter', onMouseEnter);
            ref.addEventListener('mouseleave', onMouseLeave);
            return () => {
                open && ref.removeEventListener('mouseleave', onScrollMouseLeave);
                floating == null || floating.removeEventListener('mouseleave', onScrollMouseLeave);
                move && ref.removeEventListener('mousemove', onMouseEnter);
                ref.removeEventListener('mouseenter', onMouseEnter);
                ref.removeEventListener('mouseleave', onMouseLeave);
            };
        }
    }, [domReference, floating, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, tree, delayRef, handleCloseRef, dataRef]);
    // Block pointer-events of every element other than the reference and floating
    // while the floating element is open and has a `handleClose` handler. Also
    // handles nested floating elements.
    // https://github.com/floating-ui/floating-ui/issues/1722
    index(() => {
        var _handleCloseRef$curre;
        if (!enabled) {
            return;
        }
        if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {
            const body = getDocument(floating).body;
            body.setAttribute(safePolygonIdentifier, '');
            body.style.pointerEvents = 'none';
            performedPointerEventsMutationRef.current = true;
            if (isElement(domReference) && floating) {
                var _tree$nodesRef$curren;
                const ref = domReference;
                const parentFloating = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find(node => node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren.elements.floating;
                if (parentFloating) {
                    parentFloating.style.pointerEvents = '';
                }
                ref.style.pointerEvents = 'auto';
                floating.style.pointerEvents = 'auto';
                return () => {
                    ref.style.pointerEvents = '';
                    floating.style.pointerEvents = '';
                };
            }
        }
    }, [enabled, open, parentId, floating, domReference, tree, handleCloseRef, dataRef, isHoverOpen]);
    index(() => {
        if (!open) {
            pointerTypeRef.current = undefined;
            cleanupMouseMoveHandler();
            clearPointerEvents();
        }
    }, [open, cleanupMouseMoveHandler, clearPointerEvents]);
    React__namespace.useEffect(() => {
        return () => {
            cleanupMouseMoveHandler();
            clearTimeout(timeoutRef.current);
            clearTimeout(restTimeoutRef.current);
            clearPointerEvents();
        };
    }, [enabled, domReference, cleanupMouseMoveHandler, clearPointerEvents]);
    return React__namespace.useMemo(() => {
        if (!enabled) {
            return {};
        }
        function setPointerRef(event) {
            pointerTypeRef.current = event.pointerType;
        }
        return {
            reference: {
                onPointerDown: setPointerRef,
                onPointerEnter: setPointerRef,
                onMouseMove(event) {
                    if (open || restMs === 0) {
                        return;
                    }
                    clearTimeout(restTimeoutRef.current);
                    restTimeoutRef.current = setTimeout(() => {
                        if (!blockMouseMoveRef.current) {
                            onOpenChange(true, event.nativeEvent, 'hover');
                        }
                    }, restMs);
                }
            },
            floating: {
                onMouseEnter() {
                    clearTimeout(timeoutRef.current);
                },
                onMouseLeave(event) {
                    closeWithDelay(event.nativeEvent, false);
                }
            }
        };
    }, [enabled, restMs, open, onOpenChange, closeWithDelay]);
}
function getAncestors(nodes, id) {
    var _nodes$find;
    let allAncestors = [];
    let currentParentId = (_nodes$find = nodes.find(node => node.id === id)) == null ? void 0 : _nodes$find.parentId;
    while (currentParentId) {
        const currentNode = nodes.find(node => node.id === currentParentId);
        currentParentId = currentNode == null ? void 0 : currentNode.parentId;
        if (currentNode) {
            allAncestors = allAncestors.concat(currentNode);
        }
    }
    return allAncestors;
}
function getChildren(nodes, id) {
    let allChildren = nodes.filter(node => {
        var _node$context;
        return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);
    });
    let currentChildren = allChildren;
    while (currentChildren.length) {
        currentChildren = nodes.filter(node => {
            var _currentChildren;
            return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some(n => {
                var _node$context2;
                return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);
            });
        });
        allChildren = allChildren.concat(currentChildren);
    }
    return allChildren;
}
function getDeepestNode(nodes, id) {
    let deepestNodeId;
    let maxDepth = -1;
    function findDeepest(nodeId, depth) {
        if (depth > maxDepth) {
            deepestNodeId = nodeId;
            maxDepth = depth;
        }
        const children = getChildren(nodes, nodeId);
        children.forEach(child => {
            findDeepest(child.id, depth + 1);
        });
    }
    findDeepest(id, 0);
    return nodes.find(node => node.id === deepestNodeId);
}
// Modified to add conditional `aria-hidden` support:
// https://github.com/theKashey/aria-hidden/blob/9220c8f4a4fd35f63bee5510a9f41a37264382d4/src/index.ts
let counterMap = /*#__PURE__*/ new WeakMap();
let uncontrolledElementsSet = /*#__PURE__*/ new WeakSet();
let markerMap = {};
let lockCount = 0;
const supportsInert = () => typeof HTMLElement !== 'undefined' && 'inert' in HTMLElement.prototype;
const unwrapHost = node => node && (node.host || unwrapHost(node.parentNode));
const correctElements = (parent, targets) => targets.map(target => {
    if (parent.contains(target)) {
        return target;
    }
    const correctedTarget = unwrapHost(target);
    if (parent.contains(correctedTarget)) {
        return correctedTarget;
    }
    return null;
}).filter(x => x != null);
function applyAttributeToOthers(uncorrectedAvoidElements, body, ariaHidden, inert) {
    const markerName = 'data-floating-ui-inert';
    const controlAttribute = inert ? 'inert' : ariaHidden ? 'aria-hidden' : null;
    const avoidElements = correctElements(body, uncorrectedAvoidElements);
    const elementsToKeep = new Set();
    const elementsToStop = new Set(avoidElements);
    const hiddenElements = [];
    if (!markerMap[markerName]) {
        markerMap[markerName] = new WeakMap();
    }
    const markerCounter = markerMap[markerName];
    avoidElements.forEach(keep);
    deep(body);
    elementsToKeep.clear();
    function keep(el) {
        if (!el || elementsToKeep.has(el)) {
            return;
        }
        elementsToKeep.add(el);
        el.parentNode && keep(el.parentNode);
    }
    function deep(parent) {
        if (!parent || elementsToStop.has(parent)) {
            return;
        }
        Array.prototype.forEach.call(parent.children, node => {
            if (elementsToKeep.has(node)) {
                deep(node);
            }
            else {
                const attr = controlAttribute ? node.getAttribute(controlAttribute) : null;
                const alreadyHidden = attr !== null && attr !== 'false';
                const counterValue = (counterMap.get(node) || 0) + 1;
                const markerValue = (markerCounter.get(node) || 0) + 1;
                counterMap.set(node, counterValue);
                markerCounter.set(node, markerValue);
                hiddenElements.push(node);
                if (counterValue === 1 && alreadyHidden) {
                    uncontrolledElementsSet.add(node);
                }
                if (markerValue === 1) {
                    node.setAttribute(markerName, '');
                }
                if (!alreadyHidden && controlAttribute) {
                    node.setAttribute(controlAttribute, 'true');
                }
            }
        });
    }
    lockCount++;
    return () => {
        hiddenElements.forEach(element => {
            const counterValue = (counterMap.get(element) || 0) - 1;
            const markerValue = (markerCounter.get(element) || 0) - 1;
            counterMap.set(element, counterValue);
            markerCounter.set(element, markerValue);
            if (!counterValue) {
                if (!uncontrolledElementsSet.has(element) && controlAttribute) {
                    element.removeAttribute(controlAttribute);
                }
                uncontrolledElementsSet.delete(element);
            }
            if (!markerValue) {
                element.removeAttribute(markerName);
            }
        });
        lockCount--;
        if (!lockCount) {
            counterMap = new WeakMap();
            counterMap = new WeakMap();
            uncontrolledElementsSet = new WeakSet();
            markerMap = {};
        }
    };
}
function markOthers(avoidElements, ariaHidden, inert) {
    if (ariaHidden === void 0) {
        ariaHidden = false;
    }
    if (inert === void 0) {
        inert = false;
    }
    const body = getDocument(avoidElements[0]).body;
    return applyAttributeToOthers(avoidElements.concat(Array.from(body.querySelectorAll('[aria-live]'))), body, ariaHidden, inert);
}
const getTabbableOptions = () => ({
    getShadowRoot: true,
    displayCheck: 
    // JSDOM does not support the `tabbable` library. To solve this we can
    // check if `ResizeObserver` is a real function (not polyfilled), which
    // determines if the current environment is JSDOM-like.
    typeof ResizeObserver === 'function' && ResizeObserver.toString().includes('[native code]') ? 'full' : 'none'
});
function getTabbableIn(container, direction) {
    const allTabbable = tabbable(container, getTabbableOptions());
    if (direction === 'prev') {
        allTabbable.reverse();
    }
    const activeIndex = allTabbable.indexOf(activeElement(getDocument(container)));
    const nextTabbableElements = allTabbable.slice(activeIndex + 1);
    return nextTabbableElements[0];
}
function getNextTabbable() {
    return getTabbableIn(document.body, 'next');
}
function getPreviousTabbable() {
    return getTabbableIn(document.body, 'prev');
}
function isOutsideEvent(event, container) {
    const containerElement = container || event.currentTarget;
    const relatedTarget = event.relatedTarget;
    return !relatedTarget || !contains(containerElement, relatedTarget);
}
function disableFocusInside(container) {
    const tabbableElements = tabbable(container, getTabbableOptions());
    tabbableElements.forEach(element => {
        element.dataset.tabindex = element.getAttribute('tabindex') || '';
        element.setAttribute('tabindex', '-1');
    });
}
function enableFocusInside(container) {
    const elements = container.querySelectorAll('[data-tabindex]');
    elements.forEach(element => {
        const tabindex = element.dataset.tabindex;
        delete element.dataset.tabindex;
        if (tabindex) {
            element.setAttribute('tabindex', tabindex);
        }
        else {
            element.removeAttribute('tabindex');
        }
    });
}
// See Diego Haz's Sandbox for making this logic work well on Safari/iOS:
// https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/FocusTrap.tsx
const HIDDEN_STYLES = {
    border: 0,
    clip: 'rect(0 0 0 0)',
    height: '1px',
    margin: '-1px',
    overflow: 'hidden',
    padding: 0,
    position: 'fixed',
    whiteSpace: 'nowrap',
    width: '1px',
    top: 0,
    left: 0
};
let timeoutId;
function setActiveElementOnTab(event) {
    if (event.key === 'Tab') {
        event.target;
        clearTimeout(timeoutId);
    }
}
const FocusGuard = /*#__PURE__*/ React__namespace.forwardRef(function FocusGuard(props, ref) {
    const [role, setRole] = React__namespace.useState();
    index(() => {
        if (isSafari()) {
            // Unlike other screen readers such as NVDA and JAWS, the virtual cursor
            // on VoiceOver does trigger the onFocus event, so we can use the focus
            // trap element. On Safari, only buttons trigger the onFocus event.
            // NB: "group" role in the Sandbox no longer appears to work, must be a
            // button role.
            setRole('button');
        }
        document.addEventListener('keydown', setActiveElementOnTab);
        return () => {
            document.removeEventListener('keydown', setActiveElementOnTab);
        };
    }, []);
    const restProps = {
        ref,
        tabIndex: 0,
        // Role is only for VoiceOver
        role,
        'aria-hidden': role ? undefined : true,
        [createAttribute('focus-guard')]: '',
        style: HIDDEN_STYLES
    };
    return /*#__PURE__*/ React__namespace.createElement("span", _extends({}, props, restProps));
});
const PortalContext = /*#__PURE__*/ React__namespace.createContext(null);
function useFloatingPortalNode(_temp) {
    let { id, root } = _temp === void 0 ? {} : _temp;
    const [portalNode, setPortalNode] = React__namespace.useState(null);
    const uniqueId = useId$1();
    const portalContext = usePortalContext();
    const data = React__namespace.useMemo(() => ({
        id,
        root,
        portalContext,
        uniqueId
    }), [id, root, portalContext, uniqueId]);
    const dataRef = React__namespace.useRef();
    index(() => {
        return () => {
            portalNode == null || portalNode.remove();
        };
    }, [portalNode, data]);
    index(() => {
        if (dataRef.current === data)
            return;
        dataRef.current = data;
        const { id, root, portalContext, uniqueId } = data;
        const existingIdRoot = id ? document.getElementById(id) : null;
        const attr = createAttribute('portal');
        if (existingIdRoot) {
            const subRoot = document.createElement('div');
            subRoot.id = uniqueId;
            subRoot.setAttribute(attr, '');
            existingIdRoot.appendChild(subRoot);
            setPortalNode(subRoot);
        }
        else {
            let container = root || (portalContext == null ? void 0 : portalContext.portalNode);
            if (container && !isElement(container))
                container = container.current;
            container = container || document.body;
            let idWrapper = null;
            if (id) {
                idWrapper = document.createElement('div');
                idWrapper.id = id;
                container.appendChild(idWrapper);
            }
            const subRoot = document.createElement('div');
            subRoot.id = uniqueId;
            subRoot.setAttribute(attr, '');
            container = idWrapper || container;
            container.appendChild(subRoot);
            setPortalNode(subRoot);
        }
    }, [data]);
    return portalNode;
}
/**
 * Portals the floating element into a given container element — by default,
 * outside of the app root and into the body.
 * @see https://floating-ui.com/docs/FloatingPortal
 */
function FloatingPortal(_ref) {
    let { children, id, root = null, preserveTabOrder = true } = _ref;
    const portalNode = useFloatingPortalNode({
        id,
        root
    });
    const [focusManagerState, setFocusManagerState] = React__namespace.useState(null);
    const beforeOutsideRef = React__namespace.useRef(null);
    const afterOutsideRef = React__namespace.useRef(null);
    const beforeInsideRef = React__namespace.useRef(null);
    const afterInsideRef = React__namespace.useRef(null);
    const shouldRenderGuards = 
    // The FocusManager and therefore floating element are currently open/
    // rendered.
    !!focusManagerState &&
        // Guards are only for non-modal focus management.
        !focusManagerState.modal &&
        // Don't render if unmount is transitioning.
        focusManagerState.open && preserveTabOrder && !!(root || portalNode);
    // https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/TabbablePortal.tsx
    React__namespace.useEffect(() => {
        if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {
            return;
        }
        // Make sure elements inside the portal element are tabbable only when the
        // portal has already been focused, either by tabbing into a focus trap
        // element outside or using the mouse.
        function onFocus(event) {
            if (portalNode && isOutsideEvent(event)) {
                const focusing = event.type === 'focusin';
                const manageFocus = focusing ? enableFocusInside : disableFocusInside;
                manageFocus(portalNode);
            }
        }
        // Listen to the event on the capture phase so they run before the focus
        // trap elements onFocus prop is called.
        portalNode.addEventListener('focusin', onFocus, true);
        portalNode.addEventListener('focusout', onFocus, true);
        return () => {
            portalNode.removeEventListener('focusin', onFocus, true);
            portalNode.removeEventListener('focusout', onFocus, true);
        };
    }, [portalNode, preserveTabOrder, focusManagerState == null ? void 0 : focusManagerState.modal]);
    return /*#__PURE__*/ React__namespace.createElement(PortalContext.Provider, {
        value: React__namespace.useMemo(() => ({
            preserveTabOrder,
            beforeOutsideRef,
            afterOutsideRef,
            beforeInsideRef,
            afterInsideRef,
            portalNode,
            setFocusManagerState
        }), [preserveTabOrder, portalNode])
    }, shouldRenderGuards && portalNode && /*#__PURE__*/ React__namespace.createElement(FocusGuard, {
        "data-type": "outside",
        ref: beforeOutsideRef,
        onFocus: event => {
            if (isOutsideEvent(event, portalNode)) {
                var _beforeInsideRef$curr;
                (_beforeInsideRef$curr = beforeInsideRef.current) == null || _beforeInsideRef$curr.focus();
            }
            else {
                const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
                prevTabbable == null || prevTabbable.focus();
            }
        }
    }), shouldRenderGuards && portalNode && /*#__PURE__*/ React__namespace.createElement("span", {
        "aria-owns": portalNode.id,
        style: HIDDEN_STYLES
    }), portalNode && /*#__PURE__*/ ReactDOM.createPortal(children, portalNode), shouldRenderGuards && portalNode && /*#__PURE__*/ React__namespace.createElement(FocusGuard, {
        "data-type": "outside",
        ref: afterOutsideRef,
        onFocus: event => {
            if (isOutsideEvent(event, portalNode)) {
                var _afterInsideRef$curre;
                (_afterInsideRef$curre = afterInsideRef.current) == null || _afterInsideRef$curre.focus();
            }
            else {
                const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
                nextTabbable == null || nextTabbable.focus();
                (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent));
            }
        }
    }));
}
const usePortalContext = () => React__namespace.useContext(PortalContext);
const LIST_LIMIT = 20;
let previouslyFocusedElements = [];
function addPreviouslyFocusedElement(element) {
    previouslyFocusedElements = previouslyFocusedElements.filter(el => el.isConnected);
    if (element && getNodeName(element) !== 'body') {
        previouslyFocusedElements.push(element);
        if (previouslyFocusedElements.length > LIST_LIMIT) {
            previouslyFocusedElements = previouslyFocusedElements.slice(-LIST_LIMIT);
        }
    }
}
function getPreviouslyFocusedElement() {
    return previouslyFocusedElements.slice().reverse().find(el => el.isConnected);
}
const VisuallyHiddenDismiss = /*#__PURE__*/ React__namespace.forwardRef(function VisuallyHiddenDismiss(props, ref) {
    return /*#__PURE__*/ React__namespace.createElement("button", _extends({}, props, {
        type: "button",
        ref: ref,
        tabIndex: -1,
        style: HIDDEN_STYLES
    }));
});
/**
 * Provides focus management for the floating element.
 * @see https://floating-ui.com/docs/FloatingFocusManager
 */
function FloatingFocusManager(props) {
    const { context, children, disabled = false, order = ['content'], guards: _guards = true, initialFocus = 0, returnFocus = true, modal = true, visuallyHiddenDismiss = false, closeOnFocusOut = true } = props;
    const { open, refs, nodeId, onOpenChange, events, dataRef, elements: { domReference, floating } } = context;
    const ignoreInitialFocus = typeof initialFocus === 'number' && initialFocus < 0;
    // If the reference is a combobox and is typeable (e.g. input/textarea),
    // there are different focus semantics. The guards should not be rendered, but
    // aria-hidden should be applied to all nodes still. Further, the visually
    // hidden dismiss button should only appear at the end of the list, not the
    // start.
    const isUntrappedTypeableCombobox = isTypeableCombobox(domReference) && ignoreInitialFocus;
    // Force the guards to be rendered if the `inert` attribute is not supported.
    const guards = supportsInert() ? _guards : true;
    const orderRef = useLatestRef(order);
    const initialFocusRef = useLatestRef(initialFocus);
    const returnFocusRef = useLatestRef(returnFocus);
    const tree = useFloatingTree();
    const portalContext = usePortalContext();
    const startDismissButtonRef = React__namespace.useRef(null);
    const endDismissButtonRef = React__namespace.useRef(null);
    const preventReturnFocusRef = React__namespace.useRef(false);
    const isPointerDownRef = React__namespace.useRef(false);
    const isInsidePortal = portalContext != null;
    const getTabbableContent = React__namespace.useCallback(function (container) {
        if (container === void 0) {
            container = floating;
        }
        return container ? tabbable(container, getTabbableOptions()) : [];
    }, [floating]);
    const getTabbableElements = React__namespace.useCallback(container => {
        const content = getTabbableContent(container);
        return orderRef.current.map(type => {
            if (domReference && type === 'reference') {
                return domReference;
            }
            if (floating && type === 'floating') {
                return floating;
            }
            return content;
        }).filter(Boolean).flat();
    }, [domReference, floating, orderRef, getTabbableContent]);
    React__namespace.useEffect(() => {
        if (disabled || !modal)
            return;
        function onKeyDown(event) {
            if (event.key === 'Tab') {
                // The focus guards have nothing to focus, so we need to stop the event.
                if (contains(floating, activeElement(getDocument(floating))) && getTabbableContent().length === 0 && !isUntrappedTypeableCombobox) {
                    stopEvent(event);
                }
                const els = getTabbableElements();
                const target = getTarget(event);
                if (orderRef.current[0] === 'reference' && target === domReference) {
                    stopEvent(event);
                    if (event.shiftKey) {
                        enqueueFocus(els[els.length - 1]);
                    }
                    else {
                        enqueueFocus(els[1]);
                    }
                }
                if (orderRef.current[1] === 'floating' && target === floating && event.shiftKey) {
                    stopEvent(event);
                    enqueueFocus(els[0]);
                }
            }
        }
        const doc = getDocument(floating);
        doc.addEventListener('keydown', onKeyDown);
        return () => {
            doc.removeEventListener('keydown', onKeyDown);
        };
    }, [disabled, domReference, floating, modal, orderRef, refs, isUntrappedTypeableCombobox, getTabbableContent, getTabbableElements]);
    React__namespace.useEffect(() => {
        if (disabled || !closeOnFocusOut)
            return;
        // In Safari, buttons lose focus when pressing them.
        function handlePointerDown() {
            isPointerDownRef.current = true;
            setTimeout(() => {
                isPointerDownRef.current = false;
            });
        }
        function handleFocusOutside(event) {
            const relatedTarget = event.relatedTarget;
            queueMicrotask(() => {
                const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute(createAttribute('focus-guard')) || tree && (getChildren(tree.nodesRef.current, nodeId).find(node => {
                    var _node$context, _node$context2;
                    return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);
                }) || getAncestors(tree.nodesRef.current, nodeId).find(node => {
                    var _node$context3, _node$context4;
                    return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;
                })));
                // Focus did not move inside the floating tree, and there are no tabbable
                // portal guards to handle closing.
                if (relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current &&
                    // Fix React 18 Strict Mode returnFocus due to double rendering.
                    relatedTarget !== getPreviouslyFocusedElement()) {
                    preventReturnFocusRef.current = true;
                    onOpenChange(false, event);
                }
            });
        }
        if (floating && isHTMLElement(domReference)) {
            domReference.addEventListener('focusout', handleFocusOutside);
            domReference.addEventListener('pointerdown', handlePointerDown);
            !modal && floating.addEventListener('focusout', handleFocusOutside);
            return () => {
                domReference.removeEventListener('focusout', handleFocusOutside);
                domReference.removeEventListener('pointerdown', handlePointerDown);
                !modal && floating.removeEventListener('focusout', handleFocusOutside);
            };
        }
    }, [disabled, domReference, floating, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut]);
    React__namespace.useEffect(() => {
        var _portalContext$portal;
        if (disabled)
            return;
        // Don't hide portals nested within the parent portal.
        const portalNodes = Array.from((portalContext == null || (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll("[" + createAttribute('portal') + "]")) || []);
        if (floating) {
            const insideElements = [floating, ...portalNodes, startDismissButtonRef.current, endDismissButtonRef.current, orderRef.current.includes('reference') || isUntrappedTypeableCombobox ? domReference : null].filter(x => x != null);
            const cleanup = modal || isUntrappedTypeableCombobox ? markOthers(insideElements, guards, !guards) : markOthers(insideElements);
            return () => {
                cleanup();
            };
        }
    }, [disabled, domReference, floating, modal, orderRef, portalContext, isUntrappedTypeableCombobox, guards]);
    index(() => {
        if (disabled || !floating)
            return;
        const doc = getDocument(floating);
        const previouslyFocusedElement = activeElement(doc);
        // Wait for any layout effect state setters to execute to set `tabIndex`.
        queueMicrotask(() => {
            const focusableElements = getTabbableElements(floating);
            const initialFocusValue = initialFocusRef.current;
            const elToFocus = (typeof initialFocusValue === 'number' ? focusableElements[initialFocusValue] : initialFocusValue.current) || floating;
            const focusAlreadyInsideFloatingEl = contains(floating, previouslyFocusedElement);
            if (!ignoreInitialFocus && !focusAlreadyInsideFloatingEl && open) {
                enqueueFocus(elToFocus, {
                    preventScroll: elToFocus === floating
                });
            }
        });
    }, [disabled, open, floating, ignoreInitialFocus, getTabbableElements, initialFocusRef]);
    index(() => {
        if (disabled || !floating)
            return;
        let preventReturnFocusScroll = false;
        const doc = getDocument(floating);
        const previouslyFocusedElement = activeElement(doc);
        const contextData = dataRef.current;
        addPreviouslyFocusedElement(previouslyFocusedElement);
        // Dismissing via outside press should always ignore `returnFocus` to
        // prevent unwanted scrolling.
        function onOpenChange(_ref) {
            let { reason, event, nested } = _ref;
            if (reason === 'escape-key' && refs.domReference.current) {
                addPreviouslyFocusedElement(refs.domReference.current);
            }
            if (reason === 'hover' && event.type === 'mouseleave') {
                preventReturnFocusRef.current = true;
            }
            if (reason !== 'outside-press')
                return;
            if (nested) {
                preventReturnFocusRef.current = false;
                preventReturnFocusScroll = true;
            }
            else {
                preventReturnFocusRef.current = !(isVirtualClick(event) || isVirtualPointerEvent(event));
            }
        }
        events.on('openchange', onOpenChange);
        return () => {
            events.off('openchange', onOpenChange);
            const activeEl = activeElement(doc);
            const isFocusInsideFloatingTree = contains(floating, activeEl) || tree && getChildren(tree.nodesRef.current, nodeId).some(node => {
                var _node$context5;
                return contains((_node$context5 = node.context) == null ? void 0 : _node$context5.elements.floating, activeEl);
            });
            const shouldFocusReference = isFocusInsideFloatingTree || contextData.openEvent && ['click', 'mousedown'].includes(contextData.openEvent.type);
            if (shouldFocusReference && refs.domReference.current) {
                addPreviouslyFocusedElement(refs.domReference.current);
            }
            const returnElement = getPreviouslyFocusedElement();
            if (
            // eslint-disable-next-line react-hooks/exhaustive-deps
            returnFocusRef.current && !preventReturnFocusRef.current && isHTMLElement(returnElement) && (
            // If the focus moved somewhere else after mount, avoid returning focus
            // since it likely entered a different element which should be
            // respected: https://github.com/floating-ui/floating-ui/issues/2607
            returnElement !== activeEl && activeEl !== doc.body ? isFocusInsideFloatingTree : true)) {
                enqueueFocus(returnElement, {
                    // When dismissing nested floating elements, by the time the rAF has
                    // executed, the menus will all have been unmounted. When they try
                    // to get focused, the calls get ignored — leaving the root
                    // reference focused as desired.
                    cancelPrevious: false,
                    preventScroll: preventReturnFocusScroll
                });
            }
        };
    }, [disabled, floating, returnFocusRef, dataRef, refs, events, tree, nodeId]);
    // Synchronize the `context` & `modal` value to the FloatingPortal context.
    // It will decide whether or not it needs to render its own guards.
    index(() => {
        if (disabled || !portalContext)
            return;
        portalContext.setFocusManagerState({
            modal,
            closeOnFocusOut,
            open,
            onOpenChange,
            refs
        });
        return () => {
            portalContext.setFocusManagerState(null);
        };
    }, [disabled, portalContext, modal, open, onOpenChange, refs, closeOnFocusOut]);
    index(() => {
        if (disabled || !floating || typeof MutationObserver !== 'function' || ignoreInitialFocus) {
            return;
        }
        const handleMutation = () => {
            const tabIndex = floating.getAttribute('tabindex');
            if (orderRef.current.includes('floating') || activeElement(getDocument(floating)) !== refs.domReference.current && getTabbableContent().length === 0) {
                if (tabIndex !== '0') {
                    floating.setAttribute('tabindex', '0');
                }
            }
            else if (tabIndex !== '-1') {
                floating.setAttribute('tabindex', '-1');
            }
        };
        handleMutation();
        const observer = new MutationObserver(handleMutation);
        observer.observe(floating, {
            childList: true,
            subtree: true,
            attributes: true
        });
        return () => {
            observer.disconnect();
        };
    }, [disabled, floating, refs, orderRef, getTabbableContent, ignoreInitialFocus]);
    function renderDismissButton(location) {
        if (disabled || !visuallyHiddenDismiss || !modal) {
            return null;
        }
        return /*#__PURE__*/ React__namespace.createElement(VisuallyHiddenDismiss, {
            ref: location === 'start' ? startDismissButtonRef : endDismissButtonRef,
            onClick: event => onOpenChange(false, event.nativeEvent)
        }, typeof visuallyHiddenDismiss === 'string' ? visuallyHiddenDismiss : 'Dismiss');
    }
    const shouldRenderGuards = !disabled && guards && (isInsidePortal || modal);
    return /*#__PURE__*/ React__namespace.createElement(React__namespace.Fragment, null, shouldRenderGuards && /*#__PURE__*/ React__namespace.createElement(FocusGuard, {
        "data-type": "inside",
        ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,
        onFocus: event => {
            if (modal) {
                const els = getTabbableElements();
                enqueueFocus(order[0] === 'reference' ? els[0] : els[els.length - 1]);
            }
            else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
                preventReturnFocusRef.current = false;
                if (isOutsideEvent(event, portalContext.portalNode)) {
                    const nextTabbable = getNextTabbable() || domReference;
                    nextTabbable == null || nextTabbable.focus();
                }
                else {
                    var _portalContext$before;
                    (_portalContext$before = portalContext.beforeOutsideRef.current) == null || _portalContext$before.focus();
                }
            }
        }
    }), !isUntrappedTypeableCombobox && renderDismissButton('start'), children, renderDismissButton('end'), shouldRenderGuards && /*#__PURE__*/ React__namespace.createElement(FocusGuard, {
        "data-type": "inside",
        ref: portalContext == null ? void 0 : portalContext.afterInsideRef,
        onFocus: event => {
            if (modal) {
                enqueueFocus(getTabbableElements()[0]);
            }
            else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
                if (closeOnFocusOut) {
                    preventReturnFocusRef.current = true;
                }
                if (isOutsideEvent(event, portalContext.portalNode)) {
                    const prevTabbable = getPreviousTabbable() || domReference;
                    prevTabbable == null || prevTabbable.focus();
                }
                else {
                    var _portalContext$afterO;
                    (_portalContext$afterO = portalContext.afterOutsideRef.current) == null || _portalContext$afterO.focus();
                }
            }
        }
    }));
}
function isButtonTarget(event) {
    return isHTMLElement(event.target) && event.target.tagName === 'BUTTON';
}
function isSpaceIgnored(element) {
    return isTypeableElement(element);
}
/**
 * Opens or closes the floating element when clicking the reference element.
 * @see https://floating-ui.com/docs/useClick
 */
function useClick(context, props) {
    if (props === void 0) {
        props = {};
    }
    const { open, onOpenChange, dataRef, elements: { domReference } } = context;
    const { enabled = true, event: eventOption = 'click', toggle = true, ignoreMouse = false, keyboardHandlers = true } = props;
    const pointerTypeRef = React__namespace.useRef();
    const didKeyDownRef = React__namespace.useRef(false);
    return React__namespace.useMemo(() => {
        if (!enabled)
            return {};
        return {
            reference: {
                onPointerDown(event) {
                    pointerTypeRef.current = event.pointerType;
                },
                onMouseDown(event) {
                    // Ignore all buttons except for the "main" button.
                    // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
                    if (event.button !== 0) {
                        return;
                    }
                    if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
                        return;
                    }
                    if (eventOption === 'click') {
                        return;
                    }
                    if (open && toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'mousedown' : true)) {
                        onOpenChange(false, event.nativeEvent, 'click');
                    }
                    else {
                        // Prevent stealing focus from the floating element
                        event.preventDefault();
                        onOpenChange(true, event.nativeEvent, 'click');
                    }
                },
                onClick(event) {
                    if (eventOption === 'mousedown' && pointerTypeRef.current) {
                        pointerTypeRef.current = undefined;
                        return;
                    }
                    if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
                        return;
                    }
                    if (open && toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'click' : true)) {
                        onOpenChange(false, event.nativeEvent, 'click');
                    }
                    else {
                        onOpenChange(true, event.nativeEvent, 'click');
                    }
                },
                onKeyDown(event) {
                    pointerTypeRef.current = undefined;
                    if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {
                        return;
                    }
                    if (event.key === ' ' && !isSpaceIgnored(domReference)) {
                        // Prevent scrolling
                        event.preventDefault();
                        didKeyDownRef.current = true;
                    }
                    if (event.key === 'Enter') {
                        if (open && toggle) {
                            onOpenChange(false, event.nativeEvent, 'click');
                        }
                        else {
                            onOpenChange(true, event.nativeEvent, 'click');
                        }
                    }
                },
                onKeyUp(event) {
                    if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {
                        return;
                    }
                    if (event.key === ' ' && didKeyDownRef.current) {
                        didKeyDownRef.current = false;
                        if (open && toggle) {
                            onOpenChange(false, event.nativeEvent, 'click');
                        }
                        else {
                            onOpenChange(true, event.nativeEvent, 'click');
                        }
                    }
                }
            }
        };
    }, [enabled, dataRef, eventOption, ignoreMouse, keyboardHandlers, domReference, toggle, open, onOpenChange]);
}
const bubbleHandlerKeys = {
    pointerdown: 'onPointerDown',
    mousedown: 'onMouseDown',
    click: 'onClick'
};
const captureHandlerKeys = {
    pointerdown: 'onPointerDownCapture',
    mousedown: 'onMouseDownCapture',
    click: 'onClickCapture'
};
const normalizeProp = normalizable => {
    var _normalizable$escapeK, _normalizable$outside;
    return {
        escapeKey: typeof normalizable === 'boolean' ? normalizable : (_normalizable$escapeK = normalizable == null ? void 0 : normalizable.escapeKey) != null ? _normalizable$escapeK : false,
        outsidePress: typeof normalizable === 'boolean' ? normalizable : (_normalizable$outside = normalizable == null ? void 0 : normalizable.outsidePress) != null ? _normalizable$outside : true
    };
};
/**
 * Closes the floating element when a dismissal is requested — by default, when
 * the user presses the `escape` key or outside of the floating element.
 * @see https://floating-ui.com/docs/useDismiss
 */
function useDismiss(context, props) {
    if (props === void 0) {
        props = {};
    }
    const { open, onOpenChange, nodeId, elements: { reference, domReference, floating }, dataRef } = context;
    const { enabled = true, escapeKey = true, outsidePress: unstable_outsidePress = true, outsidePressEvent = 'pointerdown', referencePress = false, referencePressEvent = 'pointerdown', ancestorScroll = false, bubbles, capture } = props;
    const tree = useFloatingTree();
    const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === 'function' ? unstable_outsidePress : () => false);
    const outsidePress = typeof unstable_outsidePress === 'function' ? outsidePressFn : unstable_outsidePress;
    const insideReactTreeRef = React__namespace.useRef(false);
    const endedOrStartedInsideRef = React__namespace.useRef(false);
    const { escapeKey: escapeKeyBubbles, outsidePress: outsidePressBubbles } = normalizeProp(bubbles);
    const { escapeKey: escapeKeyCapture, outsidePress: outsidePressCapture } = normalizeProp(capture);
    const closeOnEscapeKeyDown = useEffectEvent(event => {
        if (!open || !enabled || !escapeKey || event.key !== 'Escape') {
            return;
        }
        const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
        if (!escapeKeyBubbles) {
            event.stopPropagation();
            if (children.length > 0) {
                let shouldDismiss = true;
                children.forEach(child => {
                    var _child$context;
                    if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
                        shouldDismiss = false;
                        return;
                    }
                });
                if (!shouldDismiss) {
                    return;
                }
            }
        }
        onOpenChange(false, isReactEvent(event) ? event.nativeEvent : event, 'escape-key');
    });
    const closeOnEscapeKeyDownCapture = useEffectEvent(event => {
        var _getTarget2;
        const callback = () => {
            var _getTarget;
            closeOnEscapeKeyDown(event);
            (_getTarget = getTarget(event)) == null || _getTarget.removeEventListener('keydown', callback);
        };
        (_getTarget2 = getTarget(event)) == null || _getTarget2.addEventListener('keydown', callback);
    });
    const closeOnPressOutside = useEffectEvent(event => {
        // Given developers can stop the propagation of the synthetic event,
        // we can only be confident with a positive value.
        const insideReactTree = insideReactTreeRef.current;
        insideReactTreeRef.current = false;
        // When click outside is lazy (`click` event), handle dragging.
        // Don't close if:
        // - The click started inside the floating element.
        // - The click ended inside the floating element.
        const endedOrStartedInside = endedOrStartedInsideRef.current;
        endedOrStartedInsideRef.current = false;
        if (outsidePressEvent === 'click' && endedOrStartedInside) {
            return;
        }
        if (insideReactTree) {
            return;
        }
        if (typeof outsidePress === 'function' && !outsidePress(event)) {
            return;
        }
        const target = getTarget(event);
        const inertSelector = "[" + createAttribute('inert') + "]";
        const markers = getDocument(floating).querySelectorAll(inertSelector);
        let targetRootAncestor = isElement(target) ? target : null;
        while (targetRootAncestor && !isLastTraversableNode(targetRootAncestor)) {
            const nextParent = getParentNode(targetRootAncestor);
            if (isLastTraversableNode(nextParent) || !isElement(nextParent)) {
                break;
            }
            else {
                targetRootAncestor = nextParent;
            }
        }
        // Check if the click occurred on a third-party element injected after the
        // floating element rendered.
        if (markers.length && isElement(target) && !isRootElement(target) &&
            // Clicked on a direct ancestor (e.g. FloatingOverlay).
            !contains(target, floating) &&
            // If the target root element contains none of the markers, then the
            // element was injected after the floating element rendered.
            Array.from(markers).every(marker => !contains(targetRootAncestor, marker))) {
            return;
        }
        // Check if the click occurred on the scrollbar
        if (isHTMLElement(target) && floating) {
            // In Firefox, `target.scrollWidth > target.clientWidth` for inline
            // elements.
            const canScrollX = target.clientWidth > 0 && target.scrollWidth > target.clientWidth;
            const canScrollY = target.clientHeight > 0 && target.scrollHeight > target.clientHeight;
            let xCond = canScrollY && event.offsetX > target.clientWidth;
            // In some browsers it is possible to change the <body> (or window)
            // scrollbar to the left side, but is very rare and is difficult to
            // check for. Plus, for modal dialogs with backdrops, it is more
            // important that the backdrop is checked but not so much the window.
            if (canScrollY) {
                const isRTL = getComputedStyle$1(target).direction === 'rtl';
                if (isRTL) {
                    xCond = event.offsetX <= target.offsetWidth - target.clientWidth;
                }
            }
            if (xCond || canScrollX && event.offsetY > target.clientHeight) {
                return;
            }
        }
        const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some(node => {
            var _node$context;
            return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);
        });
        if (isEventTargetWithin(event, floating) || isEventTargetWithin(event, domReference) || targetIsInsideChildren) {
            return;
        }
        const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
        if (children.length > 0) {
            let shouldDismiss = true;
            children.forEach(child => {
                var _child$context2;
                if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
                    shouldDismiss = false;
                    return;
                }
            });
            if (!shouldDismiss) {
                return;
            }
        }
        onOpenChange(false, event, 'outside-press');
    });
    const closeOnPressOutsideCapture = useEffectEvent(event => {
        var _getTarget4;
        const callback = () => {
            var _getTarget3;
            closeOnPressOutside(event);
            (_getTarget3 = getTarget(event)) == null || _getTarget3.removeEventListener(outsidePressEvent, callback);
        };
        (_getTarget4 = getTarget(event)) == null || _getTarget4.addEventListener(outsidePressEvent, callback);
    });
    React__namespace.useEffect(() => {
        if (!open || !enabled) {
            return;
        }
        dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
        dataRef.current.__outsidePressBubbles = outsidePressBubbles;
        function onScroll(event) {
            onOpenChange(false, event, 'ancestor-scroll');
        }
        const doc = getDocument(floating);
        escapeKey && doc.addEventListener('keydown', escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
        outsidePress && doc.addEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
        let ancestors = [];
        if (ancestorScroll) {
            if (isElement(domReference)) {
                ancestors = getOverflowAncestors(domReference);
            }
            if (isElement(floating)) {
                ancestors = ancestors.concat(getOverflowAncestors(floating));
            }
            if (!isElement(reference) && reference && reference.contextElement) {
                ancestors = ancestors.concat(getOverflowAncestors(reference.contextElement));
            }
        }
        // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)
        ancestors = ancestors.filter(ancestor => {
            var _doc$defaultView;
            return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);
        });
        ancestors.forEach(ancestor => {
            ancestor.addEventListener('scroll', onScroll, {
                passive: true
            });
        });
        return () => {
            escapeKey && doc.removeEventListener('keydown', escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
            outsidePress && doc.removeEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
            ancestors.forEach(ancestor => {
                ancestor.removeEventListener('scroll', onScroll);
            });
        };
    }, [dataRef, floating, domReference, reference, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, escapeKeyCapture, closeOnEscapeKeyDownCapture, closeOnPressOutside, outsidePressCapture, closeOnPressOutsideCapture]);
    React__namespace.useEffect(() => {
        insideReactTreeRef.current = false;
    }, [outsidePress, outsidePressEvent]);
    return React__namespace.useMemo(() => {
        if (!enabled) {
            return {};
        }
        return {
            reference: {
                onKeyDown: closeOnEscapeKeyDown,
                [bubbleHandlerKeys[referencePressEvent]]: event => {
                    if (referencePress) {
                        onOpenChange(false, event.nativeEvent, 'reference-press');
                    }
                }
            },
            floating: {
                onKeyDown: closeOnEscapeKeyDown,
                onMouseDown() {
                    endedOrStartedInsideRef.current = true;
                },
                onMouseUp() {
                    endedOrStartedInsideRef.current = true;
                },
                [captureHandlerKeys[outsidePressEvent]]: () => {
                    insideReactTreeRef.current = true;
                }
            }
        };
    }, [enabled, referencePress, outsidePressEvent, referencePressEvent, onOpenChange, closeOnEscapeKeyDown]);
}
let devMessageSet;
if (process.env.NODE_ENV !== "production") {
    devMessageSet = /*#__PURE__*/ new Set();
}
/**
 * Provides data to position a floating element and context to add interactions.
 * @see https://floating-ui.com/docs/useFloating
 */
function useFloating(options) {
    var _options$elements2;
    if (options === void 0) {
        options = {};
    }
    const { open = false, onOpenChange: unstable_onOpenChange, nodeId } = options;
    if (process.env.NODE_ENV !== "production") {
        var _options$elements;
        const err = 'Floating UI: Cannot pass a virtual element to the ' + '`elements.reference` option, as it must be a real DOM element. ' + 'Use `refs.setPositionReference` instead.';
        if ((_options$elements = options.elements) != null && _options$elements.reference && !isElement(options.elements.reference)) {
            var _devMessageSet;
            if (!((_devMessageSet = devMessageSet) != null && _devMessageSet.has(err))) {
                var _devMessageSet2;
                (_devMessageSet2 = devMessageSet) == null || _devMessageSet2.add(err);
                console.error(err);
            }
        }
    }
    const [_domReference, setDomReference] = React__namespace.useState(null);
    const domReference = ((_options$elements2 = options.elements) == null ? void 0 : _options$elements2.reference) || _domReference;
    const position = useFloating$1(options);
    const tree = useFloatingTree();
    const nested = useFloatingParentNodeId() != null;
    const onOpenChange = useEffectEvent((open, event, reason) => {
        if (open) {
            dataRef.current.openEvent = event;
        }
        events.emit('openchange', {
            open,
            event,
            reason,
            nested
        });
        unstable_onOpenChange == null || unstable_onOpenChange(open, event, reason);
    });
    const domReferenceRef = React__namespace.useRef(null);
    const dataRef = React__namespace.useRef({});
    const events = React__namespace.useState(() => createPubSub())[0];
    const floatingId = useId$1();
    const setPositionReference = React__namespace.useCallback(node => {
        const positionReference = isElement(node) ? {
            getBoundingClientRect: () => node.getBoundingClientRect(),
            contextElement: node
        } : node;
        position.refs.setReference(positionReference);
    }, [position.refs]);
    const setReference = React__namespace.useCallback(node => {
        if (isElement(node) || node === null) {
            domReferenceRef.current = node;
            setDomReference(node);
        }
        // Backwards-compatibility for passing a virtual element to `reference`
        // after it has set the DOM reference.
        if (isElement(position.refs.reference.current) || position.refs.reference.current === null ||
            // Don't allow setting virtual elements using the old technique back to
            // `null` to support `positionReference` + an unstable `reference`
            // callback ref.
            node !== null && !isElement(node)) {
            position.refs.setReference(node);
        }
    }, [position.refs]);
    const refs = React__namespace.useMemo(() => (Object.assign(Object.assign({}, position.refs), { setReference,
        setPositionReference, domReference: domReferenceRef })), [position.refs, setReference, setPositionReference]);
    const elements = React__namespace.useMemo(() => (Object.assign(Object.assign({}, position.elements), { domReference: domReference })), [position.elements, domReference]);
    const context = React__namespace.useMemo(() => (Object.assign(Object.assign({}, position), { refs,
        elements,
        dataRef,
        nodeId,
        floatingId,
        events,
        open,
        onOpenChange })), [position, nodeId, floatingId, events, open, onOpenChange, refs, elements]);
    index(() => {
        const node = tree == null ? void 0 : tree.nodesRef.current.find(node => node.id === nodeId);
        if (node) {
            node.context = context;
        }
    });
    return React__namespace.useMemo(() => (Object.assign(Object.assign({}, position), { context,
        refs,
        elements })), [position, refs, elements, context]);
}
/**
 * Opens the floating element while the reference element has focus, like CSS
 * `:focus`.
 * @see https://floating-ui.com/docs/useFocus
 */
function useFocus(context, props) {
    if (props === void 0) {
        props = {};
    }
    const { open, onOpenChange, events, refs, elements: { floating, domReference } } = context;
    const { enabled = true, visibleOnly = true } = props;
    const blockFocusRef = React__namespace.useRef(false);
    const timeoutRef = React__namespace.useRef();
    const keyboardModalityRef = React__namespace.useRef(true);
    React__namespace.useEffect(() => {
        if (!enabled) {
            return;
        }
        const win = getWindow(domReference);
        // If the reference was focused and the user left the tab/window, and the
        // floating element was not open, the focus should be blocked when they
        // return to the tab/window.
        function onBlur() {
            if (!open && isHTMLElement(domReference) && domReference === activeElement(getDocument(domReference))) {
                blockFocusRef.current = true;
            }
        }
        function onKeyDown() {
            keyboardModalityRef.current = true;
        }
        win.addEventListener('blur', onBlur);
        win.addEventListener('keydown', onKeyDown, true);
        return () => {
            win.removeEventListener('blur', onBlur);
            win.removeEventListener('keydown', onKeyDown, true);
        };
    }, [floating, domReference, open, enabled]);
    React__namespace.useEffect(() => {
        if (!enabled) {
            return;
        }
        function onOpenChange(_ref) {
            let { reason } = _ref;
            if (reason === 'reference-press' || reason === 'escape-key') {
                blockFocusRef.current = true;
            }
        }
        events.on('openchange', onOpenChange);
        return () => {
            events.off('openchange', onOpenChange);
        };
    }, [events, enabled]);
    React__namespace.useEffect(() => {
        return () => {
            clearTimeout(timeoutRef.current);
        };
    }, []);
    return React__namespace.useMemo(() => {
        if (!enabled) {
            return {};
        }
        return {
            reference: {
                onPointerDown(event) {
                    if (isVirtualPointerEvent(event.nativeEvent))
                        return;
                    keyboardModalityRef.current = false;
                },
                onMouseLeave() {
                    blockFocusRef.current = false;
                },
                onFocus(event) {
                    if (blockFocusRef.current)
                        return;
                    const target = getTarget(event.nativeEvent);
                    if (visibleOnly && isElement(target)) {
                        try {
                            // Mac Safari unreliably matches `:focus-visible` on the reference
                            // if focus was outside the page initially - use the fallback
                            // instead.
                            if (isSafari() && isMac())
                                throw Error();
                            if (!target.matches(':focus-visible'))
                                return;
                        }
                        catch (e) {
                            // Old browsers will throw an error when using `:focus-visible`.
                            if (!keyboardModalityRef.current && !isTypeableElement(target)) {
                                return;
                            }
                        }
                    }
                    onOpenChange(true, event.nativeEvent, 'focus');
                },
                onBlur(event) {
                    blockFocusRef.current = false;
                    const relatedTarget = event.relatedTarget;
                    // Hit the non-modal focus management portal guard. Focus will be
                    // moved into the floating element immediately after.
                    const movedToFocusGuard = isElement(relatedTarget) && relatedTarget.hasAttribute(createAttribute('focus-guard')) && relatedTarget.getAttribute('data-type') === 'outside';
                    // Wait for the window blur listener to fire.
                    timeoutRef.current = window.setTimeout(() => {
                        const activeEl = activeElement(domReference ? domReference.ownerDocument : document);
                        // Focus left the page, keep it open.
                        if (!relatedTarget && activeEl === domReference)
                            return;
                        // When focusing the reference element (e.g. regular click), then
                        // clicking into the floating element, prevent it from hiding.
                        // Note: it must be focusable, e.g. `tabindex="-1"`.
                        if (contains(refs.floating.current, relatedTarget) || contains(domReference, relatedTarget) || movedToFocusGuard) {
                            return;
                        }
                        onOpenChange(false, event.nativeEvent, 'focus');
                    });
                }
            }
        };
    }, [enabled, visibleOnly, domReference, refs, onOpenChange]);
}
const ACTIVE_KEY = 'active';
const SELECTED_KEY = 'selected';
function mergeProps(userProps, propsList, elementKey) {
    const map = new Map();
    const isItem = elementKey === 'item';
    let domUserProps = userProps;
    if (isItem && userProps) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const _a = userProps, _b = ACTIVE_KEY; _a[_b]; const _c = SELECTED_KEY; _a[_c]; const validProps = __rest$1(_a, [_b + "", _c + ""]);
        domUserProps = validProps;
    }
    return Object.assign(Object.assign(Object.assign({}, (elementKey === 'floating' && {
        tabIndex: -1
    })), domUserProps), propsList.map(value => {
        const propsOrGetProps = value ? value[elementKey] : null;
        if (typeof propsOrGetProps === 'function') {
            return userProps ? propsOrGetProps(userProps) : null;
        }
        return propsOrGetProps;
    }).concat(userProps).reduce((acc, props) => {
        if (!props) {
            return acc;
        }
        Object.entries(props).forEach(_ref => {
            let [key, value] = _ref;
            if (isItem && [ACTIVE_KEY, SELECTED_KEY].includes(key)) {
                return;
            }
            if (key.indexOf('on') === 0) {
                if (!map.has(key)) {
                    map.set(key, []);
                }
                if (typeof value === 'function') {
                    var _map$get;
                    (_map$get = map.get(key)) == null || _map$get.push(value);
                    acc[key] = function () {
                        var _map$get2;
                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }
                        return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map(fn => fn(...args)).find(val => val !== undefined);
                    };
                }
            }
            else {
                acc[key] = value;
            }
        });
        return acc;
    }, {}));
}
/**
 * Merges an array of interaction hooks' props into prop getters, allowing
 * event handler functions to be composed together without overwriting one
 * another.
 * @see https://floating-ui.com/docs/useInteractions
 */
function useInteractions(propsList) {
    if (propsList === void 0) {
        propsList = [];
    }
    // The dependencies are a dynamic array, so we can't use the linter's
    // suggestion to add it to the deps array.
    const deps = propsList;
    const getReferenceProps = React__namespace.useCallback(userProps => mergeProps(userProps, propsList, 'reference'), 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps);
    const getFloatingProps = React__namespace.useCallback(userProps => mergeProps(userProps, propsList, 'floating'), 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps);
    const getItemProps = React__namespace.useCallback(userProps => mergeProps(userProps, propsList, 'item'), 
    // Granularly check for `item` changes, because the `getItemProps` getter
    // should be as referentially stable as possible since it may be passed as
    // a prop to many components. All `item` key values must therefore be
    // memoized.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    propsList.map(key => key == null ? void 0 : key.item));
    return React__namespace.useMemo(() => ({
        getReferenceProps,
        getFloatingProps,
        getItemProps
    }), [getReferenceProps, getFloatingProps, getItemProps]);
}
let isPreventScrollSupported = false;
function doSwitch(orientation, vertical, horizontal) {
    switch (orientation) {
        case 'vertical':
            return vertical;
        case 'horizontal':
            return horizontal;
        default:
            return vertical || horizontal;
    }
}
function isMainOrientationKey(key, orientation) {
    const vertical = key === ARROW_UP || key === ARROW_DOWN;
    const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;
    return doSwitch(orientation, vertical, horizontal);
}
function isMainOrientationToEndKey(key, orientation, rtl) {
    const vertical = key === ARROW_DOWN;
    const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
    return doSwitch(orientation, vertical, horizontal) || key === 'Enter' || key == ' ' || key === '';
}
function isCrossOrientationOpenKey(key, orientation, rtl) {
    const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
    const horizontal = key === ARROW_DOWN;
    return doSwitch(orientation, vertical, horizontal);
}
function isCrossOrientationCloseKey(key, orientation, rtl) {
    const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;
    const horizontal = key === ARROW_UP;
    return doSwitch(orientation, vertical, horizontal);
}
/**
 * Adds arrow key-based navigation of a list of items, either using real DOM
 * focus or virtual focus.
 * @see https://floating-ui.com/docs/useListNavigation
 */
function useListNavigation(context, props) {
    const { open, onOpenChange, refs, elements: { domReference, floating } } = context;
    const { listRef, activeIndex, onNavigate: unstable_onNavigate = () => { }, enabled = true, selectedIndex = null, allowEscape = false, loop = false, nested = false, rtl = false, virtual = false, focusItemOnOpen = 'auto', focusItemOnHover = true, openOnArrowKeyDown = true, disabledIndices = undefined, orientation = 'vertical', cols = 1, scrollItemIntoView = true, virtualItemRef } = props;
    if (process.env.NODE_ENV !== "production") {
        if (allowEscape) {
            if (!loop) {
                console.warn(['Floating UI: `useListNavigation` looping must be enabled to allow', 'escaping.'].join(' '));
            }
            if (!virtual) {
                console.warn(['Floating UI: `useListNavigation` must be virtual to allow', 'escaping.'].join(' '));
            }
        }
        if (orientation === 'vertical' && cols > 1) {
            console.warn(['Floating UI: In grid list navigation mode (`cols` > 1), the', '`orientation` should be either "horizontal" or "both".'].join(' '));
        }
    }
    const parentId = useFloatingParentNodeId();
    const tree = useFloatingTree();
    const onNavigate = useEffectEvent(unstable_onNavigate);
    const focusItemOnOpenRef = React__namespace.useRef(focusItemOnOpen);
    const indexRef = React__namespace.useRef(selectedIndex != null ? selectedIndex : -1);
    const keyRef = React__namespace.useRef(null);
    const isPointerModalityRef = React__namespace.useRef(true);
    const previousOnNavigateRef = React__namespace.useRef(onNavigate);
    const previousMountedRef = React__namespace.useRef(!!floating);
    const forceSyncFocus = React__namespace.useRef(false);
    const forceScrollIntoViewRef = React__namespace.useRef(false);
    const disabledIndicesRef = useLatestRef(disabledIndices);
    const latestOpenRef = useLatestRef(open);
    const scrollItemIntoViewRef = useLatestRef(scrollItemIntoView);
    const [activeId, setActiveId] = React__namespace.useState();
    const [virtualId, setVirtualId] = React__namespace.useState();
    const focusItem = useEffectEvent(function (listRef, indexRef, forceScrollIntoView) {
        if (forceScrollIntoView === void 0) {
            forceScrollIntoView = false;
        }
        const item = listRef.current[indexRef.current];
        if (!item)
            return;
        if (virtual) {
            setActiveId(item.id);
            tree == null || tree.events.emit('virtualfocus', item);
            if (virtualItemRef) {
                virtualItemRef.current = item;
            }
        }
        else {
            enqueueFocus(item, {
                preventScroll: true,
                // Mac Safari does not move the virtual cursor unless the focus call
                // is sync. However, for the very first focus call, we need to wait
                // for the position to be ready in order to prevent unwanted
                // scrolling. This means the virtual cursor will not move to the first
                // item when first opening the floating element, but will on
                // subsequent calls. `preventScroll` is supported in modern Safari,
                // so we can use that instead.
                // iOS Safari must be async or the first item will not be focused.
                sync: isMac() && isSafari() ? isPreventScrollSupported || forceSyncFocus.current : false
            });
        }
        requestAnimationFrame(() => {
            const scrollIntoViewOptions = scrollItemIntoViewRef.current;
            const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);
            if (shouldScrollIntoView) {
                // JSDOM doesn't support `.scrollIntoView()` but it's widely supported
                // by all browsers.
                item.scrollIntoView == null || item.scrollIntoView(typeof scrollIntoViewOptions === 'boolean' ? {
                    block: 'nearest',
                    inline: 'nearest'
                } : scrollIntoViewOptions);
            }
        });
    });
    index(() => {
        document.createElement('div').focus({
            get preventScroll() {
                isPreventScrollSupported = true;
                return false;
            }
        });
    }, []);
    // Sync `selectedIndex` to be the `activeIndex` upon opening the floating
    // element. Also, reset `activeIndex` upon closing the floating element.
    index(() => {
        if (!enabled) {
            return;
        }
        if (open && floating) {
            if (focusItemOnOpenRef.current && selectedIndex != null) {
                // Regardless of the pointer modality, we want to ensure the selected
                // item comes into view when the floating element is opened.
                forceScrollIntoViewRef.current = true;
                onNavigate(selectedIndex);
            }
        }
        else if (previousMountedRef.current) {
            // Since the user can specify `onNavigate` conditionally
            // (onNavigate: open ? setActiveIndex : setSelectedIndex),
            // we store and call the previous function.
            indexRef.current = -1;
            previousOnNavigateRef.current(null);
        }
    }, [enabled, open, floating, selectedIndex, onNavigate]);
    // Sync `activeIndex` to be the focused item while the floating element is
    // open.
    index(() => {
        if (!enabled) {
            return;
        }
        if (open && floating) {
            if (activeIndex == null) {
                forceSyncFocus.current = false;
                if (selectedIndex != null) {
                    return;
                }
                // Reset while the floating element was open (e.g. the list changed).
                if (previousMountedRef.current) {
                    indexRef.current = -1;
                    focusItem(listRef, indexRef);
                }
                // Initial sync.
                if (!previousMountedRef.current && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {
                    let runs = 0;
                    const waitForListPopulated = () => {
                        if (listRef.current[0] == null) {
                            // Avoid letting the browser paint if possible on the first try,
                            // otherwise use rAF. Don't try more than twice, since something
                            // is wrong otherwise.
                            if (runs < 2) {
                                const scheduler = runs ? requestAnimationFrame : queueMicrotask;
                                scheduler(waitForListPopulated);
                            }
                            runs++;
                        }
                        else {
                            indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);
                            keyRef.current = null;
                            onNavigate(indexRef.current);
                        }
                    };
                    waitForListPopulated();
                }
            }
            else if (!isIndexOutOfBounds(listRef, activeIndex)) {
                indexRef.current = activeIndex;
                focusItem(listRef, indexRef, forceScrollIntoViewRef.current);
                forceScrollIntoViewRef.current = false;
            }
        }
    }, [enabled, open, floating, activeIndex, selectedIndex, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);
    // Ensure the parent floating element has focus when a nested child closes
    // to allow arrow key navigation to work after the pointer leaves the child.
    index(() => {
        var _nodes$find;
        if (!enabled || floating || !tree || virtual || !previousMountedRef.current) {
            return;
        }
        const nodes = tree.nodesRef.current;
        const parent = (_nodes$find = nodes.find(node => node.id === parentId)) == null || (_nodes$find = _nodes$find.context) == null ? void 0 : _nodes$find.elements.floating;
        const activeEl = activeElement(getDocument(floating));
        const treeContainsActiveEl = nodes.some(node => node.context && contains(node.context.elements.floating, activeEl));
        if (parent && !treeContainsActiveEl && isPointerModalityRef.current) {
            parent.focus({
                preventScroll: true
            });
        }
    }, [enabled, floating, tree, parentId, virtual]);
    index(() => {
        if (!enabled || !tree || !virtual || parentId)
            return;
        function handleVirtualFocus(item) {
            setVirtualId(item.id);
            if (virtualItemRef) {
                virtualItemRef.current = item;
            }
        }
        tree.events.on('virtualfocus', handleVirtualFocus);
        return () => {
            tree.events.off('virtualfocus', handleVirtualFocus);
        };
    }, [enabled, tree, virtual, parentId, virtualItemRef]);
    index(() => {
        previousOnNavigateRef.current = onNavigate;
        previousMountedRef.current = !!floating;
    });
    index(() => {
        if (!open) {
            keyRef.current = null;
        }
    }, [open]);
    const hasActiveIndex = activeIndex != null;
    const item = React__namespace.useMemo(() => {
        function syncCurrentTarget(currentTarget) {
            if (!open)
                return;
            const index = listRef.current.indexOf(currentTarget);
            if (index !== -1) {
                onNavigate(index);
            }
        }
        const props = Object.assign({ onFocus(_ref) {
                let { currentTarget } = _ref;
                syncCurrentTarget(currentTarget);
            }, onClick: _ref2 => {
                let { currentTarget } = _ref2;
                return currentTarget.focus({
                    preventScroll: true
                });
            } }, (focusItemOnHover && {
            onMouseMove(_ref3) {
                let { currentTarget } = _ref3;
                syncCurrentTarget(currentTarget);
            },
            onPointerLeave(_ref4) {
                let { pointerType } = _ref4;
                if (!isPointerModalityRef.current || pointerType === 'touch') {
                    return;
                }
                indexRef.current = -1;
                focusItem(listRef, indexRef);
                onNavigate(null);
                if (!virtual) {
                    enqueueFocus(refs.floating.current, {
                        preventScroll: true
                    });
                }
            }
        }));
        return props;
    }, [open, refs, focusItem, focusItemOnHover, listRef, onNavigate, virtual]);
    return React__namespace.useMemo(() => {
        if (!enabled) {
            return {};
        }
        const disabledIndices = disabledIndicesRef.current;
        function onKeyDown(event) {
            isPointerModalityRef.current = false;
            forceSyncFocus.current = true;
            // If the floating element is animating out, ignore navigation. Otherwise,
            // the `activeIndex` gets set to 0 despite not being open so the next time
            // the user ArrowDowns, the first item won't be focused.
            if (!latestOpenRef.current && event.currentTarget === refs.floating.current) {
                return;
            }
            if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {
                stopEvent(event);
                onOpenChange(false, event.nativeEvent, 'list-navigation');
                if (isHTMLElement(domReference) && !virtual) {
                    domReference.focus();
                }
                return;
            }
            const currentIndex = indexRef.current;
            const minIndex = getMinIndex(listRef, disabledIndices);
            const maxIndex = getMaxIndex(listRef, disabledIndices);
            if (event.key === 'Home') {
                stopEvent(event);
                indexRef.current = minIndex;
                onNavigate(indexRef.current);
            }
            if (event.key === 'End') {
                stopEvent(event);
                indexRef.current = maxIndex;
                onNavigate(indexRef.current);
            }
            // Grid navigation.
            if (cols > 1) {
                indexRef.current = getGridNavigatedIndex(listRef, {
                    event,
                    orientation,
                    loop,
                    cols,
                    disabledIndices,
                    minIndex,
                    maxIndex,
                    prevIndex: indexRef.current,
                    stopEvent: true
                });
                onNavigate(indexRef.current);
                if (orientation === 'both') {
                    return;
                }
            }
            if (isMainOrientationKey(event.key, orientation)) {
                stopEvent(event);
                // Reset the index if no item is focused.
                if (open && !virtual && activeElement(event.currentTarget.ownerDocument) === event.currentTarget) {
                    indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;
                    onNavigate(indexRef.current);
                    return;
                }
                if (isMainOrientationToEndKey(event.key, orientation, rtl)) {
                    if (loop) {
                        indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {
                            startingIndex: currentIndex,
                            disabledIndices
                        });
                    }
                    else {
                        indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {
                            startingIndex: currentIndex,
                            disabledIndices
                        }));
                    }
                }
                else {
                    if (loop) {
                        indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {
                            startingIndex: currentIndex,
                            decrement: true,
                            disabledIndices
                        });
                    }
                    else {
                        indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {
                            startingIndex: currentIndex,
                            decrement: true,
                            disabledIndices
                        }));
                    }
                }
                if (isIndexOutOfBounds(listRef, indexRef.current)) {
                    onNavigate(null);
                }
                else {
                    onNavigate(indexRef.current);
                }
            }
        }
        function checkVirtualMouse(event) {
            if (focusItemOnOpen === 'auto' && isVirtualClick(event.nativeEvent)) {
                focusItemOnOpenRef.current = true;
            }
        }
        function checkVirtualPointer(event) {
            // `pointerdown` fires first, reset the state then perform the checks.
            focusItemOnOpenRef.current = focusItemOnOpen;
            if (focusItemOnOpen === 'auto' && isVirtualPointerEvent(event.nativeEvent)) {
                focusItemOnOpenRef.current = true;
            }
        }
        const ariaActiveDescendantProp = virtual && open && hasActiveIndex && {
            'aria-activedescendant': virtualId || activeId
        };
        const activeItem = listRef.current.find(item => (item == null ? void 0 : item.id) === activeId);
        return {
            reference: Object.assign(Object.assign({}, ariaActiveDescendantProp), { onKeyDown(event) {
                    isPointerModalityRef.current = false;
                    const isArrowKey = event.key.indexOf('Arrow') === 0;
                    const isCrossOpenKey = isCrossOrientationOpenKey(event.key, orientation, rtl);
                    const isCrossCloseKey = isCrossOrientationCloseKey(event.key, orientation, rtl);
                    const isMainKey = isMainOrientationKey(event.key, orientation);
                    const isNavigationKey = (nested ? isCrossOpenKey : isMainKey) || event.key === 'Enter' || event.key.trim() === '';
                    if (virtual && open) {
                        const rootNode = tree == null ? void 0 : tree.nodesRef.current.find(node => node.parentId == null);
                        const deepestNode = tree && rootNode ? getDeepestNode(tree.nodesRef.current, rootNode.id) : null;
                        if (isArrowKey && deepestNode && virtualItemRef) {
                            const eventObject = new KeyboardEvent('keydown', {
                                key: event.key,
                                bubbles: true
                            });
                            if (isCrossOpenKey || isCrossCloseKey) {
                                var _deepestNode$context, _deepestNode$context2;
                                const isCurrentTarget = ((_deepestNode$context = deepestNode.context) == null ? void 0 : _deepestNode$context.elements.domReference) === event.currentTarget;
                                const dispatchItem = isCrossCloseKey && !isCurrentTarget ? (_deepestNode$context2 = deepestNode.context) == null ? void 0 : _deepestNode$context2.elements.domReference : isCrossOpenKey ? activeItem : null;
                                if (dispatchItem) {
                                    stopEvent(event);
                                    dispatchItem.dispatchEvent(eventObject);
                                    setVirtualId(undefined);
                                }
                            }
                            if (isMainKey && deepestNode.context) {
                                if (deepestNode.context.open && deepestNode.parentId && event.currentTarget !== deepestNode.context.elements.domReference) {
                                    var _deepestNode$context$;
                                    stopEvent(event);
                                    (_deepestNode$context$ = deepestNode.context.elements.domReference) == null || _deepestNode$context$.dispatchEvent(eventObject);
                                    return;
                                }
                            }
                        }
                        return onKeyDown(event);
                    }
                    // If a floating element should not open on arrow key down, avoid
                    // setting `activeIndex` while it's closed.
                    if (!open && !openOnArrowKeyDown && isArrowKey) {
                        return;
                    }
                    if (isNavigationKey) {
                        keyRef.current = nested && isMainKey ? null : event.key;
                    }
                    if (nested) {
                        if (isCrossOpenKey) {
                            stopEvent(event);
                            if (open) {
                                indexRef.current = getMinIndex(listRef, disabledIndices);
                                onNavigate(indexRef.current);
                            }
                            else {
                                onOpenChange(true, event.nativeEvent, 'list-navigation');
                            }
                        }
                        return;
                    }
                    if (isMainKey) {
                        if (selectedIndex != null) {
                            indexRef.current = selectedIndex;
                        }
                        stopEvent(event);
                        if (!open && openOnArrowKeyDown) {
                            onOpenChange(true, event.nativeEvent, 'list-navigation');
                        }
                        else {
                            onKeyDown(event);
                        }
                        if (open) {
                            onNavigate(indexRef.current);
                        }
                    }
                },
                onFocus() {
                    if (open) {
                        onNavigate(null);
                    }
                }, onPointerDown: checkVirtualPointer, onMouseDown: checkVirtualMouse, onClick: checkVirtualMouse }),
            floating: Object.assign(Object.assign({ 'aria-orientation': orientation === 'both' ? undefined : orientation }, (!isTypeableCombobox(domReference) && ariaActiveDescendantProp)), { onKeyDown,
                onPointerMove() {
                    isPointerModalityRef.current = true;
                } }),
            item
        };
    }, [domReference, refs, activeId, virtualId, disabledIndicesRef, latestOpenRef, listRef, enabled, orientation, rtl, virtual, open, hasActiveIndex, nested, selectedIndex, openOnArrowKeyDown, allowEscape, cols, loop, focusItemOnOpen, onNavigate, onOpenChange, item, tree, virtualItemRef]);
}
const componentRoleToAriaRoleMap = /*#__PURE__*/ new Map([['select', 'listbox'], ['combobox', 'listbox'], ['label', false]]);
/**
 * Adds base screen reader props to the reference and floating elements for a
 * given floating element `role`.
 * @see https://floating-ui.com/docs/useRole
 */
function useRole(context, props) {
    var _componentRoleToAriaR;
    if (props === void 0) {
        props = {};
    }
    const { open, floatingId } = context;
    const { enabled = true, role = 'dialog' } = props;
    const ariaRole = (_componentRoleToAriaR = componentRoleToAriaRoleMap.get(role)) != null ? _componentRoleToAriaR : role;
    const referenceId = useId$1();
    const parentId = useFloatingParentNodeId();
    const isNested = parentId != null;
    return React__namespace.useMemo(() => {
        if (!enabled)
            return {};
        const floatingProps = Object.assign({ id: floatingId }, (ariaRole && {
            role: ariaRole
        }));
        if (ariaRole === 'tooltip' || role === 'label') {
            return {
                reference: {
                    ["aria-" + (role === 'label' ? 'labelledby' : 'describedby')]: open ? floatingId : undefined
                },
                floating: floatingProps
            };
        }
        return {
            reference: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'aria-expanded': open ? 'true' : 'false', 'aria-haspopup': ariaRole === 'alertdialog' ? 'dialog' : ariaRole, 'aria-controls': open ? floatingId : undefined }, (ariaRole === 'listbox' && {
                role: 'combobox'
            })), (ariaRole === 'menu' && {
                id: referenceId
            })), (ariaRole === 'menu' && isNested && {
                role: 'menuitem'
            })), (role === 'select' && {
                'aria-autocomplete': 'none'
            })), (role === 'combobox' && {
                'aria-autocomplete': 'list'
            })),
            floating: Object.assign(Object.assign({}, floatingProps), (ariaRole === 'menu' && {
                'aria-labelledby': referenceId
            })),
            item(_ref) {
                let { active, selected } = _ref;
                const commonProps = Object.assign({ role: 'option' }, (active && {
                    id: floatingId + "-option"
                }));
                // For `menu`, we are unable to tell if the item is a `menuitemradio`
                // or `menuitemcheckbox`. For backwards-compatibility reasons, also
                // avoid defaulting to `menuitem` as it may overwrite custom role props.
                switch (role) {
                    case 'select':
                        return Object.assign(Object.assign({}, commonProps), { 'aria-selected': active && selected });
                    case 'combobox':
                        {
                            return Object.assign(Object.assign({}, commonProps), (active && {
                                'aria-selected': true
                            }));
                        }
                }
                return {};
            }
        };
    }, [enabled, role, ariaRole, open, floatingId, referenceId, isNested]);
}
function isPointInPolygon(point, polygon) {
    const [x, y] = point;
    let isInside = false;
    const length = polygon.length;
    for (let i = 0, j = length - 1; i < length; j = i++) {
        const [xi, yi] = polygon[i] || [0, 0];
        const [xj, yj] = polygon[j] || [0, 0];
        const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;
        if (intersect) {
            isInside = !isInside;
        }
    }
    return isInside;
}
function isInside(point, rect) {
    return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;
}
/**
 * Generates a safe polygon area that the user can traverse without closing the
 * floating element once leaving the reference element.
 * @see https://floating-ui.com/docs/useHover#safePolygon
 */
function safePolygon(options) {
    if (options === void 0) {
        options = {};
    }
    const { buffer = 0.5, blockPointerEvents = false, requireIntent = true } = options;
    let timeoutId;
    let hasLanded = false;
    let lastX = null;
    let lastY = null;
    let lastCursorTime = performance.now();
    function getCursorSpeed(x, y) {
        const currentTime = performance.now();
        const elapsedTime = currentTime - lastCursorTime;
        if (lastX === null || lastY === null || elapsedTime === 0) {
            lastX = x;
            lastY = y;
            lastCursorTime = currentTime;
            return null;
        }
        const deltaX = x - lastX;
        const deltaY = y - lastY;
        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        const speed = distance / elapsedTime; // px / ms
        lastX = x;
        lastY = y;
        lastCursorTime = currentTime;
        return speed;
    }
    const fn = _ref => {
        let { x, y, placement, elements, onClose, nodeId, tree } = _ref;
        return function onMouseMove(event) {
            function close() {
                clearTimeout(timeoutId);
                onClose();
            }
            clearTimeout(timeoutId);
            if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {
                return;
            }
            const { clientX, clientY } = event;
            const clientPoint = [clientX, clientY];
            const target = getTarget(event);
            const isLeave = event.type === 'mouseleave';
            const isOverFloatingEl = contains(elements.floating, target);
            const isOverReferenceEl = contains(elements.domReference, target);
            const refRect = elements.domReference.getBoundingClientRect();
            const rect = elements.floating.getBoundingClientRect();
            const side = placement.split('-')[0];
            const cursorLeaveFromRight = x > rect.right - rect.width / 2;
            const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;
            const isOverReferenceRect = isInside(clientPoint, refRect);
            const isFloatingWider = rect.width > refRect.width;
            const isFloatingTaller = rect.height > refRect.height;
            const left = (isFloatingWider ? refRect : rect).left;
            const right = (isFloatingWider ? refRect : rect).right;
            const top = (isFloatingTaller ? refRect : rect).top;
            const bottom = (isFloatingTaller ? refRect : rect).bottom;
            if (isOverFloatingEl) {
                hasLanded = true;
                if (!isLeave) {
                    return;
                }
            }
            if (isOverReferenceEl) {
                hasLanded = false;
            }
            if (isOverReferenceEl && !isLeave) {
                hasLanded = true;
                return;
            }
            // Prevent overlapping floating element from being stuck in an open-close
            // loop: https://github.com/floating-ui/floating-ui/issues/1910
            if (isLeave && isElement(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {
                return;
            }
            // If any nested child is open, abort.
            if (tree && getChildren(tree.nodesRef.current, nodeId).some(_ref2 => {
                let { context } = _ref2;
                return context == null ? void 0 : context.open;
            })) {
                return;
            }
            // If the pointer is leaving from the opposite side, the "buffer" logic
            // creates a point where the floating element remains open, but should be
            // ignored.
            // A constant of 1 handles floating point rounding errors.
            if (side === 'top' && y >= refRect.bottom - 1 || side === 'bottom' && y <= refRect.top + 1 || side === 'left' && x >= refRect.right - 1 || side === 'right' && x <= refRect.left + 1) {
                return close();
            }
            // Ignore when the cursor is within the rectangular trough between the
            // two elements. Since the triangle is created from the cursor point,
            // which can start beyond the ref element's edge, traversing back and
            // forth from the ref to the floating element can cause it to close. This
            // ensures it always remains open in that case.
            let rectPoly = [];
            switch (side) {
                case 'top':
                    rectPoly = [[left, refRect.top + 1], [left, rect.bottom - 1], [right, rect.bottom - 1], [right, refRect.top + 1]];
                    break;
                case 'bottom':
                    rectPoly = [[left, rect.top + 1], [left, refRect.bottom - 1], [right, refRect.bottom - 1], [right, rect.top + 1]];
                    break;
                case 'left':
                    rectPoly = [[rect.right - 1, bottom], [rect.right - 1, top], [refRect.left + 1, top], [refRect.left + 1, bottom]];
                    break;
                case 'right':
                    rectPoly = [[refRect.right - 1, bottom], [refRect.right - 1, top], [rect.left + 1, top], [rect.left + 1, bottom]];
                    break;
            }
            function getPolygon(_ref3) {
                let [x, y] = _ref3;
                switch (side) {
                    case 'top':
                        {
                            const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];
                            const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];
                            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];
                            return [cursorPointOne, cursorPointTwo, ...commonPoints];
                        }
                    case 'bottom':
                        {
                            const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];
                            const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];
                            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];
                            return [cursorPointOne, cursorPointTwo, ...commonPoints];
                        }
                    case 'left':
                        {
                            const cursorPointOne = [x + buffer + 1, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];
                            const cursorPointTwo = [x + buffer + 1, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];
                            const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];
                            return [...commonPoints, cursorPointOne, cursorPointTwo];
                        }
                    case 'right':
                        {
                            const cursorPointOne = [x - buffer, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];
                            const cursorPointTwo = [x - buffer, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];
                            const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];
                            return [cursorPointOne, cursorPointTwo, ...commonPoints];
                        }
                }
            }
            if (isPointInPolygon([clientX, clientY], rectPoly)) {
                return;
            }
            else if (hasLanded && !isOverReferenceRect) {
                return close();
            }
            if (!isLeave && requireIntent) {
                const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);
                const cursorSpeedThreshold = 0.1;
                if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {
                    return close();
                }
            }
            if (!isPointInPolygon([clientX, clientY], getPolygon([x, y]))) {
                close();
            }
            else if (!hasLanded && requireIntent) {
                timeoutId = window.setTimeout(close, 40);
            }
        };
    };
    fn.__options = {
        blockPointerEvents
    };
    return fn;
}

function getIndicesOfMatches(text, searchString) {
    const indices = [];
    let currentStartIndex, index;
    while ((index = text.toLowerCase().indexOf(searchString.toLowerCase(), currentStartIndex)) > -1) {
        indices.push(index);
        currentStartIndex = index + searchString.length;
    }
    return indices;
}
function OptionText({ text, userInput, startsWith, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
isOtherOption, }) {
    if ((userInput === null || userInput === void 0 ? void 0 : userInput.trim().length) === 0) {
        return React.createElement("span", null, text);
    }
    const inputLength = userInput.length;
    const indicesOfMatches = getIndicesOfMatches(text, userInput);
    const parts = [];
    // if no matches exist, add text as single part
    if (indicesOfMatches.length === 0)
        parts.push(text);
    // split text with matches into multiple parts
    for (let index = 0; index < indicesOfMatches.length; index++) {
        const lastIndex = text.length;
        const currentMatchStartIndex = indicesOfMatches[index];
        const currentMatchEndIndex = currentMatchStartIndex + inputLength;
        const nextMatchIndex = indicesOfMatches[index + 1];
        const shouldGetPartAfterMatch = currentMatchEndIndex < lastIndex && currentMatchEndIndex !== nextMatchIndex;
        const lastPartEndIndex = indicesOfMatches[index + 1] ? indicesOfMatches[index + 1] : lastIndex;
        // add first part without match
        if (index === 0 && indicesOfMatches[0] !== 0)
            parts.push(text.slice(0, currentMatchStartIndex));
        // add match
        parts.push(text.slice(currentMatchStartIndex, currentMatchEndIndex));
        // add part after match to the next match or to the end of text
        if (shouldGetPartAfterMatch)
            parts.push(text.slice(currentMatchEndIndex, lastPartEndIndex));
    }
    if (startsWith) {
        const lowerCaseParts = parts.map((part) => part.toLowerCase());
        const startIndex = lowerCaseParts.indexOf(userInput.toLowerCase());
        return (React.createElement("span", null, parts.map((part, index) => {
            const partShouldBeHighlighted = startIndex === 0 && index === startIndex;
            const itemKey = `${part}_${index}`;
            return (React.createElement("span", { key: itemKey, className: partShouldBeHighlighted ? "kds-combobox__option--highlight" : undefined }, part));
        })));
    }
    return (React.createElement("span", null, parts.map((part, index) => {
        const itemKey = `${part}_${index}`;
        return (React.createElement("span", { key: itemKey, className: userInput.toLowerCase() === part.toLowerCase() ? "kds-combobox__option--highlight" : undefined }, part));
    })));
}

function ComboboxMenuOption(_a) {
    var { value, label, index, isOtherOption, render, util, className, testId } = _a, attrs = __rest$1(_a, ["value", "label", "index", "isOtherOption", "render", "util", "className", "testId"]);
    const ref = React.useRef(null);
    const { state: { id, kbNavigationIndex, userInput, startsWith, inputRef }, dispatch, } = React.useContext(ComboboxContext);
    const itemClassNames = clsx("kds-combobox__option", util || className, {
        active: index === kbNavigationIndex,
    });
    // Select an item and return focus to input field
    const onClickHandler = () => {
        dispatch({ type: ActionType.SelectMouse, payload: { value, label } });
        inputRef.current.focus();
    };
    // Keep active option in view if ComboboxMenu has overflow.
    React.useEffect(() => {
        var _a;
        if (index === kbNavigationIndex) {
            (_a = ref.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ block: "nearest" });
        }
    }, [index, kbNavigationIndex]);
    const optionText = (React.createElement(OptionText, { text: getLabelValue({ label, value }), userInput: userInput, startsWith: startsWith, isOtherOption: isOtherOption }));
    return (React.createElement("li", Object.assign({ "data-testid": testId, role: "option", ref: ref, id: `${id}-option-${index}`, className: itemClassNames, onClick: () => onClickHandler(), "aria-selected": index === kbNavigationIndex, tabIndex: -1 }, attrs), render ? render(optionText) : optionText));
}
ComboboxMenuOption.defaultProps = {
    isOtherOption: false,
};

const getOptions = (comboboxId, options, noOptionsLabel, otherOption, showOtherOptionAlways) => {
    const optionsNotFound = options.length === 0;
    if (optionsNotFound && noOptionsLabel) {
        return [
            React.createElement("div", { className: "kds-flex kds-flex-row kds-items-center kds-p-2", key: `${comboboxId}-combobox-no-option-label` },
                React.createElement("div", { className: "kds-pl-4" }, noOptionsLabel)),
        ];
    }
    if (optionsNotFound && otherOption && !noOptionsLabel) {
        return [otherOption];
    }
    const finalOptions = options === null || options === void 0 ? void 0 : options.map((option, index) => (React.createElement(ComboboxMenuOption, { index: index, key: `${comboboxId}_${option.value}`, label: option.label, value: option.value })));
    if (otherOption && showOtherOptionAlways) {
        finalOptions.push(otherOption);
    }
    return finalOptions;
};

// Pass inputRef between components
const focusHandlerReducer = {
    reducerHandle: ActionType.FocusHandler,
    reducerFn: (state, action) => {
        return Object.assign(Object.assign({}, state), { inputRef: action.payload });
    },
};

/**
 * Keyboard navigation: highlight next option.
 * Down key opens closed menu & displays all options.
 */
const highlightNextReducer = {
    reducerHandle: ActionType.HighlightNext,
    reducerFn: (state) => {
        if (!state.isOpen) {
            return Object.assign(Object.assign({}, state), { isOpen: true, visibleOptions: state.allOptions, kbNavigationIndex: 0 });
        }
        if (state.kbNavigationIndex === null || state.kbNavigationIndex === state.visibleOptions.length - 1) {
            return Object.assign(Object.assign({}, state), { kbNavigationIndex: 0 });
        }
        if (state.kbNavigationIndex < state.visibleOptions.length - 1) {
            return Object.assign(Object.assign({}, state), { kbNavigationIndex: state.kbNavigationIndex + 1 });
        }
        return state;
    },
};
/**
 * Keyboard navigation: highlight next option.
 * Up key opens closed menu & displays all options.
 */
const highlightPrevReducer = {
    reducerHandle: ActionType.HighlightPrev,
    reducerFn: (state) => {
        if (!state.isOpen) {
            return Object.assign(Object.assign({}, state), { isOpen: true, visibleOptions: state.allOptions, kbNavigationIndex: state.allOptions.length - 1 });
        }
        if (state.kbNavigationIndex === null || state.kbNavigationIndex === 0) {
            return Object.assign(Object.assign({}, state), { kbNavigationIndex: state.visibleOptions.length - 1 });
        }
        if (state.kbNavigationIndex > 0 && state.kbNavigationIndex < state.visibleOptions.length) {
            return Object.assign(Object.assign({}, state), { kbNavigationIndex: state.kbNavigationIndex - 1 });
        }
        return state;
    },
};

const initReducer = {
    reducerHandle: ActionType.Init,
    reducerFn: (state, action) => {
        return Object.assign(Object.assign({}, state), { allOptions: action.payload });
    },
};

// Ref for useOnOutsideClick when using portal
const portalRefReducer = {
    reducerHandle: ActionType.PortalRef,
    reducerFn: (state, action) => {
        return Object.assign(Object.assign({}, state), { portalRef: action.payload });
    },
};
const usePortalReducer = {
    reducerHandle: ActionType.UsePortal,
    reducerFn: (state, action) => {
        return Object.assign(Object.assign({}, state), { isPortal: action.payload });
    },
};

const resetReducer = {
    reducerHandle: ActionType.Reset,
    reducerFn: (state) => {
        return Object.assign(Object.assign({}, state), { kbNavigationIndex: null, isOpen: false, isOptionSelected: false, selectedOptionValue: "", userInput: "", visibleOptions: [] });
    },
};

// Select option with keyboard
const selectKBReducer = {
    reducerHandle: ActionType.SelectKB,
    reducerFn: (state) => {
        var _a;
        const isIndexInOptions = state.kbNavigationIndex !== null ? (_a = state.visibleOptions) === null || _a === void 0 ? void 0 : _a[state.kbNavigationIndex] : false;
        if (isIndexInOptions) {
            const currentOption = state.visibleOptions[state.kbNavigationIndex];
            return Object.assign(Object.assign({}, state), { userInput: getLabelValue(currentOption.props), selectedOptionValue: currentOption.props.value && currentOption.props.label ? currentOption.props.value : "", isOpen: false, kbNavigationIndex: null, isOptionSelected: true });
        }
        return state;
    },
};
// Select option with mouse
const selectMouseReducer = {
    reducerHandle: ActionType.SelectMouse,
    reducerFn: (state, action) => {
        return Object.assign(Object.assign({}, state), { userInput: getLabelValue(action.payload), selectedOptionValue: action.payload.value && action.payload.label ? action.payload.value : "", isOpen: false, kbNavigationIndex: null, isOptionSelected: true });
    },
};
// onblur:
// close menu and:
//    empty input value or
//    input value = state.visibleOptions[0].props.value
const handleValueSelectOnBlurReducer = {
    reducerHandle: ActionType.HandleValueSelectOnBlur,
    reducerFn: (state) => {
        var _a, _b;
        if (state.isOptionSelected) {
            return state;
        }
        const getValueIfLabel = (item) => (item.label && item.value ? item.value : "");
        return Object.assign(Object.assign({}, state), { kbNavigationIndex: null, isOpen: false, userInput: ((_a = state.visibleOptions) === null || _a === void 0 ? void 0 : _a.length) === 1 ? getLabelValue(state.visibleOptions[0].props) : "", selectedOptionValue: ((_b = state.visibleOptions) === null || _b === void 0 ? void 0 : _b.length) === 1 ? getValueIfLabel(state.visibleOptions[0].props) : "", isOptionSelected: true });
    },
};

// Pass inputRef between components
const setDefaultReducer = {
    reducerHandle: ActionType.SetDefaultValue,
    reducerFn: (state, action) => {
        const { defaultValue, allowOnlyListedValues, defaultOptions } = action.payload;
        const getAllowedDefaultOption = (options) => options.some((option) => option.value === defaultValue.value) ? getLabelValue(defaultValue) : "";
        const mapMenuOptions = (options) => options.map(({ props }) => ({ value: props.value, label: props.value }));
        const options = defaultOptions && defaultOptions.length ? defaultOptions : mapMenuOptions(state.allOptions);
        const isAllowedOption = allowOnlyListedValues ? !!getAllowedDefaultOption(options) : true;
        return Object.assign(Object.assign({}, state), { isOptionSelected: isAllowedOption && !!defaultValue.value, selectedOptionValue: isAllowedOption && defaultValue.value && defaultValue.label ? defaultValue.value : "", userInput: allowOnlyListedValues ? getAllowedDefaultOption(options) : getLabelValue(defaultValue) });
    },
};

const showReducer = {
    reducerHandle: ActionType.Show,
    reducerFn: (state, action) => {
        if (action.payload.length > 0) {
            return Object.assign(Object.assign({}, state), { isOpen: true, visibleOptions: action.payload, kbNavigationIndex: null });
        }
        return Object.assign(Object.assign({}, state), { isOpen: false, visibleOptions: [], kbNavigationIndex: null });
    },
};
const hideReducer = {
    reducerHandle: ActionType.Hide,
    reducerFn: (state) => {
        return Object.assign(Object.assign({}, state), { kbNavigationIndex: null, isOpen: false });
    },
};

// Open/close menu
const toggleReducer = {
    reducerHandle: ActionType.Toggle,
    reducerFn: (state, action) => {
        const { isOpen } = action.payload;
        return Object.assign(Object.assign({}, state), { isOpen: isOpen, visibleOptions: state.allOptions, kbNavigationIndex: null });
    },
};

const updateReducer = {
    reducerHandle: ActionType.Update,
    reducerFn: (state, action) => {
        return Object.assign(Object.assign({}, state), { userInput: action.payload || "", selectedOptionValue: "", kbNavigationIndex: null, isOptionSelected: false });
    },
};
const updateRefReducer = {
    reducerHandle: ActionType.UpdateRef,
    reducerFn: (state, action) => {
        return Object.assign(Object.assign({}, state), { menuRef: action.payload });
    },
};

const selectReducer = (reducers) => (state, action) => {
    const reducer = reducers.find((reducer) => action.type === reducer.reducerHandle);
    if (reducer) {
        return reducer.reducerFn(state, action);
    }
    return state;
};
const rootReducer = selectReducer([
    focusHandlerReducer,
    highlightNextReducer,
    highlightPrevReducer,
    initReducer,
    portalRefReducer,
    usePortalReducer,
    resetReducer,
    selectKBReducer,
    selectMouseReducer,
    setDefaultReducer,
    showReducer,
    hideReducer,
    toggleReducer,
    updateReducer,
    handleValueSelectOnBlurReducer,
    updateRefReducer,
]);

/**
 * Ref-objekti palauttaa funktio-kutsut arvon tyhjentämiseen ja päivittämiseen komponentin ulkopuolelta käsin.
 * InputRef-prop välitetään komponentin input-elementille.
 */
const Combobox = React.forwardRef((_a, ref) => {
    var { id: propId, type, labelText, helpText, infoText, errorText, required, requiredLabel, invalid, usePortal, readOnly, disabled, testId, inputWidth, leftCol, threshold, startsWith, dropdown, loadOptions: propsLoadOptions, defaultOptions, loadingText, noOptionsLabel, onChange, allowOnlyListedValues, selectedLabel, nothingIsSelectedLabel, defaultValue = { value: "", label: "" }, onSelect, onBlur, onEnter, children, size: size$1 = "md", util, className, inputRef, showOtherOptionAlways } = _a, attrs = __rest$1(_a, ["id", "type", "labelText", "helpText", "infoText", "errorText", "required", "requiredLabel", "invalid", "usePortal", "readOnly", "disabled", "testId", "inputWidth", "leftCol", "threshold", "startsWith", "dropdown", "loadOptions", "defaultOptions", "loadingText", "noOptionsLabel", "onChange", "allowOnlyListedValues", "selectedLabel", "nothingIsSelectedLabel", "defaultValue", "onSelect", "onBlur", "onEnter", "children", "size", "util", "className", "inputRef", "showOtherOptionAlways"]);
    const generatedId = React.useId();
    const id = propId || generatedId;
    const buttonRef = React.useRef(null);
    const containerRef = React.useRef(null);
    const isFirstRender = useIsFirstRender();
    const liveArea = React.useRef(null);
    const internalInputRef = React.useRef();
    const isOnSelectPending = React.useRef(false);
    const isValueModified = React.useRef(false);
    const [isLoading, setIsLoading] = React.useState(false);
    const [loadedOptions, setLoadedOptions] = React.useState(null);
    const [otherOption, setOtherOption] = React.useState(null);
    const isTestEnv = process.env.NODE_ENV === "test";
    const previousOptionValue = React.useRef({
        label: defaultValue && defaultValue.label ? defaultValue.label : "",
        value: defaultValue && defaultValue.value ? defaultValue.value : "",
    });
    function handleInputRef(element) {
        if (typeof inputRef === "function") {
            inputRef(element);
        }
        else if (inputRef) {
            inputRef.current = element;
        }
        internalInputRef.current = element;
    }
    const [{ allOptions, isOpen, isPortal, portalRef, isOptionSelected, kbNavigationIndex, menuRef, selectedOptionValue, userInput, visibleOptions, }, dispatch,] = React.useReducer(rootReducer, initialComboboxState);
    React.useEffect(() => {
        if (!isValueModified.current && defaultValue.value) {
            dispatch({
                type: ActionType.SetDefaultValue,
                payload: {
                    defaultValue: { value: defaultValue.value, label: defaultValue.label },
                    allowOnlyListedValues,
                    defaultOptions,
                },
            });
        }
    }, [allOptions.length, allowOnlyListedValues, defaultOptions, defaultValue.label, defaultValue.value]);
    useOnClickOutside(usePortal ? portalRef : containerRef, () => isOpen && dispatch({ type: ActionType.Hide }));
    const throttledFilter = useThrottle(() => {
        if (!propsLoadOptions) {
            const filteredOptions = filterOptions(allOptions, userInput, threshold, startsWith);
            dispatch({ type: ActionType.Show, payload: filteredOptions });
        }
    }, 100, { leading: false, trailing: true });
    //Debounce callback
    const debouncedUpdate = useDebounce((inputValue) => {
        setIsLoading(true);
        propsLoadOptions(inputValue).then((options) => {
            setLoadedOptions(getOptions(id, options, noOptionsLabel, otherOption, showOtherOptionAlways));
            dispatch({
                type: ActionType.Show,
                payload: getOptions(id, options, noOptionsLabel, otherOption, showOtherOptionAlways),
            });
            setIsLoading(false);
        });
    }, 250);
    //Load options on first render
    React.useEffect(() => {
        let comboboxOtherOption;
        const comboboxMenu = React.Children.toArray(children).find((el) => el);
        if (React.isValidElement(comboboxMenu)) {
            comboboxOtherOption = React.Children.toArray(comboboxMenu.props.children).find((el) => React.isValidElement(el) && el.props.isOtherOption);
            setOtherOption(comboboxOtherOption);
        }
        if (propsLoadOptions) {
            if (defaultOptions) {
                setLoadedOptions(getOptions(id, defaultOptions, noOptionsLabel, comboboxOtherOption, showOtherOptionAlways));
            }
            else {
                propsLoadOptions(userInput).then((options) => {
                    setLoadedOptions(getOptions(id, options, noOptionsLabel, comboboxOtherOption, showOtherOptionAlways));
                });
            }
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    const contextValues = {
        allOptions,
        id,
        isOpen,
        portalRef,
        isPortal,
        isOptionSelected,
        kbNavigationIndex,
        menuRef,
        startsWith,
        userInput,
        visibleOptions,
        inputRef: internalInputRef,
        showOtherOptionAlways,
    };
    const inputIsValidValue = allOptions.some(({ props }) => getLabelValue(props) === userInput);
    React.useEffect(() => {
        if (usePortal)
            dispatch({ type: ActionType.UsePortal, payload: usePortal });
        // Pass inputRef for MenuOptionItem
        dispatch({ type: ActionType.FocusHandler, payload: internalInputRef });
    }, [usePortal, isOpen]);
    React.useEffect(() => {
        if (!isFirstRender && !isOptionSelected && userInput && userInput.length > 0) {
            throttledFilter();
        }
        return () => {
            throttledFilter.cancel();
        };
    }, [userInput, isFirstRender, isOptionSelected, throttledFilter]);
    React.useEffect(() => {
        const optionValue = {
            label: selectedOptionValue ? userInput : "",
            value: selectedOptionValue || userInput,
        };
        if (isOptionSelected &&
            (isOptionValueChanged(optionValue, previousOptionValue.current) || isOnSelectPending.current)) {
            previousOptionValue.current = optionValue;
            if (isOnSelectPending.current) {
                isOnSelectPending.current = false;
            }
            if (onSelect) {
                onSelect(selectedOptionValue === "" ? userInput : optionValue);
            }
            // Add text to aria live region
            liveArea.current.innerHTML = userInput === "" ? `${nothingIsSelectedLabel}` : `${selectedLabel} ${userInput}`;
            // Remove text from DOM after a small delay
            const liveAreaTimer = setTimeout(() => {
                if (liveArea.current)
                    liveArea.current.innerHTML = "";
                return false;
            }, 500);
            return () => liveAreaTimer && clearTimeout(liveAreaTimer);
        }
        if (allowOnlyListedValues && userInput !== "" && !inputIsValidValue) {
            previousOptionValue.current = optionValue;
        }
    }, [
        isOptionSelected,
        onSelect,
        userInput,
        nothingIsSelectedLabel,
        selectedLabel,
        selectedOptionValue,
        allowOnlyListedValues,
        inputIsValidValue,
    ]);
    useIsomorphicLayoutEffect$1(() => {
        var _a;
        const triggerRef = containerRef === null || containerRef === void 0 ? void 0 : containerRef.current;
        const floatingRef = (_a = contextValues.menuRef) === null || _a === void 0 ? void 0 : _a.current;
        if (!isOpen || !triggerRef || !floatingRef)
            return;
        return autoUpdate(triggerRef, floatingRef, () => computePosition(triggerRef, floatingRef, {
            placement: "bottom-start",
            middleware: [
                flip(),
                shift(),
                size({
                    apply({ rects }) {
                        Object.assign(floatingRef.style, {
                            width: `${rects.reference.width}px`,
                        });
                    },
                }),
            ],
        }).then(({ x: xPos, y: yPos }) => {
            Object.assign(floatingRef.style, {
                left: `${xPos}px`,
                top: `${yPos}px`,
            });
        }));
    }, [isOpen, containerRef, contextValues.menuRef]);
    React.useImperativeHandle(ref, () => ({
        reset() {
            dispatch({ type: ActionType.Update });
            previousOptionValue.current = { label: "", value: "" };
            isValueModified.current = true;
        },
        setValue({ value, label }) {
            const allowedOption = allOptions.some(({ props }) => props.value === value)
                ? { value, label }
                : { value: "", label: "" };
            const payload = allowOnlyListedValues ? allowedOption : { value, label };
            dispatch({ type: ActionType.SelectMouse, payload });
            isValueModified.current = true;
        },
    }), [allOptions, allowOnlyListedValues]);
    const handleOnKeyDown = (e) => {
        if (isEsc(e)) {
            if (allowOnlyListedValues && isOpen && userInput.length > 0 && !inputIsValidValue) {
                dispatch({ type: ActionType.HandleValueSelectOnBlur });
            }
            else if (isOpen) {
                dispatch({ type: ActionType.Hide });
            }
            else {
                dispatch({ type: ActionType.Reset });
            }
        }
        else if (isTab(e)) {
            if (allowOnlyListedValues && isOpen && userInput.length > 0 && !inputIsValidValue) {
                dispatch({ type: ActionType.HandleValueSelectOnBlur });
            }
            else if (isOpen) {
                dispatch({ type: ActionType.Hide });
            }
        }
        else if (isEnter(e)) {
            e.preventDefault();
            if (contextValues.kbNavigationIndex === null) {
                onEnter && onEnter(e);
            }
            dispatch({ type: ActionType.SelectKB });
        }
        else if (isDown(e)) {
            e.preventDefault();
            if ((!isOpen && dropdown) || isOpen) {
                dispatch({ type: ActionType.HighlightNext });
            }
        }
        else if (isUp(e)) {
            e.preventDefault();
            if ((!isOpen && dropdown) || isOpen) {
                dispatch({ type: ActionType.HighlightPrev });
            }
        }
    };
    const handleOnChange = (e) => {
        e.persist();
        e.target.value.length === 0 && dispatch({ type: ActionType.Show, payload: allOptions });
        isValueModified.current = true;
        dispatch({ type: ActionType.Update, payload: e.target.value });
        onChange && onChange(e);
        if (propsLoadOptions) {
            debouncedUpdate(e.target.value);
        }
    };
    const handleOnBlur = (e) => {
        e.target.scrollLeft = 0;
        const targetRef = portalRef ? portalRef : containerRef;
        if (allowOnlyListedValues && ((isOpen && !targetRef.current.contains(e.relatedTarget)) || !isOpen)) {
            dispatch({ type: ActionType.HandleValueSelectOnBlur });
        }
        if (!isOpen && (!e.relatedTarget || (e.relatedTarget && e.relatedTarget !== buttonRef.current))) {
            onBlur && onBlur(e);
        }
    };
    const handleOnPaste = () => {
        isValueModified.current = true;
        isOnSelectPending.current = true;
    };
    const handleOnClick = () => {
        if (isOpen && !inputIsValidValue && allowOnlyListedValues) {
            dispatch({ type: ActionType.HandleValueSelectOnBlur });
        }
        dispatch({ type: ActionType.Toggle, payload: { isOpen: !isOpen } });
        if (!isOpen) {
            internalInputRef.current.focus();
        }
    };
    const getTextIds = () => clsx({
        [`${id}-help`]: id && helpText,
        [`${id}-error`]: id && errorText && invalid,
        [`${id}-info`]: id && infoText,
    });
    const containerClassNames = clsx("kds-combobox", {
        "kds-combobox__toggle": dropdown,
        "kds-combobox--is-invalid": disabled && invalid ? false : invalid,
    });
    const toggleClassNames = clsx("kds-combobox__btn", {
        [`kds-combobox__btn--${size$1}`]: size$1 && size$1 !== "md",
    });
    const renderOptions = () => {
        if (!propsLoadOptions)
            return children;
        const loadingIndicator = (React.createElement("div", { className: "kds-combobox__menu kds-combobox__loading-indicator" },
            React.createElement("div", { className: "kds-flex kds-flex-row kds-items-center kds-justify-between kds-py-2 kds-px-6" },
                React.createElement("div", null, loadingText),
                React.createElement(Spinner, { srLoadingText: loadingText }))));
        return isLoading ? loadingIndicator : React.createElement(ComboboxMenu, null, loadedOptions);
    };
    const getInputComponents = () => (React.createElement("div", { id: id, className: containerClassNames, ref: containerRef, "data-testid": isTestEnv ? "kds-combobox" : undefined },
        React.createElement("div", { className: "kds-sr-only", "aria-live": "assertive", ref: liveArea }),
        React.createElement(Input, Object.assign({ role: "combobox", type: type, id: `${id}-input`, ref: handleInputRef, required: required, invalid: invalid, disabled: disabled, readOnly: readOnly, "aria-expanded": isOpen, "aria-autocomplete": "list", "aria-controls": `${id}-menu`, "aria-activedescendant": kbNavigationIndex !== null ? `${id}-option-${kbNavigationIndex}` : undefined, "aria-describedby": getTextIds(), onKeyDown: handleOnKeyDown, onChange: handleOnChange, onPaste: handleOnPaste, value: userInput, className: "kds-combobox__input", onBlur: handleOnBlur, size: size$1, autoComplete: "off" }, attrs)),
        dropdown && !disabled && !readOnly && (React.createElement("button", { "aria-hidden": "true", ref: buttonRef, tabIndex: -1, type: "button", className: toggleClassNames, onClick: handleOnClick, onKeyDown: handleOnKeyDown }, isOpen ? React.createElement(SvgIconCaretUp, null) : React.createElement(SvgIconCaretDown, null))),
        renderOptions()));
    const getLabel = (center) => (React.createElement(React.Fragment, null,
        labelText && (React.createElement(InputLabel, { center: center, htmlFor: `${id}-input`, required: required, requiredLabel: requiredLabel }, labelText)),
        helpText && React.createElement(InputText, { id: `${id}-help` }, helpText)));
    const mainContent = (React.createElement(React.Fragment, null,
        errorText && invalid && (React.createElement(InputText, { error: true, id: `${id}-error` }, errorText)),
        inputWidth ? React.createElement(Row$1, { form: true }, inputWidth(getInputComponents())) : getInputComponents(),
        infoText && (React.createElement(InputText, { info: true, id: `${id}-info` }, infoText))));
    return (React.createElement(ComboboxContext.Provider, { value: { state: contextValues, dispatch } },
        React.createElement(InputGroup, { "data-testid": testId, row: !!leftCol, className: util || className },
            leftCol ? leftCol(getLabel(true)) : getLabel(),
            leftCol ? React.createElement(Column, null, mainContent) : mainContent)));
});
Combobox.displayName = "Combobox";
Combobox.defaultProps = {
    type: "text",
    required: false,
    invalid: false,
    readOnly: false,
    disabled: false,
    dropdown: false,
    threshold: 2,
    startsWith: false,
    allowOnlyListedValues: false,
    selectedLabel: "",
    nothingIsSelectedLabel: "",
    showOtherOptionAlways: false,
};

const defaultElement$z = "div";
function Container(_a) {
    var { as, center, fluid, gx, maxWidth, testId, util, className, children } = _a, attrs = __rest$1(_a, ["as", "center", "fluid", "gx", "maxWidth", "testId", "util", "className", "children"]);
    const Tag = as || defaultElement$z;
    const isDefaultContainer = (maxWidth && !fluid) || (!maxWidth && !fluid) || (!maxWidth && fluid);
    const isFluidContainer = maxWidth && fluid;
    const classNames = clsx(util || className, {
        "kds-container": isDefaultContainer,
        [`kds-container--${maxWidth}`]: maxWidth && !fluid,
        "kds-container--fluid": !maxWidth && fluid,
        [`kds-fluid-container`]: isFluidContainer,
        [`kds-fluid-container--${maxWidth}`]: isFluidContainer,
        "kds-mx-auto": center,
        [`kds-gx-${gx}`]: gx || gx === 0,
    });
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
Container.defaultProps = {
    as: defaultElement$z,
    center: true,
};

function SvgIconNoticeCircle(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }),
            React__namespace.createElement("circle", { cx: 12, cy: 12, r: 10, fill: "none", stroke: "currentColor", strokeMiterlimit: 10, strokeWidth: 2 }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeMiterlimit: 10, strokeWidth: 2, d: "M12 7v6" }),
            React__namespace.createElement("circle", { cx: 12, cy: 17, r: 0.3, fill: "none", stroke: "currentColor", strokeMiterlimit: 10, strokeWidth: 2 }))));
}

function SvgIconQuestionCircle(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M12 15v-1c.06-.78 1.75-1.38 2.31-2A3 3 0 1 0 9 10" }),
            React__namespace.createElement("circle", { cx: 12, cy: 12, r: 10, fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeMiterlimit: 10, strokeWidth: 2 }),
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }),
            React__namespace.createElement("circle", { cx: 12, cy: 18, r: 0.3, fill: "none", stroke: "currentColor", strokeMiterlimit: 10, strokeWidth: 2 }))));
}

function SvgIconBulb(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M9 18v3a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-3M12 2a7 7 0 0 0-7 7 6.89 6.89 0 0 0 .64 2.87L8 18h8l2.36-6.13A6.89 6.89 0 0 0 19 9a7 7 0 0 0-7-7m0 8.5V18" }))));
}

const defaultElement$y = "section";
function ContentHighlight(_a) {
    var { titleAs = "h4", titleSize, as, type, util, className, children, testId, title, iconAriaLabel, iconPosition = "auto" } = _a, attrs = __rest$1(_a, ["titleAs", "titleSize", "as", "type", "util", "className", "children", "testId", "title", "iconAriaLabel", "iconPosition"]);
    const titleId = React.useId();
    if (type === undefined)
        return null;
    const classNames = clsx(util || className, "kds-content-highlight", {
        [`kds-content-highlight--vertical`]: iconPosition === "top",
        [`kds-content-highlight--auto`]: iconPosition === "auto",
    });
    const Tag = as || defaultElement$y;
    const iconClassName = clsx("kds-content-highlight__icon", {
        "kds-content-highlight__icon--notice": type === "notice",
        "kds-content-highlight__icon--example": type === "example",
    });
    let iconComponent = React.createElement(SvgIconQuestionCircle, { className: iconClassName, size: "m", "aria-label": iconAriaLabel });
    if (type === "notice") {
        iconComponent = React.createElement(SvgIconNoticeCircle, { className: iconClassName, size: "m", "aria-label": iconAriaLabel });
    }
    else if (type === "example") {
        iconComponent = React.createElement(SvgIconBulb, { className: iconClassName, size: "m", "aria-label": iconAriaLabel });
    }
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId, "aria-labelledby": titleId }, attrs),
        iconComponent,
        React.createElement("div", { className: "kds-content-highlight__content" },
            title && (React.createElement(Heading, { as: titleAs, size: titleSize, id: titleId, className: "kds-content-highlight__title" }, title)),
            children)));
}
ContentHighlight.defaultProps = {
    as: defaultElement$y,
};

var format$2 = {exports: {}};

var interopRequireDefault = {exports: {}};

(function (module) {
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            "default": obj
        };
    }
    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(interopRequireDefault));
var interopRequireDefaultExports = interopRequireDefault.exports;

var isValid$1 = {exports: {}};

var isDate$1 = {exports: {}};

var _typeof$1 = {exports: {}};

(function (module) {
    function _typeof(o) {
        "@babel/helpers - typeof";
        return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
            return typeof o;
        } : function (o) {
            return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(o);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(_typeof$1));
var _typeofExports = _typeof$1.exports;

var requiredArgs$1 = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = requiredArgs;
    function requiredArgs(required, args) {
        if (args.length < required) {
            throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
        }
    }
    module.exports = exports.default;
}(requiredArgs$1, requiredArgs$1.exports));
var requiredArgsExports = requiredArgs$1.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = isDate;
    var _typeof2 = _interopRequireDefault(_typeofExports);
    var _index = _interopRequireDefault(requiredArgsExports);
    /**
     * @name isDate
     * @category Common Helpers
     * @summary Is the given value a date?
     *
     * @description
     * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
     *
     * @param {*} value - the value to check
     * @returns {boolean} true if the given value is a date
     * @throws {TypeError} 1 arguments required
     *
     * @example
     * // For a valid date:
     * const result = isDate(new Date())
     * //=> true
     *
     * @example
     * // For an invalid date:
     * const result = isDate(new Date(NaN))
     * //=> true
     *
     * @example
     * // For some value:
     * const result = isDate('2014-02-31')
     * //=> false
     *
     * @example
     * // For an object:
     * const result = isDate({})
     * //=> false
     */
    function isDate(value) {
        (0, _index.default)(1, arguments);
        return value instanceof Date || (0, _typeof2.default)(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
    }
    module.exports = exports.default;
}(isDate$1, isDate$1.exports));
var isDateExports = isDate$1.exports;

var toDate$1 = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = toDate;
    var _typeof2 = _interopRequireDefault(_typeofExports);
    var _index = _interopRequireDefault(requiredArgsExports);
    /**
     * @name toDate
     * @category Common Helpers
     * @summary Convert the given argument to an instance of Date.
     *
     * @description
     * Convert the given argument to an instance of Date.
     *
     * If the argument is an instance of Date, the function returns its clone.
     *
     * If the argument is a number, it is treated as a timestamp.
     *
     * If the argument is none of the above, the function returns Invalid Date.
     *
     * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
     *
     * @param {Date|Number} argument - the value to convert
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Clone the date:
     * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert the timestamp to date:
     * const result = toDate(1392098430000)
     * //=> Tue Feb 11 2014 11:30:30
     */
    function toDate(argument) {
        (0, _index.default)(1, arguments);
        var argStr = Object.prototype.toString.call(argument);
        // Clone the date
        if (argument instanceof Date || (0, _typeof2.default)(argument) === 'object' && argStr === '[object Date]') {
            // Prevent the date to lose the milliseconds when passed to new Date() in IE10
            return new Date(argument.getTime());
        }
        else if (typeof argument === 'number' || argStr === '[object Number]') {
            return new Date(argument);
        }
        else {
            if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
                // eslint-disable-next-line no-console
                console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
                // eslint-disable-next-line no-console
                console.warn(new Error().stack);
            }
            return new Date(NaN);
        }
    }
    module.exports = exports.default;
}(toDate$1, toDate$1.exports));
var toDateExports = toDate$1.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = isValid;
    var _index = _interopRequireDefault(isDateExports);
    var _index2 = _interopRequireDefault(toDateExports);
    var _index3 = _interopRequireDefault(requiredArgsExports);
    /**
     * @name isValid
     * @category Common Helpers
     * @summary Is the given date valid?
     *
     * @description
     * Returns false if argument is Invalid Date and true otherwise.
     * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
     * Invalid Date is a Date, whose time value is NaN.
     *
     * Time value of Date: http://es5.github.io/#x15.9.1.1
     *
     * @param {*} date - the date to check
     * @returns {Boolean} the date is valid
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // For the valid date:
     * const result = isValid(new Date(2014, 1, 31))
     * //=> true
     *
     * @example
     * // For the value, convertable into a date:
     * const result = isValid(1393804800000)
     * //=> true
     *
     * @example
     * // For the invalid date:
     * const result = isValid(new Date(''))
     * //=> false
     */
    function isValid(dirtyDate) {
        (0, _index3.default)(1, arguments);
        if (!(0, _index.default)(dirtyDate) && typeof dirtyDate !== 'number') {
            return false;
        }
        var date = (0, _index2.default)(dirtyDate);
        return !isNaN(Number(date));
    }
    module.exports = exports.default;
}(isValid$1, isValid$1.exports));
var isValidExports = isValid$1.exports;
var isValidDate = /*@__PURE__*/ getDefaultExportFromCjs(isValidExports);

var subMilliseconds$1 = {exports: {}};

var addMilliseconds$1 = {exports: {}};

var toInteger$1 = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = toInteger;
    function toInteger(dirtyNumber) {
        if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
            return NaN;
        }
        var number = Number(dirtyNumber);
        if (isNaN(number)) {
            return number;
        }
        return number < 0 ? Math.ceil(number) : Math.floor(number);
    }
    module.exports = exports.default;
}(toInteger$1, toInteger$1.exports));
var toIntegerExports = toInteger$1.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = addMilliseconds;
    var _index = _interopRequireDefault(toIntegerExports);
    var _index2 = _interopRequireDefault(toDateExports);
    var _index3 = _interopRequireDefault(requiredArgsExports);
    /**
     * @name addMilliseconds
     * @category Millisecond Helpers
     * @summary Add the specified number of milliseconds to the given date.
     *
     * @description
     * Add the specified number of milliseconds to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
     * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:30.750
     */
    function addMilliseconds(dirtyDate, dirtyAmount) {
        (0, _index3.default)(2, arguments);
        var timestamp = (0, _index2.default)(dirtyDate).getTime();
        var amount = (0, _index.default)(dirtyAmount);
        return new Date(timestamp + amount);
    }
    module.exports = exports.default;
}(addMilliseconds$1, addMilliseconds$1.exports));
var addMillisecondsExports = addMilliseconds$1.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = subMilliseconds;
    var _index = _interopRequireDefault(addMillisecondsExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    var _index3 = _interopRequireDefault(toIntegerExports);
    /**
     * @name subMilliseconds
     * @category Millisecond Helpers
     * @summary Subtract the specified number of milliseconds from the given date.
     *
     * @description
     * Subtract the specified number of milliseconds from the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
     * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:29.250
     */
    function subMilliseconds(dirtyDate, dirtyAmount) {
        (0, _index2.default)(2, arguments);
        var amount = (0, _index3.default)(dirtyAmount);
        return (0, _index.default)(dirtyDate, -amount);
    }
    module.exports = exports.default;
}(subMilliseconds$1, subMilliseconds$1.exports));
var subMillisecondsExports = subMilliseconds$1.exports;

var formatters$4 = {exports: {}};

var getUTCDayOfYear$1 = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = getUTCDayOfYear;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    var MILLISECONDS_IN_DAY = 86400000;
    function getUTCDayOfYear(dirtyDate) {
        (0, _index2.default)(1, arguments);
        var date = (0, _index.default)(dirtyDate);
        var timestamp = date.getTime();
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
        var startOfYearTimestamp = date.getTime();
        var difference = timestamp - startOfYearTimestamp;
        return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
    }
    module.exports = exports.default;
}(getUTCDayOfYear$1, getUTCDayOfYear$1.exports));
var getUTCDayOfYearExports = getUTCDayOfYear$1.exports;

var getUTCISOWeek$1 = {exports: {}};

var startOfUTCISOWeek$1 = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = startOfUTCISOWeek;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    function startOfUTCISOWeek(dirtyDate) {
        (0, _index2.default)(1, arguments);
        var weekStartsOn = 1;
        var date = (0, _index.default)(dirtyDate);
        var day = date.getUTCDay();
        var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
        date.setUTCDate(date.getUTCDate() - diff);
        date.setUTCHours(0, 0, 0, 0);
        return date;
    }
    module.exports = exports.default;
}(startOfUTCISOWeek$1, startOfUTCISOWeek$1.exports));
var startOfUTCISOWeekExports = startOfUTCISOWeek$1.exports;

var startOfUTCISOWeekYear$1 = {exports: {}};

var getUTCISOWeekYear$1 = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = getUTCISOWeekYear;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    var _index3 = _interopRequireDefault(startOfUTCISOWeekExports);
    function getUTCISOWeekYear(dirtyDate) {
        (0, _index2.default)(1, arguments);
        var date = (0, _index.default)(dirtyDate);
        var year = date.getUTCFullYear();
        var fourthOfJanuaryOfNextYear = new Date(0);
        fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
        fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
        var startOfNextYear = (0, _index3.default)(fourthOfJanuaryOfNextYear);
        var fourthOfJanuaryOfThisYear = new Date(0);
        fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
        fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
        var startOfThisYear = (0, _index3.default)(fourthOfJanuaryOfThisYear);
        if (date.getTime() >= startOfNextYear.getTime()) {
            return year + 1;
        }
        else if (date.getTime() >= startOfThisYear.getTime()) {
            return year;
        }
        else {
            return year - 1;
        }
    }
    module.exports = exports.default;
}(getUTCISOWeekYear$1, getUTCISOWeekYear$1.exports));
var getUTCISOWeekYearExports = getUTCISOWeekYear$1.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = startOfUTCISOWeekYear;
    var _index = _interopRequireDefault(getUTCISOWeekYearExports);
    var _index2 = _interopRequireDefault(startOfUTCISOWeekExports);
    var _index3 = _interopRequireDefault(requiredArgsExports);
    function startOfUTCISOWeekYear(dirtyDate) {
        (0, _index3.default)(1, arguments);
        var year = (0, _index.default)(dirtyDate);
        var fourthOfJanuary = new Date(0);
        fourthOfJanuary.setUTCFullYear(year, 0, 4);
        fourthOfJanuary.setUTCHours(0, 0, 0, 0);
        var date = (0, _index2.default)(fourthOfJanuary);
        return date;
    }
    module.exports = exports.default;
}(startOfUTCISOWeekYear$1, startOfUTCISOWeekYear$1.exports));
var startOfUTCISOWeekYearExports = startOfUTCISOWeekYear$1.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = getUTCISOWeek;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(startOfUTCISOWeekExports);
    var _index3 = _interopRequireDefault(startOfUTCISOWeekYearExports);
    var _index4 = _interopRequireDefault(requiredArgsExports);
    var MILLISECONDS_IN_WEEK = 604800000;
    function getUTCISOWeek(dirtyDate) {
        (0, _index4.default)(1, arguments);
        var date = (0, _index.default)(dirtyDate);
        var diff = (0, _index2.default)(date).getTime() - (0, _index3.default)(date).getTime();
        // Round the number of days to the nearest integer
        // because the number of milliseconds in a week is not constant
        // (e.g. it's different in the week of the daylight saving time clock shift)
        return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }
    module.exports = exports.default;
}(getUTCISOWeek$1, getUTCISOWeek$1.exports));
var getUTCISOWeekExports = getUTCISOWeek$1.exports;

var getUTCWeek$1 = {exports: {}};

var startOfUTCWeek$1 = {exports: {}};

var defaultOptions$2 = {};

Object.defineProperty(defaultOptions$2, "__esModule", {
    value: true
});
defaultOptions$2.getDefaultOptions = getDefaultOptions$1;
defaultOptions$2.setDefaultOptions = setDefaultOptions;
var defaultOptions$1 = {};
function getDefaultOptions$1() {
    return defaultOptions$1;
}
function setDefaultOptions(newOptions) {
    defaultOptions$1 = newOptions;
}

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = startOfUTCWeek;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    var _index3 = _interopRequireDefault(toIntegerExports);
    var _index4 = defaultOptions$2;
    function startOfUTCWeek(dirtyDate, options) {
        var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        (0, _index2.default)(1, arguments);
        var defaultOptions = (0, _index4.getDefaultOptions)();
        var weekStartsOn = (0, _index3.default)((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
        // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
            throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
        }
        var date = (0, _index.default)(dirtyDate);
        var day = date.getUTCDay();
        var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
        date.setUTCDate(date.getUTCDate() - diff);
        date.setUTCHours(0, 0, 0, 0);
        return date;
    }
    module.exports = exports.default;
}(startOfUTCWeek$1, startOfUTCWeek$1.exports));
var startOfUTCWeekExports = startOfUTCWeek$1.exports;

var startOfUTCWeekYear$1 = {exports: {}};

var getUTCWeekYear$1 = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = getUTCWeekYear;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    var _index3 = _interopRequireDefault(startOfUTCWeekExports);
    var _index4 = _interopRequireDefault(toIntegerExports);
    var _index5 = defaultOptions$2;
    function getUTCWeekYear(dirtyDate, options) {
        var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        (0, _index2.default)(1, arguments);
        var date = (0, _index.default)(dirtyDate);
        var year = date.getUTCFullYear();
        var defaultOptions = (0, _index5.getDefaultOptions)();
        var firstWeekContainsDate = (0, _index4.default)((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
        // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
        if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
            throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
        }
        var firstWeekOfNextYear = new Date(0);
        firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
        firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
        var startOfNextYear = (0, _index3.default)(firstWeekOfNextYear, options);
        var firstWeekOfThisYear = new Date(0);
        firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
        firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
        var startOfThisYear = (0, _index3.default)(firstWeekOfThisYear, options);
        if (date.getTime() >= startOfNextYear.getTime()) {
            return year + 1;
        }
        else if (date.getTime() >= startOfThisYear.getTime()) {
            return year;
        }
        else {
            return year - 1;
        }
    }
    module.exports = exports.default;
}(getUTCWeekYear$1, getUTCWeekYear$1.exports));
var getUTCWeekYearExports = getUTCWeekYear$1.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = startOfUTCWeekYear;
    var _index = _interopRequireDefault(getUTCWeekYearExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    var _index3 = _interopRequireDefault(startOfUTCWeekExports);
    var _index4 = _interopRequireDefault(toIntegerExports);
    var _index5 = defaultOptions$2;
    function startOfUTCWeekYear(dirtyDate, options) {
        var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        (0, _index2.default)(1, arguments);
        var defaultOptions = (0, _index5.getDefaultOptions)();
        var firstWeekContainsDate = (0, _index4.default)((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
        var year = (0, _index.default)(dirtyDate, options);
        var firstWeek = new Date(0);
        firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
        firstWeek.setUTCHours(0, 0, 0, 0);
        var date = (0, _index3.default)(firstWeek, options);
        return date;
    }
    module.exports = exports.default;
}(startOfUTCWeekYear$1, startOfUTCWeekYear$1.exports));
var startOfUTCWeekYearExports = startOfUTCWeekYear$1.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = getUTCWeek;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(startOfUTCWeekExports);
    var _index3 = _interopRequireDefault(startOfUTCWeekYearExports);
    var _index4 = _interopRequireDefault(requiredArgsExports);
    var MILLISECONDS_IN_WEEK = 604800000;
    function getUTCWeek(dirtyDate, options) {
        (0, _index4.default)(1, arguments);
        var date = (0, _index.default)(dirtyDate);
        var diff = (0, _index2.default)(date, options).getTime() - (0, _index3.default)(date, options).getTime();
        // Round the number of days to the nearest integer
        // because the number of milliseconds in a week is not constant
        // (e.g. it's different in the week of the daylight saving time clock shift)
        return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }
    module.exports = exports.default;
}(getUTCWeek$1, getUTCWeek$1.exports));
var getUTCWeekExports = getUTCWeek$1.exports;

var addLeadingZeros$1 = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = addLeadingZeros;
    function addLeadingZeros(number, targetLength) {
        var sign = number < 0 ? '-' : '';
        var output = Math.abs(number).toString();
        while (output.length < targetLength) {
            output = '0' + output;
        }
        return sign + output;
    }
    module.exports = exports.default;
}(addLeadingZeros$1, addLeadingZeros$1.exports));
var addLeadingZerosExports = addLeadingZeros$1.exports;

var lightFormatters = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var _index = _interopRequireDefault(addLeadingZerosExports);
    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* |                                |
     * |  d  | Day of month                   |  D  |                                |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  m  | Minute                         |  M  | Month                          |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  y  | Year (abs)                     |  Y  |                                |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     */
    var formatters = {
        // Year
        y: function y(date, token) {
            // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
            // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
            // |----------|-------|----|-------|-------|-------|
            // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
            // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
            // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
            // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
            // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
            var signedYear = date.getUTCFullYear();
            // Returns 1 for 1 BC (which is year 0 in JavaScript)
            var year = signedYear > 0 ? signedYear : 1 - signedYear;
            return (0, _index.default)(token === 'yy' ? year % 100 : year, token.length);
        },
        // Month
        M: function M(date, token) {
            var month = date.getUTCMonth();
            return token === 'M' ? String(month + 1) : (0, _index.default)(month + 1, 2);
        },
        // Day of the month
        d: function d(date, token) {
            return (0, _index.default)(date.getUTCDate(), token.length);
        },
        // AM or PM
        a: function a(date, token) {
            var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
            switch (token) {
                case 'a':
                case 'aa':
                    return dayPeriodEnumValue.toUpperCase();
                case 'aaa':
                    return dayPeriodEnumValue;
                case 'aaaaa':
                    return dayPeriodEnumValue[0];
                case 'aaaa':
                default:
                    return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
            }
        },
        // Hour [1-12]
        h: function h(date, token) {
            return (0, _index.default)(date.getUTCHours() % 12 || 12, token.length);
        },
        // Hour [0-23]
        H: function H(date, token) {
            return (0, _index.default)(date.getUTCHours(), token.length);
        },
        // Minute
        m: function m(date, token) {
            return (0, _index.default)(date.getUTCMinutes(), token.length);
        },
        // Second
        s: function s(date, token) {
            return (0, _index.default)(date.getUTCSeconds(), token.length);
        },
        // Fraction of second
        S: function S(date, token) {
            var numberOfDigits = token.length;
            var milliseconds = date.getUTCMilliseconds();
            var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
            return (0, _index.default)(fractionalSeconds, token.length);
        }
    };
    var _default = formatters;
    exports.default = _default;
    module.exports = exports.default;
}(lightFormatters, lightFormatters.exports));
var lightFormattersExports = lightFormatters.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var _index = _interopRequireDefault(getUTCDayOfYearExports);
    var _index2 = _interopRequireDefault(getUTCISOWeekExports);
    var _index3 = _interopRequireDefault(getUTCISOWeekYearExports);
    var _index4 = _interopRequireDefault(getUTCWeekExports);
    var _index5 = _interopRequireDefault(getUTCWeekYearExports);
    var _index6 = _interopRequireDefault(addLeadingZerosExports);
    var _index7 = _interopRequireDefault(lightFormattersExports);
    var dayPeriodEnum = {
        am: 'am',
        pm: 'pm',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
    };
    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* | Milliseconds in day            |
     * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
     * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
     * |  d  | Day of month                   |  D  | Day of year                    |
     * |  e  | Local day of week              |  E  | Day of week                    |
     * |  f  |                                |  F* | Day of week in month           |
     * |  g* | Modified Julian day            |  G  | Era                            |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  i! | ISO day of week                |  I! | ISO week of year               |
     * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
     * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
     * |  l* | (deprecated)                   |  L  | Stand-alone month              |
     * |  m  | Minute                         |  M  | Month                          |
     * |  n  |                                |  N  |                                |
     * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
     * |  p! | Long localized time            |  P! | Long localized date            |
     * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
     * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
     * |  u  | Extended year                  |  U* | Cyclic year                    |
     * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
     * |  w  | Local week of year             |  W* | Week of month                  |
     * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
     * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
     * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     *
     * Letters marked by ! are non-standard, but implemented by date-fns:
     * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
     * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
     *   i.e. 7 for Sunday, 1 for Monday, etc.
     * - `I` is ISO week of year, as opposed to `w` which is local week of year.
     * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
     *   `R` is supposed to be used in conjunction with `I` and `i`
     *   for universal ISO week-numbering date, whereas
     *   `Y` is supposed to be used in conjunction with `w` and `e`
     *   for week-numbering date specific to the locale.
     * - `P` is long localized date format
     * - `p` is long localized time format
     */
    var formatters = {
        // Era
        G: function G(date, token, localize) {
            var era = date.getUTCFullYear() > 0 ? 1 : 0;
            switch (token) {
                // AD, BC
                case 'G':
                case 'GG':
                case 'GGG':
                    return localize.era(era, {
                        width: 'abbreviated'
                    });
                // A, B
                case 'GGGGG':
                    return localize.era(era, {
                        width: 'narrow'
                    });
                // Anno Domini, Before Christ
                case 'GGGG':
                default:
                    return localize.era(era, {
                        width: 'wide'
                    });
            }
        },
        // Year
        y: function y(date, token, localize) {
            // Ordinal number
            if (token === 'yo') {
                var signedYear = date.getUTCFullYear();
                // Returns 1 for 1 BC (which is year 0 in JavaScript)
                var year = signedYear > 0 ? signedYear : 1 - signedYear;
                return localize.ordinalNumber(year, {
                    unit: 'year'
                });
            }
            return _index7.default.y(date, token);
        },
        // Local week-numbering year
        Y: function Y(date, token, localize, options) {
            var signedWeekYear = (0, _index5.default)(date, options);
            // Returns 1 for 1 BC (which is year 0 in JavaScript)
            var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
            // Two digit year
            if (token === 'YY') {
                var twoDigitYear = weekYear % 100;
                return (0, _index6.default)(twoDigitYear, 2);
            }
            // Ordinal number
            if (token === 'Yo') {
                return localize.ordinalNumber(weekYear, {
                    unit: 'year'
                });
            }
            // Padding
            return (0, _index6.default)(weekYear, token.length);
        },
        // ISO week-numbering year
        R: function R(date, token) {
            var isoWeekYear = (0, _index3.default)(date);
            // Padding
            return (0, _index6.default)(isoWeekYear, token.length);
        },
        // Extended year. This is a single number designating the year of this calendar system.
        // The main difference between `y` and `u` localizers are B.C. years:
        // | Year | `y` | `u` |
        // |------|-----|-----|
        // | AC 1 |   1 |   1 |
        // | BC 1 |   1 |   0 |
        // | BC 2 |   2 |  -1 |
        // Also `yy` always returns the last two digits of a year,
        // while `uu` pads single digit years to 2 characters and returns other years unchanged.
        u: function u(date, token) {
            var year = date.getUTCFullYear();
            return (0, _index6.default)(year, token.length);
        },
        // Quarter
        Q: function Q(date, token, localize) {
            var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
            switch (token) {
                // 1, 2, 3, 4
                case 'Q':
                    return String(quarter);
                // 01, 02, 03, 04
                case 'QQ':
                    return (0, _index6.default)(quarter, 2);
                // 1st, 2nd, 3rd, 4th
                case 'Qo':
                    return localize.ordinalNumber(quarter, {
                        unit: 'quarter'
                    });
                // Q1, Q2, Q3, Q4
                case 'QQQ':
                    return localize.quarter(quarter, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                // 1, 2, 3, 4 (narrow quarter; could be not numerical)
                case 'QQQQQ':
                    return localize.quarter(quarter, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // 1st quarter, 2nd quarter, ...
                case 'QQQQ':
                default:
                    return localize.quarter(quarter, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // Stand-alone quarter
        q: function q(date, token, localize) {
            var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
            switch (token) {
                // 1, 2, 3, 4
                case 'q':
                    return String(quarter);
                // 01, 02, 03, 04
                case 'qq':
                    return (0, _index6.default)(quarter, 2);
                // 1st, 2nd, 3rd, 4th
                case 'qo':
                    return localize.ordinalNumber(quarter, {
                        unit: 'quarter'
                    });
                // Q1, Q2, Q3, Q4
                case 'qqq':
                    return localize.quarter(quarter, {
                        width: 'abbreviated',
                        context: 'standalone'
                    });
                // 1, 2, 3, 4 (narrow quarter; could be not numerical)
                case 'qqqqq':
                    return localize.quarter(quarter, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // 1st quarter, 2nd quarter, ...
                case 'qqqq':
                default:
                    return localize.quarter(quarter, {
                        width: 'wide',
                        context: 'standalone'
                    });
            }
        },
        // Month
        M: function M(date, token, localize) {
            var month = date.getUTCMonth();
            switch (token) {
                case 'M':
                case 'MM':
                    return _index7.default.M(date, token);
                // 1st, 2nd, ..., 12th
                case 'Mo':
                    return localize.ordinalNumber(month + 1, {
                        unit: 'month'
                    });
                // Jan, Feb, ..., Dec
                case 'MMM':
                    return localize.month(month, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                // J, F, ..., D
                case 'MMMMM':
                    return localize.month(month, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // January, February, ..., December
                case 'MMMM':
                default:
                    return localize.month(month, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // Stand-alone month
        L: function L(date, token, localize) {
            var month = date.getUTCMonth();
            switch (token) {
                // 1, 2, ..., 12
                case 'L':
                    return String(month + 1);
                // 01, 02, ..., 12
                case 'LL':
                    return (0, _index6.default)(month + 1, 2);
                // 1st, 2nd, ..., 12th
                case 'Lo':
                    return localize.ordinalNumber(month + 1, {
                        unit: 'month'
                    });
                // Jan, Feb, ..., Dec
                case 'LLL':
                    return localize.month(month, {
                        width: 'abbreviated',
                        context: 'standalone'
                    });
                // J, F, ..., D
                case 'LLLLL':
                    return localize.month(month, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // January, February, ..., December
                case 'LLLL':
                default:
                    return localize.month(month, {
                        width: 'wide',
                        context: 'standalone'
                    });
            }
        },
        // Local week of year
        w: function w(date, token, localize, options) {
            var week = (0, _index4.default)(date, options);
            if (token === 'wo') {
                return localize.ordinalNumber(week, {
                    unit: 'week'
                });
            }
            return (0, _index6.default)(week, token.length);
        },
        // ISO week of year
        I: function I(date, token, localize) {
            var isoWeek = (0, _index2.default)(date);
            if (token === 'Io') {
                return localize.ordinalNumber(isoWeek, {
                    unit: 'week'
                });
            }
            return (0, _index6.default)(isoWeek, token.length);
        },
        // Day of the month
        d: function d(date, token, localize) {
            if (token === 'do') {
                return localize.ordinalNumber(date.getUTCDate(), {
                    unit: 'date'
                });
            }
            return _index7.default.d(date, token);
        },
        // Day of year
        D: function D(date, token, localize) {
            var dayOfYear = (0, _index.default)(date);
            if (token === 'Do') {
                return localize.ordinalNumber(dayOfYear, {
                    unit: 'dayOfYear'
                });
            }
            return (0, _index6.default)(dayOfYear, token.length);
        },
        // Day of week
        E: function E(date, token, localize) {
            var dayOfWeek = date.getUTCDay();
            switch (token) {
                // Tue
                case 'E':
                case 'EE':
                case 'EEE':
                    return localize.day(dayOfWeek, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                // T
                case 'EEEEE':
                    return localize.day(dayOfWeek, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // Tu
                case 'EEEEEE':
                    return localize.day(dayOfWeek, {
                        width: 'short',
                        context: 'formatting'
                    });
                // Tuesday
                case 'EEEE':
                default:
                    return localize.day(dayOfWeek, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // Local day of week
        e: function e(date, token, localize, options) {
            var dayOfWeek = date.getUTCDay();
            var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
            switch (token) {
                // Numerical value (Nth day of week with current locale or weekStartsOn)
                case 'e':
                    return String(localDayOfWeek);
                // Padded numerical value
                case 'ee':
                    return (0, _index6.default)(localDayOfWeek, 2);
                // 1st, 2nd, ..., 7th
                case 'eo':
                    return localize.ordinalNumber(localDayOfWeek, {
                        unit: 'day'
                    });
                case 'eee':
                    return localize.day(dayOfWeek, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                // T
                case 'eeeee':
                    return localize.day(dayOfWeek, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // Tu
                case 'eeeeee':
                    return localize.day(dayOfWeek, {
                        width: 'short',
                        context: 'formatting'
                    });
                // Tuesday
                case 'eeee':
                default:
                    return localize.day(dayOfWeek, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // Stand-alone local day of week
        c: function c(date, token, localize, options) {
            var dayOfWeek = date.getUTCDay();
            var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
            switch (token) {
                // Numerical value (same as in `e`)
                case 'c':
                    return String(localDayOfWeek);
                // Padded numerical value
                case 'cc':
                    return (0, _index6.default)(localDayOfWeek, token.length);
                // 1st, 2nd, ..., 7th
                case 'co':
                    return localize.ordinalNumber(localDayOfWeek, {
                        unit: 'day'
                    });
                case 'ccc':
                    return localize.day(dayOfWeek, {
                        width: 'abbreviated',
                        context: 'standalone'
                    });
                // T
                case 'ccccc':
                    return localize.day(dayOfWeek, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // Tu
                case 'cccccc':
                    return localize.day(dayOfWeek, {
                        width: 'short',
                        context: 'standalone'
                    });
                // Tuesday
                case 'cccc':
                default:
                    return localize.day(dayOfWeek, {
                        width: 'wide',
                        context: 'standalone'
                    });
            }
        },
        // ISO day of week
        i: function i(date, token, localize) {
            var dayOfWeek = date.getUTCDay();
            var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
            switch (token) {
                // 2
                case 'i':
                    return String(isoDayOfWeek);
                // 02
                case 'ii':
                    return (0, _index6.default)(isoDayOfWeek, token.length);
                // 2nd
                case 'io':
                    return localize.ordinalNumber(isoDayOfWeek, {
                        unit: 'day'
                    });
                // Tue
                case 'iii':
                    return localize.day(dayOfWeek, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                // T
                case 'iiiii':
                    return localize.day(dayOfWeek, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // Tu
                case 'iiiiii':
                    return localize.day(dayOfWeek, {
                        width: 'short',
                        context: 'formatting'
                    });
                // Tuesday
                case 'iiii':
                default:
                    return localize.day(dayOfWeek, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // AM or PM
        a: function a(date, token, localize) {
            var hours = date.getUTCHours();
            var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
            switch (token) {
                case 'a':
                case 'aa':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                case 'aaa':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }).toLowerCase();
                case 'aaaaa':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                case 'aaaa':
                default:
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // AM, PM, midnight, noon
        b: function b(date, token, localize) {
            var hours = date.getUTCHours();
            var dayPeriodEnumValue;
            if (hours === 12) {
                dayPeriodEnumValue = dayPeriodEnum.noon;
            }
            else if (hours === 0) {
                dayPeriodEnumValue = dayPeriodEnum.midnight;
            }
            else {
                dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
            }
            switch (token) {
                case 'b':
                case 'bb':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                case 'bbb':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }).toLowerCase();
                case 'bbbbb':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                case 'bbbb':
                default:
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // in the morning, in the afternoon, in the evening, at night
        B: function B(date, token, localize) {
            var hours = date.getUTCHours();
            var dayPeriodEnumValue;
            if (hours >= 17) {
                dayPeriodEnumValue = dayPeriodEnum.evening;
            }
            else if (hours >= 12) {
                dayPeriodEnumValue = dayPeriodEnum.afternoon;
            }
            else if (hours >= 4) {
                dayPeriodEnumValue = dayPeriodEnum.morning;
            }
            else {
                dayPeriodEnumValue = dayPeriodEnum.night;
            }
            switch (token) {
                case 'B':
                case 'BB':
                case 'BBB':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                case 'BBBBB':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                case 'BBBB':
                default:
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // Hour [1-12]
        h: function h(date, token, localize) {
            if (token === 'ho') {
                var hours = date.getUTCHours() % 12;
                if (hours === 0)
                    hours = 12;
                return localize.ordinalNumber(hours, {
                    unit: 'hour'
                });
            }
            return _index7.default.h(date, token);
        },
        // Hour [0-23]
        H: function H(date, token, localize) {
            if (token === 'Ho') {
                return localize.ordinalNumber(date.getUTCHours(), {
                    unit: 'hour'
                });
            }
            return _index7.default.H(date, token);
        },
        // Hour [0-11]
        K: function K(date, token, localize) {
            var hours = date.getUTCHours() % 12;
            if (token === 'Ko') {
                return localize.ordinalNumber(hours, {
                    unit: 'hour'
                });
            }
            return (0, _index6.default)(hours, token.length);
        },
        // Hour [1-24]
        k: function k(date, token, localize) {
            var hours = date.getUTCHours();
            if (hours === 0)
                hours = 24;
            if (token === 'ko') {
                return localize.ordinalNumber(hours, {
                    unit: 'hour'
                });
            }
            return (0, _index6.default)(hours, token.length);
        },
        // Minute
        m: function m(date, token, localize) {
            if (token === 'mo') {
                return localize.ordinalNumber(date.getUTCMinutes(), {
                    unit: 'minute'
                });
            }
            return _index7.default.m(date, token);
        },
        // Second
        s: function s(date, token, localize) {
            if (token === 'so') {
                return localize.ordinalNumber(date.getUTCSeconds(), {
                    unit: 'second'
                });
            }
            return _index7.default.s(date, token);
        },
        // Fraction of second
        S: function S(date, token) {
            return _index7.default.S(date, token);
        },
        // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
        X: function X(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timezoneOffset = originalDate.getTimezoneOffset();
            if (timezoneOffset === 0) {
                return 'Z';
            }
            switch (token) {
                // Hours and optional minutes
                case 'X':
                    return formatTimezoneWithOptionalMinutes(timezoneOffset);
                // Hours, minutes and optional seconds without `:` delimiter
                // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
                // so this token always has the same output as `XX`
                case 'XXXX':
                case 'XX':
                    // Hours and minutes without `:` delimiter
                    return formatTimezone(timezoneOffset);
                // Hours, minutes and optional seconds with `:` delimiter
                // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
                // so this token always has the same output as `XXX`
                case 'XXXXX':
                case 'XXX': // Hours and minutes with `:` delimiter
                default:
                    return formatTimezone(timezoneOffset, ':');
            }
        },
        // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
        x: function x(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timezoneOffset = originalDate.getTimezoneOffset();
            switch (token) {
                // Hours and optional minutes
                case 'x':
                    return formatTimezoneWithOptionalMinutes(timezoneOffset);
                // Hours, minutes and optional seconds without `:` delimiter
                // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
                // so this token always has the same output as `xx`
                case 'xxxx':
                case 'xx':
                    // Hours and minutes without `:` delimiter
                    return formatTimezone(timezoneOffset);
                // Hours, minutes and optional seconds with `:` delimiter
                // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
                // so this token always has the same output as `xxx`
                case 'xxxxx':
                case 'xxx': // Hours and minutes with `:` delimiter
                default:
                    return formatTimezone(timezoneOffset, ':');
            }
        },
        // Timezone (GMT)
        O: function O(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timezoneOffset = originalDate.getTimezoneOffset();
            switch (token) {
                // Short
                case 'O':
                case 'OO':
                case 'OOO':
                    return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
                // Long
                case 'OOOO':
                default:
                    return 'GMT' + formatTimezone(timezoneOffset, ':');
            }
        },
        // Timezone (specific non-location)
        z: function z(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timezoneOffset = originalDate.getTimezoneOffset();
            switch (token) {
                // Short
                case 'z':
                case 'zz':
                case 'zzz':
                    return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
                // Long
                case 'zzzz':
                default:
                    return 'GMT' + formatTimezone(timezoneOffset, ':');
            }
        },
        // Seconds timestamp
        t: function t(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timestamp = Math.floor(originalDate.getTime() / 1000);
            return (0, _index6.default)(timestamp, token.length);
        },
        // Milliseconds timestamp
        T: function T(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timestamp = originalDate.getTime();
            return (0, _index6.default)(timestamp, token.length);
        }
    };
    function formatTimezoneShort(offset, dirtyDelimiter) {
        var sign = offset > 0 ? '-' : '+';
        var absOffset = Math.abs(offset);
        var hours = Math.floor(absOffset / 60);
        var minutes = absOffset % 60;
        if (minutes === 0) {
            return sign + String(hours);
        }
        var delimiter = dirtyDelimiter || '';
        return sign + String(hours) + delimiter + (0, _index6.default)(minutes, 2);
    }
    function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
        if (offset % 60 === 0) {
            var sign = offset > 0 ? '-' : '+';
            return sign + (0, _index6.default)(Math.abs(offset) / 60, 2);
        }
        return formatTimezone(offset, dirtyDelimiter);
    }
    function formatTimezone(offset, dirtyDelimiter) {
        var delimiter = dirtyDelimiter || '';
        var sign = offset > 0 ? '-' : '+';
        var absOffset = Math.abs(offset);
        var hours = (0, _index6.default)(Math.floor(absOffset / 60), 2);
        var minutes = (0, _index6.default)(absOffset % 60, 2);
        return sign + hours + delimiter + minutes;
    }
    var _default = formatters;
    exports.default = _default;
    module.exports = exports.default;
}(formatters$4, formatters$4.exports));
var formattersExports = formatters$4.exports;

var longFormatters$2 = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
        switch (pattern) {
            case 'P':
                return formatLong.date({
                    width: 'short'
                });
            case 'PP':
                return formatLong.date({
                    width: 'medium'
                });
            case 'PPP':
                return formatLong.date({
                    width: 'long'
                });
            case 'PPPP':
            default:
                return formatLong.date({
                    width: 'full'
                });
        }
    };
    var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
        switch (pattern) {
            case 'p':
                return formatLong.time({
                    width: 'short'
                });
            case 'pp':
                return formatLong.time({
                    width: 'medium'
                });
            case 'ppp':
                return formatLong.time({
                    width: 'long'
                });
            case 'pppp':
            default:
                return formatLong.time({
                    width: 'full'
                });
        }
    };
    var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
        var matchResult = pattern.match(/(P+)(p+)?/) || [];
        var datePattern = matchResult[1];
        var timePattern = matchResult[2];
        if (!timePattern) {
            return dateLongFormatter(pattern, formatLong);
        }
        var dateTimeFormat;
        switch (datePattern) {
            case 'P':
                dateTimeFormat = formatLong.dateTime({
                    width: 'short'
                });
                break;
            case 'PP':
                dateTimeFormat = formatLong.dateTime({
                    width: 'medium'
                });
                break;
            case 'PPP':
                dateTimeFormat = formatLong.dateTime({
                    width: 'long'
                });
                break;
            case 'PPPP':
            default:
                dateTimeFormat = formatLong.dateTime({
                    width: 'full'
                });
                break;
        }
        return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
    };
    var longFormatters = {
        p: timeLongFormatter,
        P: dateTimeLongFormatter
    };
    var _default = longFormatters;
    exports.default = _default;
    module.exports = exports.default;
}(longFormatters$2, longFormatters$2.exports));
var longFormattersExports = longFormatters$2.exports;

var getTimezoneOffsetInMilliseconds$1 = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = getTimezoneOffsetInMilliseconds;
    /**
     * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
     * They usually appear for dates that denote time before the timezones were introduced
     * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
     * and GMT+01:00:00 after that date)
     *
     * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
     * which would lead to incorrect calculations.
     *
     * This function returns the timezone offset in milliseconds that takes seconds in account.
     */
    function getTimezoneOffsetInMilliseconds(date) {
        var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
        utcDate.setUTCFullYear(date.getFullYear());
        return date.getTime() - utcDate.getTime();
    }
    module.exports = exports.default;
}(getTimezoneOffsetInMilliseconds$1, getTimezoneOffsetInMilliseconds$1.exports));
var getTimezoneOffsetInMillisecondsExports = getTimezoneOffsetInMilliseconds$1.exports;

var protectedTokens = {};

Object.defineProperty(protectedTokens, "__esModule", {
    value: true
});
protectedTokens.isProtectedDayOfYearToken = isProtectedDayOfYearToken$1;
protectedTokens.isProtectedWeekYearToken = isProtectedWeekYearToken$1;
protectedTokens.throwProtectedError = throwProtectedError$1;
var protectedDayOfYearTokens$1 = ['D', 'DD'];
var protectedWeekYearTokens$1 = ['YY', 'YYYY'];
function isProtectedDayOfYearToken$1(token) {
    return protectedDayOfYearTokens$1.indexOf(token) !== -1;
}
function isProtectedWeekYearToken$1(token) {
    return protectedWeekYearTokens$1.indexOf(token) !== -1;
}
function throwProtectedError$1(token, format, input) {
    if (token === 'YYYY') {
        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
    else if (token === 'YY') {
        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
    else if (token === 'D') {
        throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
    else if (token === 'DD') {
        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
}

var defaultLocale = {exports: {}};

var enUS$1 = {exports: {}};

var formatDistance$2 = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var formatDistanceLocale = {
        lessThanXSeconds: {
            one: 'less than a second',
            other: 'less than {{count}} seconds'
        },
        xSeconds: {
            one: '1 second',
            other: '{{count}} seconds'
        },
        halfAMinute: 'half a minute',
        lessThanXMinutes: {
            one: 'less than a minute',
            other: 'less than {{count}} minutes'
        },
        xMinutes: {
            one: '1 minute',
            other: '{{count}} minutes'
        },
        aboutXHours: {
            one: 'about 1 hour',
            other: 'about {{count}} hours'
        },
        xHours: {
            one: '1 hour',
            other: '{{count}} hours'
        },
        xDays: {
            one: '1 day',
            other: '{{count}} days'
        },
        aboutXWeeks: {
            one: 'about 1 week',
            other: 'about {{count}} weeks'
        },
        xWeeks: {
            one: '1 week',
            other: '{{count}} weeks'
        },
        aboutXMonths: {
            one: 'about 1 month',
            other: 'about {{count}} months'
        },
        xMonths: {
            one: '1 month',
            other: '{{count}} months'
        },
        aboutXYears: {
            one: 'about 1 year',
            other: 'about {{count}} years'
        },
        xYears: {
            one: '1 year',
            other: '{{count}} years'
        },
        overXYears: {
            one: 'over 1 year',
            other: 'over {{count}} years'
        },
        almostXYears: {
            one: 'almost 1 year',
            other: 'almost {{count}} years'
        }
    };
    var formatDistance = function formatDistance(token, count, options) {
        var result;
        var tokenValue = formatDistanceLocale[token];
        if (typeof tokenValue === 'string') {
            result = tokenValue;
        }
        else if (count === 1) {
            result = tokenValue.one;
        }
        else {
            result = tokenValue.other.replace('{{count}}', count.toString());
        }
        if (options !== null && options !== void 0 && options.addSuffix) {
            if (options.comparison && options.comparison > 0) {
                return 'in ' + result;
            }
            else {
                return result + ' ago';
            }
        }
        return result;
    };
    var _default = formatDistance;
    exports.default = _default;
    module.exports = exports.default;
}(formatDistance$2, formatDistance$2.exports));
var formatDistanceExports$1 = formatDistance$2.exports;

var formatLong$2 = {exports: {}};

var buildFormatLongFn$1 = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = buildFormatLongFn;
    function buildFormatLongFn(args) {
        return function () {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            // TODO: Remove String()
            var width = options.width ? String(options.width) : args.defaultWidth;
            var format = args.formats[width] || args.formats[args.defaultWidth];
            return format;
        };
    }
    module.exports = exports.default;
}(buildFormatLongFn$1, buildFormatLongFn$1.exports));
var buildFormatLongFnExports = buildFormatLongFn$1.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var _index = _interopRequireDefault(buildFormatLongFnExports);
    var dateFormats = {
        full: 'EEEE, MMMM do, y',
        long: 'MMMM do, y',
        medium: 'MMM d, y',
        short: 'MM/dd/yyyy'
    };
    var timeFormats = {
        full: 'h:mm:ss a zzzz',
        long: 'h:mm:ss a z',
        medium: 'h:mm:ss a',
        short: 'h:mm a'
    };
    var dateTimeFormats = {
        full: "{{date}} 'at' {{time}}",
        long: "{{date}} 'at' {{time}}",
        medium: '{{date}}, {{time}}',
        short: '{{date}}, {{time}}'
    };
    var formatLong = {
        date: (0, _index.default)({
            formats: dateFormats,
            defaultWidth: 'full'
        }),
        time: (0, _index.default)({
            formats: timeFormats,
            defaultWidth: 'full'
        }),
        dateTime: (0, _index.default)({
            formats: dateTimeFormats,
            defaultWidth: 'full'
        })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
}(formatLong$2, formatLong$2.exports));
var formatLongExports$1 = formatLong$2.exports;

var formatRelative$2 = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var formatRelativeLocale = {
        lastWeek: "'last' eeee 'at' p",
        yesterday: "'yesterday at' p",
        today: "'today at' p",
        tomorrow: "'tomorrow at' p",
        nextWeek: "eeee 'at' p",
        other: 'P'
    };
    var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
        return formatRelativeLocale[token];
    };
    var _default = formatRelative;
    exports.default = _default;
    module.exports = exports.default;
}(formatRelative$2, formatRelative$2.exports));
var formatRelativeExports$1 = formatRelative$2.exports;

var localize$2 = {exports: {}};

var buildLocalizeFn$1 = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = buildLocalizeFn;
    function buildLocalizeFn(args) {
        return function (dirtyIndex, options) {
            var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
            var valuesArray;
            if (context === 'formatting' && args.formattingValues) {
                var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
                var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
                valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
            }
            else {
                var _defaultWidth = args.defaultWidth;
                var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
                valuesArray = args.values[_width] || args.values[_defaultWidth];
            }
            var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
            // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
            return valuesArray[index];
        };
    }
    module.exports = exports.default;
}(buildLocalizeFn$1, buildLocalizeFn$1.exports));
var buildLocalizeFnExports = buildLocalizeFn$1.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var _index = _interopRequireDefault(buildLocalizeFnExports);
    var eraValues = {
        narrow: ['B', 'A'],
        abbreviated: ['BC', 'AD'],
        wide: ['Before Christ', 'Anno Domini']
    };
    var quarterValues = {
        narrow: ['1', '2', '3', '4'],
        abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
        wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
    };
    // Note: in English, the names of days of the week and months are capitalized.
    // If you are making a new locale based on this one, check if the same is true for the language you're working on.
    // Generally, formatted dates should look like they are in the middle of a sentence,
    // e.g. in Spanish language the weekdays and months should be in the lowercase.
    var monthValues = {
        narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
        abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    };
    var dayValues = {
        narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
        short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
        abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    };
    var dayPeriodValues = {
        narrow: {
            am: 'a',
            pm: 'p',
            midnight: 'mi',
            noon: 'n',
            morning: 'morning',
            afternoon: 'afternoon',
            evening: 'evening',
            night: 'night'
        },
        abbreviated: {
            am: 'AM',
            pm: 'PM',
            midnight: 'midnight',
            noon: 'noon',
            morning: 'morning',
            afternoon: 'afternoon',
            evening: 'evening',
            night: 'night'
        },
        wide: {
            am: 'a.m.',
            pm: 'p.m.',
            midnight: 'midnight',
            noon: 'noon',
            morning: 'morning',
            afternoon: 'afternoon',
            evening: 'evening',
            night: 'night'
        }
    };
    var formattingDayPeriodValues = {
        narrow: {
            am: 'a',
            pm: 'p',
            midnight: 'mi',
            noon: 'n',
            morning: 'in the morning',
            afternoon: 'in the afternoon',
            evening: 'in the evening',
            night: 'at night'
        },
        abbreviated: {
            am: 'AM',
            pm: 'PM',
            midnight: 'midnight',
            noon: 'noon',
            morning: 'in the morning',
            afternoon: 'in the afternoon',
            evening: 'in the evening',
            night: 'at night'
        },
        wide: {
            am: 'a.m.',
            pm: 'p.m.',
            midnight: 'midnight',
            noon: 'noon',
            morning: 'in the morning',
            afternoon: 'in the afternoon',
            evening: 'in the evening',
            night: 'at night'
        }
    };
    var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
        var number = Number(dirtyNumber);
        // If ordinal numbers depend on context, for example,
        // if they are different for different grammatical genders,
        // use `options.unit`.
        //
        // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
        // 'day', 'hour', 'minute', 'second'.
        var rem100 = number % 100;
        if (rem100 > 20 || rem100 < 10) {
            switch (rem100 % 10) {
                case 1:
                    return number + 'st';
                case 2:
                    return number + 'nd';
                case 3:
                    return number + 'rd';
            }
        }
        return number + 'th';
    };
    var localize = {
        ordinalNumber: ordinalNumber,
        era: (0, _index.default)({
            values: eraValues,
            defaultWidth: 'wide'
        }),
        quarter: (0, _index.default)({
            values: quarterValues,
            defaultWidth: 'wide',
            argumentCallback: function argumentCallback(quarter) {
                return quarter - 1;
            }
        }),
        month: (0, _index.default)({
            values: monthValues,
            defaultWidth: 'wide'
        }),
        day: (0, _index.default)({
            values: dayValues,
            defaultWidth: 'wide'
        }),
        dayPeriod: (0, _index.default)({
            values: dayPeriodValues,
            defaultWidth: 'wide',
            formattingValues: formattingDayPeriodValues,
            defaultFormattingWidth: 'wide'
        })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
}(localize$2, localize$2.exports));
var localizeExports$1 = localize$2.exports;

var match$2 = {exports: {}};

var buildMatchFn$1 = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = buildMatchFn;
    function buildMatchFn(args) {
        return function (string) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var width = options.width;
            var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
            var matchResult = string.match(matchPattern);
            if (!matchResult) {
                return null;
            }
            var matchedString = matchResult[0];
            var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
            var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
                return pattern.test(matchedString);
            }) : findKey(parsePatterns, function (pattern) {
                return pattern.test(matchedString);
            });
            var value;
            value = args.valueCallback ? args.valueCallback(key) : key;
            value = options.valueCallback ? options.valueCallback(value) : value;
            var rest = string.slice(matchedString.length);
            return {
                value: value,
                rest: rest
            };
        };
    }
    function findKey(object, predicate) {
        for (var key in object) {
            if (object.hasOwnProperty(key) && predicate(object[key])) {
                return key;
            }
        }
        return undefined;
    }
    function findIndex(array, predicate) {
        for (var key = 0; key < array.length; key++) {
            if (predicate(array[key])) {
                return key;
            }
        }
        return undefined;
    }
    module.exports = exports.default;
}(buildMatchFn$1, buildMatchFn$1.exports));
var buildMatchFnExports = buildMatchFn$1.exports;

var buildMatchPatternFn$1 = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = buildMatchPatternFn;
    function buildMatchPatternFn(args) {
        return function (string) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var matchResult = string.match(args.matchPattern);
            if (!matchResult)
                return null;
            var matchedString = matchResult[0];
            var parseResult = string.match(args.parsePattern);
            if (!parseResult)
                return null;
            var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
            value = options.valueCallback ? options.valueCallback(value) : value;
            var rest = string.slice(matchedString.length);
            return {
                value: value,
                rest: rest
            };
        };
    }
    module.exports = exports.default;
}(buildMatchPatternFn$1, buildMatchPatternFn$1.exports));
var buildMatchPatternFnExports = buildMatchPatternFn$1.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var _index = _interopRequireDefault(buildMatchFnExports);
    var _index2 = _interopRequireDefault(buildMatchPatternFnExports);
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
        narrow: /^(b|a)/i,
        abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
        wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
        any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
        narrow: /^[1234]/i,
        abbreviated: /^q[1234]/i,
        wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
        any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
        narrow: /^[jfmasond]/i,
        abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
        wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
        narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
        any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
        narrow: /^[smtwf]/i,
        short: /^(su|mo|tu|we|th|fr|sa)/i,
        abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
        wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
        narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
        any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
        narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
        any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
        any: {
            am: /^a/i,
            pm: /^p/i,
            midnight: /^mi/i,
            noon: /^no/i,
            morning: /morning/i,
            afternoon: /afternoon/i,
            evening: /evening/i,
            night: /night/i
        }
    };
    var match = {
        ordinalNumber: (0, _index2.default)({
            matchPattern: matchOrdinalNumberPattern,
            parsePattern: parseOrdinalNumberPattern,
            valueCallback: function valueCallback(value) {
                return parseInt(value, 10);
            }
        }),
        era: (0, _index.default)({
            matchPatterns: matchEraPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseEraPatterns,
            defaultParseWidth: 'any'
        }),
        quarter: (0, _index.default)({
            matchPatterns: matchQuarterPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseQuarterPatterns,
            defaultParseWidth: 'any',
            valueCallback: function valueCallback(index) {
                return index + 1;
            }
        }),
        month: (0, _index.default)({
            matchPatterns: matchMonthPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseMonthPatterns,
            defaultParseWidth: 'any'
        }),
        day: (0, _index.default)({
            matchPatterns: matchDayPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseDayPatterns,
            defaultParseWidth: 'any'
        }),
        dayPeriod: (0, _index.default)({
            matchPatterns: matchDayPeriodPatterns,
            defaultMatchWidth: 'any',
            parsePatterns: parseDayPeriodPatterns,
            defaultParseWidth: 'any'
        })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
}(match$2, match$2.exports));
var matchExports$1 = match$2.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var _index = _interopRequireDefault(formatDistanceExports$1);
    var _index2 = _interopRequireDefault(formatLongExports$1);
    var _index3 = _interopRequireDefault(formatRelativeExports$1);
    var _index4 = _interopRequireDefault(localizeExports$1);
    var _index5 = _interopRequireDefault(matchExports$1);
    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (United States).
     * @language English
     * @iso-639-2 eng
     * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
     * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
     */
    var locale = {
        code: 'en-US',
        formatDistance: _index.default,
        formatLong: _index2.default,
        formatRelative: _index3.default,
        localize: _index4.default,
        match: _index5.default,
        options: {
            weekStartsOn: 0 /* Sunday */,
            firstWeekContainsDate: 1
        }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
}(enUS$1, enUS$1.exports));
var enUSExports = enUS$1.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var _index = _interopRequireDefault(enUSExports);
    var _default = _index.default;
    exports.default = _default;
    module.exports = exports.default;
}(defaultLocale, defaultLocale.exports));
var defaultLocaleExports = defaultLocale.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = format;
    var _index = _interopRequireDefault(isValidExports);
    var _index2 = _interopRequireDefault(subMillisecondsExports);
    var _index3 = _interopRequireDefault(toDateExports);
    var _index4 = _interopRequireDefault(formattersExports);
    var _index5 = _interopRequireDefault(longFormattersExports);
    var _index6 = _interopRequireDefault(getTimezoneOffsetInMillisecondsExports);
    var _index7 = protectedTokens;
    var _index8 = _interopRequireDefault(toIntegerExports);
    var _index9 = _interopRequireDefault(requiredArgsExports);
    var _index10 = defaultOptions$2;
    var _index11 = _interopRequireDefault(defaultLocaleExports);
    // This RegExp consists of three parts separated by `|`:
    // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
    //   (one of the certain letters followed by `o`)
    // - (\w)\1* matches any sequences of the same letter
    // - '' matches two quote characters in a row
    // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
    //   except a single quote symbol, which ends the sequence.
    //   Two quote characters do not end the sequence.
    //   If there is no matching single quote
    //   then the sequence will continue until the end of the string.
    // - . matches any single character unmatched by previous parts of the RegExps
    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
    // This RegExp catches symbols escaped by quotes, and also
    // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    /**
     * @name format
     * @category Common Helpers
     * @summary Format the date.
     *
     * @description
     * Return the formatted date string in the given format. The result may vary by locale.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * The characters wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     * (see the last example)
     *
     * Format of the string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 7 below the table).
     *
     * Accepted patterns:
     * | Unit                            | Pattern | Result examples                   | Notes |
     * |---------------------------------|---------|-----------------------------------|-------|
     * | Era                             | G..GGG  | AD, BC                            |       |
     * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 | GGGGG   | A, B                              |       |
     * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
     * |                                 | yy      | 44, 01, 00, 17                    | 5     |
     * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
     * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
     * |                                 | yyyyy   | ...                               | 3,5   |
     * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
     * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
     * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
     * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
     * |                                 | YYYYY   | ...                               | 3,5   |
     * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
     * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
     * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
     * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
     * |                                 | RRRRR   | ...                               | 3,5,7 |
     * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
     * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
     * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
     * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
     * |                                 | uuuuu   | ...                               | 3,5   |
     * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
     * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | QQ      | 01, 02, 03, 04                    |       |
     * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
     * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | qq      | 01, 02, 03, 04                    |       |
     * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
     * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
     * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | MM      | 01, 02, ..., 12                   |       |
     * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 | MMMM    | January, February, ..., December  | 2     |
     * |                                 | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
     * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | LL      | 01, 02, ..., 12                   |       |
     * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 | LLLL    | January, February, ..., December  | 2     |
     * |                                 | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | w       | 1, 2, ..., 53                     |       |
     * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
     * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | II      | 01, 02, ..., 53                   | 7     |
     * | Day of month                    | d       | 1, 2, ..., 31                     |       |
     * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
     * |                                 | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
     * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
     * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
     * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 | DDDD    | ...                               | 3     |
     * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
     * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
     * |                                 | ii      | 01, 02, ..., 07                   | 7     |
     * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
     * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
     * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
     * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
     * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | ee      | 02, 03, ..., 01                   |       |
     * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | cc      | 02, 03, ..., 01                   |       |
     * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | AM, PM                          | a..aa   | AM, PM                            |       |
     * |                                 | aaa     | am, pm                            |       |
     * |                                 | aaaa    | a.m., p.m.                        | 2     |
     * |                                 | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
     * |                                 | bbb     | am, pm, noon, midnight            |       |
     * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
     * |                                 | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
     * |                                 | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
     * |                                 | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
     * |                                 | KK      | 01, 02, ..., 11, 00               |       |
     * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
     * |                                 | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          | m       | 0, 1, ..., 59                     |       |
     * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | mm      | 00, 01, ..., 59                   |       |
     * | Second                          | s       | 0, 1, ..., 59                     |       |
     * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | ss      | 00, 01, ..., 59                   |       |
     * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
     * |                                 | SS      | 00, 01, ..., 99                   |       |
     * |                                 | SSS     | 000, 001, ..., 999                |       |
     * |                                 | SSSS    | ...                               | 3     |
     * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
     * |                                 | XX      | -0800, +0530, Z                   |       |
     * |                                 | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
     * |                                 | xx      | -0800, +0530, +0000               |       |
     * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
     * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
     * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
     * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
     * | Seconds timestamp               | t       | 512969520                         | 7     |
     * |                                 | tt      | ...                               | 3,7   |
     * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
     * |                                 | TT      | ...                               | 3,7   |
     * | Long localized date             | P       | 04/29/1453                        | 7     |
     * |                                 | PP      | Apr 29, 1453                      | 7     |
     * |                                 | PPP     | April 29th, 1453                  | 7     |
     * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
     * | Long localized time             | p       | 12:00 AM                          | 7     |
     * |                                 | pp      | 12:00:00 AM                       | 7     |
     * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
     * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
     * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
     * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
     * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
     * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
     *    the output will be the same as default pattern for this unit, usually
     *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
     *    are marked with "2" in the last column of the table.
     *
     *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
     *
     * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
     *    The output will be padded with zeros to match the length of the pattern.
     *
     *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
     *
     * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 5. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` always returns the last two digits of a year,
     *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
     *
     *    | Year | `yy` | `uu` |
     *    |------|------|------|
     *    | 1    |   01 |   01 |
     *    | 14   |   14 |   14 |
     *    | 376  |   76 |  376 |
     *    | 1453 |   53 | 1453 |
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
     *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
     *
     * 6. Specific non-location timezones are currently unavailable in `date-fns`,
     *    so right now these tokens fall back to GMT timezones.
     *
     * 7. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `t`: seconds timestamp
     *    - `T`: milliseconds timestamp
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
     *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
     *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * @param {Date|Number} date - the original date
     * @param {String} format - the string of tokens
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
     * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @returns {String} the formatted date string
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `date` must not be Invalid Date
     * @throws {RangeError} `options.locale` must contain `localize` property
     * @throws {RangeError} `options.locale` must contain `formatLong` property
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} format string contains an unescaped latin alphabet character
     *
     * @example
     * // Represent 11 February 2014 in middle-endian format:
     * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
     * //=> '02/11/2014'
     *
     * @example
     * // Represent 2 July 2014 in Esperanto:
     * import { eoLocale } from 'date-fns/locale/eo'
     * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
     *   locale: eoLocale
     * })
     * //=> '2-a de julio 2014'
     *
     * @example
     * // Escape string by single quote characters:
     * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
     * //=> "3 o'clock"
     */
    function format(dirtyDate, dirtyFormatStr, options) {
        var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
        (0, _index9.default)(2, arguments);
        var formatStr = String(dirtyFormatStr);
        var defaultOptions = (0, _index10.getDefaultOptions)();
        var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _index11.default;
        var firstWeekContainsDate = (0, _index8.default)((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
        // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
        if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
            throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
        }
        var weekStartsOn = (0, _index8.default)((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
        // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
            throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
        }
        if (!locale.localize) {
            throw new RangeError('locale must contain localize property');
        }
        if (!locale.formatLong) {
            throw new RangeError('locale must contain formatLong property');
        }
        var originalDate = (0, _index3.default)(dirtyDate);
        if (!(0, _index.default)(originalDate)) {
            throw new RangeError('Invalid time value');
        }
        // Convert the date in system timezone to the same date in UTC+00:00 timezone.
        // This ensures that when UTC functions will be implemented, locales will be compatible with them.
        // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
        var timezoneOffset = (0, _index6.default)(originalDate);
        var utcDate = (0, _index2.default)(originalDate, timezoneOffset);
        var formatterOptions = {
            firstWeekContainsDate: firstWeekContainsDate,
            weekStartsOn: weekStartsOn,
            locale: locale,
            _originalDate: originalDate
        };
        var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
            var firstCharacter = substring[0];
            if (firstCharacter === 'p' || firstCharacter === 'P') {
                var longFormatter = _index5.default[firstCharacter];
                return longFormatter(substring, locale.formatLong);
            }
            return substring;
        }).join('').match(formattingTokensRegExp).map(function (substring) {
            // Replace two single quote characters with one single quote character
            if (substring === "''") {
                return "'";
            }
            var firstCharacter = substring[0];
            if (firstCharacter === "'") {
                return cleanEscapedString(substring);
            }
            var formatter = _index4.default[firstCharacter];
            if (formatter) {
                if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && (0, _index7.isProtectedWeekYearToken)(substring)) {
                    (0, _index7.throwProtectedError)(substring, dirtyFormatStr, String(dirtyDate));
                }
                if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && (0, _index7.isProtectedDayOfYearToken)(substring)) {
                    (0, _index7.throwProtectedError)(substring, dirtyFormatStr, String(dirtyDate));
                }
                return formatter(utcDate, substring, locale.localize, formatterOptions);
            }
            if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
                throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
            }
            return substring;
        }).join('');
        return result;
    }
    function cleanEscapedString(input) {
        var matched = input.match(escapedStringRegExp);
        if (!matched) {
            return input;
        }
        return matched[1].replace(doubleQuoteRegExp, "'");
    }
    module.exports = exports.default;
}(format$2, format$2.exports));
var formatExports = format$2.exports;
var format$1 = /*@__PURE__*/ getDefaultExportFromCjs(formatExports);

var DatePickerErrorType;
(function (DatePickerErrorType) {
    DatePickerErrorType["invalidFormat"] = "invalidFormat";
    DatePickerErrorType["dateDisabled"] = "dateDisabled";
    DatePickerErrorType["notInRange"] = "notInRange";
    DatePickerErrorType["defaultError"] = "defaultError";
})(DatePickerErrorType || (DatePickerErrorType = {}));
var DateRangePickerErrorType;
(function (DateRangePickerErrorType) {
    DateRangePickerErrorType["invalidFormat"] = "invalidFormat";
    DateRangePickerErrorType["notInRange"] = "notInRange";
    DateRangePickerErrorType["invalidRelation"] = "invalidRelation";
    DateRangePickerErrorType["invalidRange"] = "invalidRange";
    DateRangePickerErrorType["defaultError"] = "defaultError";
})(DateRangePickerErrorType || (DateRangePickerErrorType = {}));

function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
    } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
}

function toInteger(dirtyNumber) {
    if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
        return NaN;
    }
    var number = Number(dirtyNumber);
    if (isNaN(number)) {
        return number;
    }
    return number < 0 ? Math.ceil(number) : Math.floor(number);
}

function requiredArgs(required, args) {
    if (args.length < required) {
        throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
    }
}

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */
function toDate(argument) {
    requiredArgs(1, arguments);
    var argStr = Object.prototype.toString.call(argument);
    // Clone the date
    if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
        // Prevent the date to lose the milliseconds when passed to new Date() in IE10
        return new Date(argument.getTime());
    }
    else if (typeof argument === 'number' || argStr === '[object Number]') {
        return new Date(argument);
    }
    else {
        if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
            // eslint-disable-next-line no-console
            console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
            // eslint-disable-next-line no-console
            console.warn(new Error().stack);
        }
        return new Date(NaN);
    }
}

/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} - the new date with the days added
 * @throws {TypeError} - 2 arguments required
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */
function addDays$2(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var amount = toInteger(dirtyAmount);
    if (isNaN(amount)) {
        return new Date(NaN);
    }
    if (!amount) {
        // If 0 days, no-op to avoid changing times in the hour before end of DST
        return date;
    }
    date.setDate(date.getDate() + amount);
    return date;
}

/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * const result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 */
function addMonths(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var amount = toInteger(dirtyAmount);
    if (isNaN(amount)) {
        return new Date(NaN);
    }
    if (!amount) {
        // If 0 months, no-op to avoid changing times in the hour before end of DST
        return date;
    }
    var dayOfMonth = date.getDate();
    // The JS Date object supports date math by accepting out-of-bounds values for
    // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
    // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
    // want except that dates will wrap around the end of a month, meaning that
    // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
    // we'll default to the end of the desired month by adding 1 to the desired
    // month and using a date of 0 to back up one day to the end of the desired
    // month.
    var endOfDesiredMonth = new Date(date.getTime());
    endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
    var daysInMonth = endOfDesiredMonth.getDate();
    if (dayOfMonth >= daysInMonth) {
        // If we're already at the end of the month, then this is the correct date
        // and we're done.
        return endOfDesiredMonth;
    }
    else {
        // Otherwise, we now know that setting the original day-of-month value won't
        // cause an overflow, so set the desired day-of-month. Note that we can't
        // just set the date of `endOfDesiredMonth` because that object may have had
        // its time changed in the unusual case where where a DST transition was on
        // the last day of the month and its local time was in the hour skipped or
        // repeated next to a DST transition.  So we use `date` instead which is
        // guaranteed to still have the original time.
        date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
        return date;
    }
}

/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */
function addMilliseconds(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var timestamp = toDate(dirtyDate).getTime();
    var amount = toInteger(dirtyAmount);
    return new Date(timestamp + amount);
}

var defaultOptions = {};
function getDefaultOptions() {
    return defaultOptions;
}

/**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the start of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfWeek(dirtyDate, options) {
    var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var defaultOptions = getDefaultOptions();
    var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }
    var date = toDate(dirtyDate);
    var day = date.getDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setDate(date.getDate() - diff);
    date.setHours(0, 0, 0, 0);
    return date;
}

/**
 * @name startOfISOWeek
 * @category ISO Week Helpers
 * @summary Return the start of an ISO week for the given date.
 *
 * @description
 * Return the start of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of an ISO week
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of an ISO week for 2 September 2014 11:55:00:
 * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    return startOfWeek(dirtyDate, {
        weekStartsOn: 1
    });
}

/**
 * @name getISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the ISO week-numbering year of the given date.
 *
 * @description
 * Get the ISO week-numbering year of the given date,
 * which always starts 3 days before the year's first Thursday.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the ISO week-numbering year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which ISO-week numbering year is 2 January 2005?
 * const result = getISOWeekYear(new Date(2005, 0, 2))
 * //=> 2004
 */
function getISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getFullYear();
    var fourthOfJanuaryOfNextYear = new Date(0);
    fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
    var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
    var fourthOfJanuaryOfThisYear = new Date(0);
    fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
    var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
    if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
    }
    else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
    }
    else {
        return year - 1;
    }
}

/**
 * @name startOfISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the start of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the start of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of an ISO week-numbering year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of an ISO week-numbering year for 2 July 2005:
 * const result = startOfISOWeekYear(new Date(2005, 6, 2))
 * //=> Mon Jan 03 2005 00:00:00
 */
function startOfISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var year = getISOWeekYear(dirtyDate);
    var fourthOfJanuary = new Date(0);
    fourthOfJanuary.setFullYear(year, 0, 4);
    fourthOfJanuary.setHours(0, 0, 0, 0);
    var date = startOfISOWeek(fourthOfJanuary);
    return date;
}

/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds(date) {
    var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
    utcDate.setUTCFullYear(date.getFullYear());
    return date.getTime() - utcDate.getTime();
}

/**
 * @name startOfDay
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */
function startOfDay$2(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    date.setHours(0, 0, 0, 0);
    return date;
}

var MILLISECONDS_IN_DAY$1 = 86400000;
/**
 * @name differenceInCalendarDays
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates. This means that the times are removed
 * from the dates and then the difference in days is calculated.
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar days
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 * // How many calendar days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInCalendarDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 1
 */
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var startOfDayLeft = startOfDay$2(dirtyDateLeft);
    var startOfDayRight = startOfDay$2(dirtyDateRight);
    var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
    var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
    // Round the number of days to the nearest integer
    // because the number of milliseconds in a day is not constant
    // (e.g. it's different in the day of the daylight saving time clock shift)
    return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY$1);
}

/**
 * @name addWeeks
 * @category Week Helpers
 * @summary Add the specified number of weeks to the given date.
 *
 * @description
 * Add the specified number of week to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the weeks added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 4 weeks to 1 September 2014:
 * const result = addWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Sep 29 2014 00:00:00
 */
function addWeeks(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    var days = amount * 7;
    return addDays$2(dirtyDate, days);
}

/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the years added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * const result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */
function addYears(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addMonths(dirtyDate, amount * 12);
}

/**
 * @name max
 * @category Common Helpers
 * @summary Return the latest of the given dates.
 *
 * @description
 * Return the latest of the given dates.
 *
 * @param {Date[]|Number[]} datesArray - the dates to compare
 * @returns {Date} the latest of the dates
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which of these dates is the latest?
 * const result = max([
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * ])
 * //=> Sun Jul 02 1995 00:00:00
 */
function max(dirtyDatesArray) {
    requiredArgs(1, arguments);
    var datesArray;
    // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
    if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {
        datesArray = dirtyDatesArray;
        // If `dirtyDatesArray` is Array-like Object, convert to Array.
    }
    else if (_typeof(dirtyDatesArray) === 'object' && dirtyDatesArray !== null) {
        datesArray = Array.prototype.slice.call(dirtyDatesArray);
    }
    else {
        // `dirtyDatesArray` is non-iterable, return Invalid Date
        return new Date(NaN);
    }
    var result;
    datesArray.forEach(function (dirtyDate) {
        var currentDate = toDate(dirtyDate);
        if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {
            result = currentDate;
        }
    });
    return result || new Date(NaN);
}

/**
 * @name min
 * @category Common Helpers
 * @summary Returns the earliest of the given dates.
 *
 * @description
 * Returns the earliest of the given dates.
 *
 * @param {Date[]|Number[]} datesArray - the dates to compare
 * @returns {Date} - the earliest of the dates
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which of these dates is the earliest?
 * const result = min([
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * ])
 * //=> Wed Feb 11 1987 00:00:00
 */
function min(dirtyDatesArray) {
    requiredArgs(1, arguments);
    var datesArray;
    // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
    if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {
        datesArray = dirtyDatesArray;
        // If `dirtyDatesArray` is Array-like Object, convert to Array.
    }
    else if (_typeof(dirtyDatesArray) === 'object' && dirtyDatesArray !== null) {
        datesArray = Array.prototype.slice.call(dirtyDatesArray);
    }
    else {
        // `dirtyDatesArray` is non-iterable, return Invalid Date
        return new Date(NaN);
    }
    var result;
    datesArray.forEach(function (dirtyDate) {
        var currentDate = toDate(dirtyDate);
        if (result === undefined || result > currentDate || isNaN(currentDate.getDate())) {
            result = currentDate;
        }
    });
    return result || new Date(NaN);
}

/**
 * @name isSameDay
 * @category Day Helpers
 * @summary Are the given dates in the same day (and year and month)?
 *
 * @description
 * Are the given dates in the same day (and year and month)?
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same day (and year and month)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
 * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))
 * //=> true
 *
 * @example
 * // Are 4 September and 4 October in the same day?
 * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))
 * //=> false
 *
 * @example
 * // Are 4 September, 2014 and 4 September, 2015 in the same day?
 * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))
 * //=> false
 */
function isSameDay(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeftStartOfDay = startOfDay$2(dirtyDateLeft);
    var dateRightStartOfDay = startOfDay$2(dirtyDateRight);
    return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * @param {*} value - the value to check
 * @returns {boolean} true if the given value is a date
 * @throws {TypeError} 1 arguments required
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */
function isDate(value) {
    requiredArgs(1, arguments);
    return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
}

/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @param {*} date - the date to check
 * @returns {Boolean} the date is valid
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // For the valid date:
 * const result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * const result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isValid(new Date(''))
 * //=> false
 */
function isValid(dirtyDate) {
    requiredArgs(1, arguments);
    if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
        return false;
    }
    var date = toDate(dirtyDate);
    return !isNaN(Number(date));
}

/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar months
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */
function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
    var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
    return yearDiff * 12 + monthDiff;
}

var MILLISECONDS_IN_WEEK$4 = 604800000;
/**
 * @name differenceInCalendarWeeks
 * @category Week Helpers
 * @summary Get the number of calendar weeks between the given dates.
 *
 * @description
 * Get the number of calendar weeks between the given dates.
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Number} the number of calendar weeks
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // How many calendar weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5)
 * )
 * //=> 3
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5),
 *   { weekStartsOn: 1 }
 * )
 * //=> 2
 */
function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, options) {
    requiredArgs(2, arguments);
    var startOfWeekLeft = startOfWeek(dirtyDateLeft, options);
    var startOfWeekRight = startOfWeek(dirtyDateRight, options);
    var timestampLeft = startOfWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekLeft);
    var timestampRight = startOfWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekRight);
    // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK$4);
}

/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfMonth$2(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var month = date.getMonth();
    date.setFullYear(date.getFullYear(), month + 1, 0);
    date.setHours(23, 59, 59, 999);
    return date;
}

/**
 * @name startOfMonth
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
    return date;
}

/**
 * @name startOfYear
 * @category Year Helpers
 * @summary Return the start of a year for the given date.
 *
 * @description
 * Return the start of a year for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a year for 2 September 2014 11:55:00:
 * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Jan 01 2014 00:00:00
 */
function startOfYear(dirtyDate) {
    requiredArgs(1, arguments);
    var cleanDate = toDate(dirtyDate);
    var date = new Date(0);
    date.setFullYear(cleanDate.getFullYear(), 0, 1);
    date.setHours(0, 0, 0, 0);
    return date;
}

/**
 * @name endOfWeek
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the end of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfWeek(dirtyDate, options) {
    var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var defaultOptions = getDefaultOptions();
    var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }
    var date = toDate(dirtyDate);
    var day = date.getDay();
    var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
    date.setDate(date.getDate() + diff);
    date.setHours(23, 59, 59, 999);
    return date;
}

/**
 * @name endOfISOWeek
 * @category ISO Week Helpers
 * @summary Return the end of an ISO week for the given date.
 *
 * @description
 * Return the end of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of an ISO week
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of an ISO week for 2 September 2014 11:55:00:
 * const result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    return endOfWeek(dirtyDate, {
        weekStartsOn: 1
    });
}

/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */
function subMilliseconds(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addMilliseconds(dirtyDate, -amount);
}

var MILLISECONDS_IN_DAY = 86400000;
function getUTCDayOfYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var timestamp = date.getTime();
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
    var startOfYearTimestamp = date.getTime();
    var difference = timestamp - startOfYearTimestamp;
    return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

function startOfUTCISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var weekStartsOn = 1;
    var date = toDate(dirtyDate);
    var day = date.getUTCDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setUTCDate(date.getUTCDate() - diff);
    date.setUTCHours(0, 0, 0, 0);
    return date;
}

function getUTCISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getUTCFullYear();
    var fourthOfJanuaryOfNextYear = new Date(0);
    fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
    var fourthOfJanuaryOfThisYear = new Date(0);
    fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
    if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
    }
    else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
    }
    else {
        return year - 1;
    }
}

function startOfUTCISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var year = getUTCISOWeekYear(dirtyDate);
    var fourthOfJanuary = new Date(0);
    fourthOfJanuary.setUTCFullYear(year, 0, 4);
    fourthOfJanuary.setUTCHours(0, 0, 0, 0);
    var date = startOfUTCISOWeek(fourthOfJanuary);
    return date;
}

var MILLISECONDS_IN_WEEK$3 = 604800000;
function getUTCISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
    // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round(diff / MILLISECONDS_IN_WEEK$3) + 1;
}

function startOfUTCWeek(dirtyDate, options) {
    var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var defaultOptions = getDefaultOptions();
    var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }
    var date = toDate(dirtyDate);
    var day = date.getUTCDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setUTCDate(date.getUTCDate() - diff);
    date.setUTCHours(0, 0, 0, 0);
    return date;
}

function getUTCWeekYear(dirtyDate, options) {
    var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getUTCFullYear();
    var defaultOptions = getDefaultOptions();
    var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
    // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    }
    var firstWeekOfNextYear = new Date(0);
    firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
    firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
    var firstWeekOfThisYear = new Date(0);
    firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
    firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
    if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
    }
    else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
    }
    else {
        return year - 1;
    }
}

function startOfUTCWeekYear(dirtyDate, options) {
    var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var defaultOptions = getDefaultOptions();
    var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
    var year = getUTCWeekYear(dirtyDate, options);
    var firstWeek = new Date(0);
    firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
    firstWeek.setUTCHours(0, 0, 0, 0);
    var date = startOfUTCWeek(firstWeek, options);
    return date;
}

var MILLISECONDS_IN_WEEK$2 = 604800000;
function getUTCWeek(dirtyDate, options) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
    // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round(diff / MILLISECONDS_IN_WEEK$2) + 1;
}

function addLeadingZeros(number, targetLength) {
    var sign = number < 0 ? '-' : '';
    var output = Math.abs(number).toString();
    while (output.length < targetLength) {
        output = '0' + output;
    }
    return sign + output;
}

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */
var formatters$3 = {
    // Year
    y: function y(date, token) {
        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
        // |----------|-------|----|-------|-------|-------|
        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
        var signedYear = date.getUTCFullYear();
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
    },
    // Month
    M: function M(date, token) {
        var month = date.getUTCMonth();
        return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
    },
    // Day of the month
    d: function d(date, token) {
        return addLeadingZeros(date.getUTCDate(), token.length);
    },
    // AM or PM
    a: function a(date, token) {
        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
        switch (token) {
            case 'a':
            case 'aa':
                return dayPeriodEnumValue.toUpperCase();
            case 'aaa':
                return dayPeriodEnumValue;
            case 'aaaaa':
                return dayPeriodEnumValue[0];
            case 'aaaa':
            default:
                return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
        }
    },
    // Hour [1-12]
    h: function h(date, token) {
        return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
    },
    // Hour [0-23]
    H: function H(date, token) {
        return addLeadingZeros(date.getUTCHours(), token.length);
    },
    // Minute
    m: function m(date, token) {
        return addLeadingZeros(date.getUTCMinutes(), token.length);
    },
    // Second
    s: function s(date, token) {
        return addLeadingZeros(date.getUTCSeconds(), token.length);
    },
    // Fraction of second
    S: function S(date, token) {
        var numberOfDigits = token.length;
        var milliseconds = date.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
        return addLeadingZeros(fractionalSeconds, token.length);
    }
};

var dayPeriodEnum = {
    am: 'am',
    pm: 'pm',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
};
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */
var formatters$1 = {
    // Era
    G: function G(date, token, localize) {
        var era = date.getUTCFullYear() > 0 ? 1 : 0;
        switch (token) {
            // AD, BC
            case 'G':
            case 'GG':
            case 'GGG':
                return localize.era(era, {
                    width: 'abbreviated'
                });
            // A, B
            case 'GGGGG':
                return localize.era(era, {
                    width: 'narrow'
                });
            // Anno Domini, Before Christ
            case 'GGGG':
            default:
                return localize.era(era, {
                    width: 'wide'
                });
        }
    },
    // Year
    y: function y(date, token, localize) {
        // Ordinal number
        if (token === 'yo') {
            var signedYear = date.getUTCFullYear();
            // Returns 1 for 1 BC (which is year 0 in JavaScript)
            var year = signedYear > 0 ? signedYear : 1 - signedYear;
            return localize.ordinalNumber(year, {
                unit: 'year'
            });
        }
        return formatters$3.y(date, token);
    },
    // Local week-numbering year
    Y: function Y(date, token, localize, options) {
        var signedWeekYear = getUTCWeekYear(date, options);
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
        // Two digit year
        if (token === 'YY') {
            var twoDigitYear = weekYear % 100;
            return addLeadingZeros(twoDigitYear, 2);
        }
        // Ordinal number
        if (token === 'Yo') {
            return localize.ordinalNumber(weekYear, {
                unit: 'year'
            });
        }
        // Padding
        return addLeadingZeros(weekYear, token.length);
    },
    // ISO week-numbering year
    R: function R(date, token) {
        var isoWeekYear = getUTCISOWeekYear(date);
        // Padding
        return addLeadingZeros(isoWeekYear, token.length);
    },
    // Extended year. This is a single number designating the year of this calendar system.
    // The main difference between `y` and `u` localizers are B.C. years:
    // | Year | `y` | `u` |
    // |------|-----|-----|
    // | AC 1 |   1 |   1 |
    // | BC 1 |   1 |   0 |
    // | BC 2 |   2 |  -1 |
    // Also `yy` always returns the last two digits of a year,
    // while `uu` pads single digit years to 2 characters and returns other years unchanged.
    u: function u(date, token) {
        var year = date.getUTCFullYear();
        return addLeadingZeros(year, token.length);
    },
    // Quarter
    Q: function Q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
            // 1, 2, 3, 4
            case 'Q':
                return String(quarter);
            // 01, 02, 03, 04
            case 'QQ':
                return addLeadingZeros(quarter, 2);
            // 1st, 2nd, 3rd, 4th
            case 'Qo':
                return localize.ordinalNumber(quarter, {
                    unit: 'quarter'
                });
            // Q1, Q2, Q3, Q4
            case 'QQQ':
                return localize.quarter(quarter, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case 'QQQQQ':
                return localize.quarter(quarter, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // 1st quarter, 2nd quarter, ...
            case 'QQQQ':
            default:
                return localize.quarter(quarter, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Stand-alone quarter
    q: function q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
            // 1, 2, 3, 4
            case 'q':
                return String(quarter);
            // 01, 02, 03, 04
            case 'qq':
                return addLeadingZeros(quarter, 2);
            // 1st, 2nd, 3rd, 4th
            case 'qo':
                return localize.ordinalNumber(quarter, {
                    unit: 'quarter'
                });
            // Q1, Q2, Q3, Q4
            case 'qqq':
                return localize.quarter(quarter, {
                    width: 'abbreviated',
                    context: 'standalone'
                });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case 'qqqqq':
                return localize.quarter(quarter, {
                    width: 'narrow',
                    context: 'standalone'
                });
            // 1st quarter, 2nd quarter, ...
            case 'qqqq':
            default:
                return localize.quarter(quarter, {
                    width: 'wide',
                    context: 'standalone'
                });
        }
    },
    // Month
    M: function M(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
            case 'M':
            case 'MM':
                return formatters$3.M(date, token);
            // 1st, 2nd, ..., 12th
            case 'Mo':
                return localize.ordinalNumber(month + 1, {
                    unit: 'month'
                });
            // Jan, Feb, ..., Dec
            case 'MMM':
                return localize.month(month, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // J, F, ..., D
            case 'MMMMM':
                return localize.month(month, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // January, February, ..., December
            case 'MMMM':
            default:
                return localize.month(month, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Stand-alone month
    L: function L(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
            // 1, 2, ..., 12
            case 'L':
                return String(month + 1);
            // 01, 02, ..., 12
            case 'LL':
                return addLeadingZeros(month + 1, 2);
            // 1st, 2nd, ..., 12th
            case 'Lo':
                return localize.ordinalNumber(month + 1, {
                    unit: 'month'
                });
            // Jan, Feb, ..., Dec
            case 'LLL':
                return localize.month(month, {
                    width: 'abbreviated',
                    context: 'standalone'
                });
            // J, F, ..., D
            case 'LLLLL':
                return localize.month(month, {
                    width: 'narrow',
                    context: 'standalone'
                });
            // January, February, ..., December
            case 'LLLL':
            default:
                return localize.month(month, {
                    width: 'wide',
                    context: 'standalone'
                });
        }
    },
    // Local week of year
    w: function w(date, token, localize, options) {
        var week = getUTCWeek(date, options);
        if (token === 'wo') {
            return localize.ordinalNumber(week, {
                unit: 'week'
            });
        }
        return addLeadingZeros(week, token.length);
    },
    // ISO week of year
    I: function I(date, token, localize) {
        var isoWeek = getUTCISOWeek(date);
        if (token === 'Io') {
            return localize.ordinalNumber(isoWeek, {
                unit: 'week'
            });
        }
        return addLeadingZeros(isoWeek, token.length);
    },
    // Day of the month
    d: function d(date, token, localize) {
        if (token === 'do') {
            return localize.ordinalNumber(date.getUTCDate(), {
                unit: 'date'
            });
        }
        return formatters$3.d(date, token);
    },
    // Day of year
    D: function D(date, token, localize) {
        var dayOfYear = getUTCDayOfYear(date);
        if (token === 'Do') {
            return localize.ordinalNumber(dayOfYear, {
                unit: 'dayOfYear'
            });
        }
        return addLeadingZeros(dayOfYear, token.length);
    },
    // Day of week
    E: function E(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        switch (token) {
            // Tue
            case 'E':
            case 'EE':
            case 'EEE':
                return localize.day(dayOfWeek, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // T
            case 'EEEEE':
                return localize.day(dayOfWeek, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // Tu
            case 'EEEEEE':
                return localize.day(dayOfWeek, {
                    width: 'short',
                    context: 'formatting'
                });
            // Tuesday
            case 'EEEE':
            default:
                return localize.day(dayOfWeek, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Local day of week
    e: function e(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
            // Numerical value (Nth day of week with current locale or weekStartsOn)
            case 'e':
                return String(localDayOfWeek);
            // Padded numerical value
            case 'ee':
                return addLeadingZeros(localDayOfWeek, 2);
            // 1st, 2nd, ..., 7th
            case 'eo':
                return localize.ordinalNumber(localDayOfWeek, {
                    unit: 'day'
                });
            case 'eee':
                return localize.day(dayOfWeek, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // T
            case 'eeeee':
                return localize.day(dayOfWeek, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // Tu
            case 'eeeeee':
                return localize.day(dayOfWeek, {
                    width: 'short',
                    context: 'formatting'
                });
            // Tuesday
            case 'eeee':
            default:
                return localize.day(dayOfWeek, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Stand-alone local day of week
    c: function c(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
            // Numerical value (same as in `e`)
            case 'c':
                return String(localDayOfWeek);
            // Padded numerical value
            case 'cc':
                return addLeadingZeros(localDayOfWeek, token.length);
            // 1st, 2nd, ..., 7th
            case 'co':
                return localize.ordinalNumber(localDayOfWeek, {
                    unit: 'day'
                });
            case 'ccc':
                return localize.day(dayOfWeek, {
                    width: 'abbreviated',
                    context: 'standalone'
                });
            // T
            case 'ccccc':
                return localize.day(dayOfWeek, {
                    width: 'narrow',
                    context: 'standalone'
                });
            // Tu
            case 'cccccc':
                return localize.day(dayOfWeek, {
                    width: 'short',
                    context: 'standalone'
                });
            // Tuesday
            case 'cccc':
            default:
                return localize.day(dayOfWeek, {
                    width: 'wide',
                    context: 'standalone'
                });
        }
    },
    // ISO day of week
    i: function i(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
        switch (token) {
            // 2
            case 'i':
                return String(isoDayOfWeek);
            // 02
            case 'ii':
                return addLeadingZeros(isoDayOfWeek, token.length);
            // 2nd
            case 'io':
                return localize.ordinalNumber(isoDayOfWeek, {
                    unit: 'day'
                });
            // Tue
            case 'iii':
                return localize.day(dayOfWeek, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // T
            case 'iiiii':
                return localize.day(dayOfWeek, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // Tu
            case 'iiiiii':
                return localize.day(dayOfWeek, {
                    width: 'short',
                    context: 'formatting'
                });
            // Tuesday
            case 'iiii':
            default:
                return localize.day(dayOfWeek, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // AM or PM
    a: function a(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        switch (token) {
            case 'a':
            case 'aa':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            case 'aaa':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                }).toLowerCase();
            case 'aaaaa':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'narrow',
                    context: 'formatting'
                });
            case 'aaaa':
            default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // AM, PM, midnight, noon
    b: function b(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours === 12) {
            dayPeriodEnumValue = dayPeriodEnum.noon;
        }
        else if (hours === 0) {
            dayPeriodEnumValue = dayPeriodEnum.midnight;
        }
        else {
            dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        }
        switch (token) {
            case 'b':
            case 'bb':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            case 'bbb':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                }).toLowerCase();
            case 'bbbbb':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'narrow',
                    context: 'formatting'
                });
            case 'bbbb':
            default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // in the morning, in the afternoon, in the evening, at night
    B: function B(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours >= 17) {
            dayPeriodEnumValue = dayPeriodEnum.evening;
        }
        else if (hours >= 12) {
            dayPeriodEnumValue = dayPeriodEnum.afternoon;
        }
        else if (hours >= 4) {
            dayPeriodEnumValue = dayPeriodEnum.morning;
        }
        else {
            dayPeriodEnumValue = dayPeriodEnum.night;
        }
        switch (token) {
            case 'B':
            case 'BB':
            case 'BBB':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            case 'BBBBB':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'narrow',
                    context: 'formatting'
                });
            case 'BBBB':
            default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Hour [1-12]
    h: function h(date, token, localize) {
        if (token === 'ho') {
            var hours = date.getUTCHours() % 12;
            if (hours === 0)
                hours = 12;
            return localize.ordinalNumber(hours, {
                unit: 'hour'
            });
        }
        return formatters$3.h(date, token);
    },
    // Hour [0-23]
    H: function H(date, token, localize) {
        if (token === 'Ho') {
            return localize.ordinalNumber(date.getUTCHours(), {
                unit: 'hour'
            });
        }
        return formatters$3.H(date, token);
    },
    // Hour [0-11]
    K: function K(date, token, localize) {
        var hours = date.getUTCHours() % 12;
        if (token === 'Ko') {
            return localize.ordinalNumber(hours, {
                unit: 'hour'
            });
        }
        return addLeadingZeros(hours, token.length);
    },
    // Hour [1-24]
    k: function k(date, token, localize) {
        var hours = date.getUTCHours();
        if (hours === 0)
            hours = 24;
        if (token === 'ko') {
            return localize.ordinalNumber(hours, {
                unit: 'hour'
            });
        }
        return addLeadingZeros(hours, token.length);
    },
    // Minute
    m: function m(date, token, localize) {
        if (token === 'mo') {
            return localize.ordinalNumber(date.getUTCMinutes(), {
                unit: 'minute'
            });
        }
        return formatters$3.m(date, token);
    },
    // Second
    s: function s(date, token, localize) {
        if (token === 'so') {
            return localize.ordinalNumber(date.getUTCSeconds(), {
                unit: 'second'
            });
        }
        return formatters$3.s(date, token);
    },
    // Fraction of second
    S: function S(date, token) {
        return formatters$3.S(date, token);
    },
    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
    X: function X(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        if (timezoneOffset === 0) {
            return 'Z';
        }
        switch (token) {
            // Hours and optional minutes
            case 'X':
                return formatTimezoneWithOptionalMinutes(timezoneOffset);
            // Hours, minutes and optional seconds without `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `XX`
            case 'XXXX':
            case 'XX':
                // Hours and minutes without `:` delimiter
                return formatTimezone(timezoneOffset);
            // Hours, minutes and optional seconds with `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `XXX`
            case 'XXXXX':
            case 'XXX': // Hours and minutes with `:` delimiter
            default:
                return formatTimezone(timezoneOffset, ':');
        }
    },
    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
    x: function x(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
            // Hours and optional minutes
            case 'x':
                return formatTimezoneWithOptionalMinutes(timezoneOffset);
            // Hours, minutes and optional seconds without `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `xx`
            case 'xxxx':
            case 'xx':
                // Hours and minutes without `:` delimiter
                return formatTimezone(timezoneOffset);
            // Hours, minutes and optional seconds with `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `xxx`
            case 'xxxxx':
            case 'xxx': // Hours and minutes with `:` delimiter
            default:
                return formatTimezone(timezoneOffset, ':');
        }
    },
    // Timezone (GMT)
    O: function O(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
            // Short
            case 'O':
            case 'OO':
            case 'OOO':
                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
            // Long
            case 'OOOO':
            default:
                return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
    },
    // Timezone (specific non-location)
    z: function z(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
            // Short
            case 'z':
            case 'zz':
            case 'zzz':
                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
            // Long
            case 'zzzz':
            default:
                return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
    },
    // Seconds timestamp
    t: function t(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = Math.floor(originalDate.getTime() / 1000);
        return addLeadingZeros(timestamp, token.length);
    },
    // Milliseconds timestamp
    T: function T(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = originalDate.getTime();
        return addLeadingZeros(timestamp, token.length);
    }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
    var sign = offset > 0 ? '-' : '+';
    var absOffset = Math.abs(offset);
    var hours = Math.floor(absOffset / 60);
    var minutes = absOffset % 60;
    if (minutes === 0) {
        return sign + String(hours);
    }
    var delimiter = dirtyDelimiter || '';
    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
    if (offset % 60 === 0) {
        var sign = offset > 0 ? '-' : '+';
        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
    }
    return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
    var delimiter = dirtyDelimiter || '';
    var sign = offset > 0 ? '-' : '+';
    var absOffset = Math.abs(offset);
    var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
    var minutes = addLeadingZeros(absOffset % 60, 2);
    return sign + hours + delimiter + minutes;
}
var formatters$2 = formatters$1;

var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
    switch (pattern) {
        case 'P':
            return formatLong.date({
                width: 'short'
            });
        case 'PP':
            return formatLong.date({
                width: 'medium'
            });
        case 'PPP':
            return formatLong.date({
                width: 'long'
            });
        case 'PPPP':
        default:
            return formatLong.date({
                width: 'full'
            });
    }
};
var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
    switch (pattern) {
        case 'p':
            return formatLong.time({
                width: 'short'
            });
        case 'pp':
            return formatLong.time({
                width: 'medium'
            });
        case 'ppp':
            return formatLong.time({
                width: 'long'
            });
        case 'pppp':
        default:
            return formatLong.time({
                width: 'full'
            });
    }
};
var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
    var matchResult = pattern.match(/(P+)(p+)?/) || [];
    var datePattern = matchResult[1];
    var timePattern = matchResult[2];
    if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
    }
    var dateTimeFormat;
    switch (datePattern) {
        case 'P':
            dateTimeFormat = formatLong.dateTime({
                width: 'short'
            });
            break;
        case 'PP':
            dateTimeFormat = formatLong.dateTime({
                width: 'medium'
            });
            break;
        case 'PPP':
            dateTimeFormat = formatLong.dateTime({
                width: 'long'
            });
            break;
        case 'PPPP':
        default:
            dateTimeFormat = formatLong.dateTime({
                width: 'full'
            });
            break;
    }
    return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
};
var longFormatters = {
    p: timeLongFormatter,
    P: dateTimeLongFormatter
};
var longFormatters$1 = longFormatters;

var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];
function isProtectedDayOfYearToken(token) {
    return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
    return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format, input) {
    if (token === 'YYYY') {
        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
    else if (token === 'YY') {
        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
    else if (token === 'D') {
        throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
    else if (token === 'DD') {
        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
}

var formatDistanceLocale = {
    lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
    },
    xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
    },
    halfAMinute: 'half a minute',
    lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
    },
    xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
    },
    aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
    },
    xHours: {
        one: '1 hour',
        other: '{{count}} hours'
    },
    xDays: {
        one: '1 day',
        other: '{{count}} days'
    },
    aboutXWeeks: {
        one: 'about 1 week',
        other: 'about {{count}} weeks'
    },
    xWeeks: {
        one: '1 week',
        other: '{{count}} weeks'
    },
    aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
    },
    xMonths: {
        one: '1 month',
        other: '{{count}} months'
    },
    aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
    },
    xYears: {
        one: '1 year',
        other: '{{count}} years'
    },
    overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
    },
    almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
    }
};
var formatDistance$1 = function formatDistance(token, count, options) {
    var result;
    var tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === 'string') {
        result = tokenValue;
    }
    else if (count === 1) {
        result = tokenValue.one;
    }
    else {
        result = tokenValue.other.replace('{{count}}', count.toString());
    }
    if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
            return 'in ' + result;
        }
        else {
            return result + ' ago';
        }
    }
    return result;
};

function buildFormatLongFn(args) {
    return function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // TODO: Remove String()
        var width = options.width ? String(options.width) : args.defaultWidth;
        var format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
    };
}

var dateFormats = {
    full: 'EEEE, MMMM do, y',
    long: 'MMMM do, y',
    medium: 'MMM d, y',
    short: 'MM/dd/yyyy'
};
var timeFormats = {
    full: 'h:mm:ss a zzzz',
    long: 'h:mm:ss a z',
    medium: 'h:mm:ss a',
    short: 'h:mm a'
};
var dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: '{{date}}, {{time}}',
    short: '{{date}}, {{time}}'
};
var formatLong$1 = {
    date: buildFormatLongFn({
        formats: dateFormats,
        defaultWidth: 'full'
    }),
    time: buildFormatLongFn({
        formats: timeFormats,
        defaultWidth: 'full'
    }),
    dateTime: buildFormatLongFn({
        formats: dateTimeFormats,
        defaultWidth: 'full'
    })
};

var formatRelativeLocale = {
    lastWeek: "'last' eeee 'at' p",
    yesterday: "'yesterday at' p",
    today: "'today at' p",
    tomorrow: "'tomorrow at' p",
    nextWeek: "eeee 'at' p",
    other: 'P'
};
var formatRelative$1 = function formatRelative(token, _date, _baseDate, _options) {
    return formatRelativeLocale[token];
};

function buildLocalizeFn(args) {
    return function (dirtyIndex, options) {
        var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
        var valuesArray;
        if (context === 'formatting' && args.formattingValues) {
            var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
            var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
            valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        }
        else {
            var _defaultWidth = args.defaultWidth;
            var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
            valuesArray = args.values[_width] || args.values[_defaultWidth];
        }
        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
        // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
        return valuesArray[index];
    };
}

var eraValues = {
    narrow: ['B', 'A'],
    abbreviated: ['BC', 'AD'],
    wide: ['Before Christ', 'Anno Domini']
};
var quarterValues = {
    narrow: ['1', '2', '3', '4'],
    abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
    wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues = {
    narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
    abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues = {
    narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
    short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
    abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues = {
    narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
    },
    abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
    },
    wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
    }
};
var formattingDayPeriodValues = {
    narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
    },
    abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
    },
    wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
    }
};
var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
    var number = Number(dirtyNumber);
    // If ordinal numbers depend on context, for example,
    // if they are different for different grammatical genders,
    // use `options.unit`.
    //
    // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
    // 'day', 'hour', 'minute', 'second'.
    var rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
            case 1:
                return number + 'st';
            case 2:
                return number + 'nd';
            case 3:
                return number + 'rd';
        }
    }
    return number + 'th';
};
var localize$1 = {
    ordinalNumber: ordinalNumber,
    era: buildLocalizeFn({
        values: eraValues,
        defaultWidth: 'wide'
    }),
    quarter: buildLocalizeFn({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function argumentCallback(quarter) {
            return quarter - 1;
        }
    }),
    month: buildLocalizeFn({
        values: monthValues,
        defaultWidth: 'wide'
    }),
    day: buildLocalizeFn({
        values: dayValues,
        defaultWidth: 'wide'
    }),
    dayPeriod: buildLocalizeFn({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
    })
};

function buildMatchFn(args) {
    return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var width = options.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);
        if (!matchResult) {
            return null;
        }
        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
            return pattern.test(matchedString);
        }) : findKey(parsePatterns, function (pattern) {
            return pattern.test(matchedString);
        });
        var value;
        value = args.valueCallback ? args.valueCallback(key) : key;
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
            value: value,
            rest: rest
        };
    };
}
function findKey(object, predicate) {
    for (var key in object) {
        if (object.hasOwnProperty(key) && predicate(object[key])) {
            return key;
        }
    }
    return undefined;
}
function findIndex(array, predicate) {
    for (var key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
            return key;
        }
    }
    return undefined;
}

function buildMatchPatternFn(args) {
    return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var matchResult = string.match(args.matchPattern);
        if (!matchResult)
            return null;
        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);
        if (!parseResult)
            return null;
        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
            value: value,
            rest: rest
        };
    };
}

var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
    narrow: /^(b|a)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
    any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
    any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
    narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
    any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(su|mo|tu|we|th|fr|sa)/i,
    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
    narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
    any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
    }
};
var match$1 = {
    ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function valueCallback(value) {
            return parseInt(value, 10);
        }
    }),
    era: buildMatchFn({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
    }),
    quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function valueCallback(index) {
            return index + 1;
        }
    }),
    month: buildMatchFn({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
    }),
    day: buildMatchFn({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
    }),
    dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
    })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var locale = {
    code: 'en-US',
    formatDistance: formatDistance$1,
    formatLong: formatLong$1,
    formatRelative: formatRelative$1,
    localize: localize$1,
    match: match$1,
    options: {
        weekStartsOn: 0 /* Sunday */,
        firstWeekContainsDate: 1
    }
};
var enUS = locale;

// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @name format
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @param {Date|Number} date - the original date
 * @param {String} format - the string of tokens
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @returns {String} the formatted date string
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `options.locale` must contain `localize` property
 * @throws {RangeError} `options.locale` must contain `formatLong` property
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */
function format(dirtyDate, dirtyFormatStr, options) {
    var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
    requiredArgs(2, arguments);
    var formatStr = String(dirtyFormatStr);
    var defaultOptions = getDefaultOptions();
    var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : enUS;
    var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
    // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    }
    var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }
    if (!locale.localize) {
        throw new RangeError('locale must contain localize property');
    }
    if (!locale.formatLong) {
        throw new RangeError('locale must contain formatLong property');
    }
    var originalDate = toDate(dirtyDate);
    if (!isValid(originalDate)) {
        throw new RangeError('Invalid time value');
    }
    // Convert the date in system timezone to the same date in UTC+00:00 timezone.
    // This ensures that when UTC functions will be implemented, locales will be compatible with them.
    // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
    var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
    var utcDate = subMilliseconds(originalDate, timezoneOffset);
    var formatterOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale,
        _originalDate: originalDate
    };
    var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
        var firstCharacter = substring[0];
        if (firstCharacter === 'p' || firstCharacter === 'P') {
            var longFormatter = longFormatters$1[firstCharacter];
            return longFormatter(substring, locale.formatLong);
        }
        return substring;
    }).join('').match(formattingTokensRegExp).map(function (substring) {
        // Replace two single quote characters with one single quote character
        if (substring === "''") {
            return "'";
        }
        var firstCharacter = substring[0];
        if (firstCharacter === "'") {
            return cleanEscapedString(substring);
        }
        var formatter = formatters$2[firstCharacter];
        if (formatter) {
            if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
                throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
            }
            if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
                throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
            }
            return formatter(utcDate, substring, locale.localize, formatterOptions);
        }
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
            throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
        }
        return substring;
    }).join('');
    return result;
}
function cleanEscapedString(input) {
    var matched = input.match(escapedStringRegExp);
    if (!matched) {
        return input;
    }
    return matched[1].replace(doubleQuoteRegExp, "'");
}

/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the number of days in a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // How many days are in February 2000?
 * const result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */
function getDaysInMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getFullYear();
    var monthIndex = date.getMonth();
    var lastDayOfMonth = new Date(0);
    lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
    lastDayOfMonth.setHours(0, 0, 0, 0);
    return lastDayOfMonth.getDate();
}

var MILLISECONDS_IN_WEEK$1 = 604800000;
/**
 * @name getISOWeek
 * @category ISO Week Helpers
 * @summary Get the ISO week of the given date.
 *
 * @description
 * Get the ISO week of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the ISO week
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which week of the ISO-week numbering year is 2 January 2005?
 * const result = getISOWeek(new Date(2005, 0, 2))
 * //=> 53
 */
function getISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime();
    // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}

/**
 * @name getTime
 * @category Timestamp Helpers
 * @summary Get the milliseconds timestamp of the given date.
 *
 * @description
 * Get the milliseconds timestamp of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the timestamp
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05.123:
 * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 1330515905123
 */
function getTime$1(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var timestamp = date.getTime();
    return timestamp;
}

/**
 * @name getUnixTime
 * @category Timestamp Helpers
 * @summary Get the seconds timestamp of the given date.
 *
 * @description
 * Get the seconds timestamp of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the timestamp
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05 CET:
 * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 1330512305
 */
function getUnixTime$2(dirtyDate) {
    requiredArgs(1, arguments);
    return Math.floor(getTime$1(dirtyDate) / 1000);
}

/**
 * @name getWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Get the local week-numbering year of the given date.
 *
 * @description
 * Get the local week-numbering year of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering
 *
 * @param {Date|Number} date - the given date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @returns {Number} the local week-numbering year
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 *
 * @example
 * // Which week numbering year is 26 December 2004 with the default settings?
 * const result = getWeekYear(new Date(2004, 11, 26))
 * //=> 2005
 *
 * @example
 * // Which week numbering year is 26 December 2004 if week starts on Saturday?
 * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })
 * //=> 2004
 *
 * @example
 * // Which week numbering year is 26 December 2004 if the first week contains 4 January?
 * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })
 * //=> 2004
 */
function getWeekYear(dirtyDate, options) {
    var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getFullYear();
    var defaultOptions = getDefaultOptions();
    var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
    // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    }
    var firstWeekOfNextYear = new Date(0);
    firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
    firstWeekOfNextYear.setHours(0, 0, 0, 0);
    var startOfNextYear = startOfWeek(firstWeekOfNextYear, options);
    var firstWeekOfThisYear = new Date(0);
    firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
    firstWeekOfThisYear.setHours(0, 0, 0, 0);
    var startOfThisYear = startOfWeek(firstWeekOfThisYear, options);
    if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
    }
    else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
    }
    else {
        return year - 1;
    }
}

/**
 * @name startOfWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Return the start of a local week-numbering year for the given date.
 *
 * @description
 * Return the start of a local week-numbering year.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @returns {Date} the start of a week-numbering year
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 *
 * @example
 * // The start of an a week-numbering year for 2 July 2005 with default settings:
 * const result = startOfWeekYear(new Date(2005, 6, 2))
 * //=> Sun Dec 26 2004 00:00:00
 *
 * @example
 * // The start of a week-numbering year for 2 July 2005
 * // if Monday is the first day of week
 * // and 4 January is always in the first week of the year:
 * const result = startOfWeekYear(new Date(2005, 6, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> Mon Jan 03 2005 00:00:00
 */
function startOfWeekYear(dirtyDate, options) {
    var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var defaultOptions = getDefaultOptions();
    var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
    var year = getWeekYear(dirtyDate, options);
    var firstWeek = new Date(0);
    firstWeek.setFullYear(year, 0, firstWeekContainsDate);
    firstWeek.setHours(0, 0, 0, 0);
    var date = startOfWeek(firstWeek, options);
    return date;
}

var MILLISECONDS_IN_WEEK = 604800000;
/**
 * @name getWeek
 * @category Week Helpers
 * @summary Get the local week index of the given date.
 *
 * @description
 * Get the local week index of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering
 *
 * @param {Date|Number} date - the given date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @returns {Number} the week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005 with default options?
 * const result = getWeek(new Date(2005, 0, 2))
 * //=> 2
 *
 * // Which week of the local week numbering year is 2 January 2005,
 * // if Monday is the first day of the week,
 * // and the first week of the year always contains 4 January?
 * const result = getWeek(new Date(2005, 0, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> 53
 */
function getWeek(dirtyDate, options) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime();
    // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

/**
 * @name lastDayOfMonth
 * @category Month Helpers
 * @summary Return the last day of a month for the given date.
 *
 * @description
 * Return the last day of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the last day of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The last day of a month for 2 September 2014 11:55:00:
 * const result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 00:00:00
 */
function lastDayOfMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var month = date.getMonth();
    date.setFullYear(date.getFullYear(), month + 1, 0);
    date.setHours(0, 0, 0, 0);
    return date;
}

/**
 * @name getWeeksInMonth
 * @category Week Helpers
 * @summary Get the number of calendar weeks a month spans.
 *
 * @description
 * Get the number of calendar weeks the month in the given date spans.
 *
 * @param {Date|Number} date - the given date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Number} the number of calendar weeks
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // How many calendar weeks does February 2015 span?
 * const result = getWeeksInMonth(new Date(2015, 1, 8))
 * //=> 4
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks does July 2017 span?
 * const result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })
 * //=> 6
 */
function getWeeksInMonth(date, options) {
    requiredArgs(1, arguments);
    return differenceInCalendarWeeks(lastDayOfMonth(date), startOfMonth(date), options) + 1;
}

/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * @param {Date|Number} date - the date that should be after the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is after the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */
function isAfter$2(dirtyDate, dirtyDateToCompare) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var dateToCompare = toDate(dirtyDateToCompare);
    return date.getTime() > dateToCompare.getTime();
}

/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * @param {Date|Number} date - the date that should be before the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is before the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */
function isBefore$2(dirtyDate, dirtyDateToCompare) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var dateToCompare = toDate(dirtyDateToCompare);
    return date.getTime() < dateToCompare.getTime();
}

/**
 * @name isSameMonth
 * @category Month Helpers
 * @summary Are the given dates in the same month (and year)?
 *
 * @description
 * Are the given dates in the same month (and year)?
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same month (and year)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same month?
 * const result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 *
 * @example
 * // Are 2 September 2014 and 25 September 2015 in the same month?
 * const result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))
 * //=> false
 */
function isSameMonth(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}

/**
 * @name isSameYear
 * @category Year Helpers
 * @summary Are the given dates in the same year?
 *
 * @description
 * Are the given dates in the same year?
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same year
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same year?
 * const result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 */
function isSameYear(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    return dateLeft.getFullYear() === dateRight.getFullYear();
}

/**
 * @name subDays
 * @category Day Helpers
 * @summary Subtract the specified number of days from the given date.
 *
 * @description
 * Subtract the specified number of days from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the days subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 10 days from 1 September 2014:
 * const result = subDays(new Date(2014, 8, 1), 10)
 * //=> Fri Aug 22 2014 00:00:00
 */
function subDays$2(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addDays$2(dirtyDate, -amount);
}

/**
 * @name setMonth
 * @category Month Helpers
 * @summary Set the month to the given date.
 *
 * @description
 * Set the month to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} month - the month of the new date
 * @returns {Date} the new date with the month set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set February to 1 September 2014:
 * const result = setMonth(new Date(2014, 8, 1), 1)
 * //=> Sat Feb 01 2014 00:00:00
 */
function setMonth(dirtyDate, dirtyMonth) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var month = toInteger(dirtyMonth);
    var year = date.getFullYear();
    var day = date.getDate();
    var dateWithDesiredMonth = new Date(0);
    dateWithDesiredMonth.setFullYear(year, month, 15);
    dateWithDesiredMonth.setHours(0, 0, 0, 0);
    var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
    // Set the last day of the new month
    // if the original date was the last day of the longer month
    date.setMonth(month, Math.min(day, daysInMonth));
    return date;
}

/**
 * @name setYear
 * @category Year Helpers
 * @summary Set the year to the given date.
 *
 * @description
 * Set the year to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} year - the year of the new date
 * @returns {Date} the new date with the year set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set year 2013 to 1 September 2014:
 * const result = setYear(new Date(2014, 8, 1), 2013)
 * //=> Sun Sep 01 2013 00:00:00
 */
function setYear(dirtyDate, dirtyYear) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var year = toInteger(dirtyYear);
    // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date
    if (isNaN(date.getTime())) {
        return new Date(NaN);
    }
    date.setFullYear(year);
    return date;
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */
var __assign = function () {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar)
                    ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
    return to.concat(ar || Array.prototype.slice.call(from));
}
typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_production_min;
function requireReactJsxRuntime_production_min() {
    if (hasRequiredReactJsxRuntime_production_min)
        return reactJsxRuntime_production_min;
    hasRequiredReactJsxRuntime_production_min = 1;
    var f = React, k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p = { key: !0, ref: !0, __self: !0, __source: !0 };
    function q(c, a, g) { var b, d = {}, e = null, h = null; void 0 !== g && (e = "" + g); void 0 !== a.key && (e = "" + a.key); void 0 !== a.ref && (h = a.ref); for (b in a)
        m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]); if (c && c.defaultProps)
        for (b in a = c.defaultProps, a)
            void 0 === d[b] && (d[b] = a[b]); return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current }; }
    reactJsxRuntime_production_min.Fragment = l;
    reactJsxRuntime_production_min.jsx = q;
    reactJsxRuntime_production_min.jsxs = q;
    return reactJsxRuntime_production_min;
}
var reactJsxRuntime_development = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_development;
function requireReactJsxRuntime_development() {
    if (hasRequiredReactJsxRuntime_development)
        return reactJsxRuntime_development;
    hasRequiredReactJsxRuntime_development = 1;
    if (process.env.NODE_ENV !== "production") {
        (function () {
            var React$1 = React;
            // ATTENTION
            // When adding new symbols to this file,
            // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
            // The Symbol used to tag the ReactElement-like types.
            var REACT_ELEMENT_TYPE = Symbol.for('react.element');
            var REACT_PORTAL_TYPE = Symbol.for('react.portal');
            var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
            var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
            var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
            var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
            var REACT_CONTEXT_TYPE = Symbol.for('react.context');
            var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
            var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
            var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
            var REACT_MEMO_TYPE = Symbol.for('react.memo');
            var REACT_LAZY_TYPE = Symbol.for('react.lazy');
            var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
            var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = '@@iterator';
            function getIteratorFn(maybeIterable) {
                if (maybeIterable === null || typeof maybeIterable !== 'object') {
                    return null;
                }
                var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
                if (typeof maybeIterator === 'function') {
                    return maybeIterator;
                }
                return null;
            }
            var ReactSharedInternals = React$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
            function error(format) {
                {
                    {
                        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                            args[_key2 - 1] = arguments[_key2];
                        }
                        printWarning('error', format, args);
                    }
                }
            }
            function printWarning(level, format, args) {
                // When changing this logic, you might want to also
                // update consoleWithStackDev.www.js as well.
                {
                    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                    var stack = ReactDebugCurrentFrame.getStackAddendum();
                    if (stack !== '') {
                        format += '%s';
                        args = args.concat([stack]);
                    } // eslint-disable-next-line react-internal/safe-string-coercion
                    var argsWithFormat = args.map(function (item) {
                        return String(item);
                    }); // Careful: RN currently depends on this prefix
                    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
                    // breaks IE9: https://github.com/facebook/react/issues/13610
                    // eslint-disable-next-line react-internal/no-production-logging
                    Function.prototype.apply.call(console[level], console, argsWithFormat);
                }
            }
            // -----------------------------------------------------------------------------
            var enableScopeAPI = false; // Experimental Create Event Handle API.
            var enableCacheElement = false;
            var enableTransitionTracing = false; // No known bugs, but needs performance testing
            var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
            // stuff. Intended to enable React core members to more easily debug scheduling
            // issues in DEV builds.
            var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
            var REACT_MODULE_REFERENCE;
            {
                REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
            }
            function isValidElementType(type) {
                if (typeof type === 'string' || typeof type === 'function') {
                    return true;
                } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
                if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
                    return true;
                }
                if (typeof type === 'object' && type !== null) {
                    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
                        // types supported by any Flight configuration anywhere since
                        // we don't know which Flight build this will end up being used
                        // with.
                        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
                        return true;
                    }
                }
                return false;
            }
            function getWrappedName(outerType, innerType, wrapperName) {
                var displayName = outerType.displayName;
                if (displayName) {
                    return displayName;
                }
                var functionName = innerType.displayName || innerType.name || '';
                return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
            } // Keep in sync with react-reconciler/getComponentNameFromFiber
            function getContextName(type) {
                return type.displayName || 'Context';
            } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
            function getComponentNameFromType(type) {
                if (type == null) {
                    // Host root, text node or just invalid type.
                    return null;
                }
                {
                    if (typeof type.tag === 'number') {
                        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
                    }
                }
                if (typeof type === 'function') {
                    return type.displayName || type.name || null;
                }
                if (typeof type === 'string') {
                    return type;
                }
                switch (type) {
                    case REACT_FRAGMENT_TYPE:
                        return 'Fragment';
                    case REACT_PORTAL_TYPE:
                        return 'Portal';
                    case REACT_PROFILER_TYPE:
                        return 'Profiler';
                    case REACT_STRICT_MODE_TYPE:
                        return 'StrictMode';
                    case REACT_SUSPENSE_TYPE:
                        return 'Suspense';
                    case REACT_SUSPENSE_LIST_TYPE:
                        return 'SuspenseList';
                }
                if (typeof type === 'object') {
                    switch (type.$$typeof) {
                        case REACT_CONTEXT_TYPE:
                            var context = type;
                            return getContextName(context) + '.Consumer';
                        case REACT_PROVIDER_TYPE:
                            var provider = type;
                            return getContextName(provider._context) + '.Provider';
                        case REACT_FORWARD_REF_TYPE:
                            return getWrappedName(type, type.render, 'ForwardRef');
                        case REACT_MEMO_TYPE:
                            var outerName = type.displayName || null;
                            if (outerName !== null) {
                                return outerName;
                            }
                            return getComponentNameFromType(type.type) || 'Memo';
                        case REACT_LAZY_TYPE:
                            {
                                var lazyComponent = type;
                                var payload = lazyComponent._payload;
                                var init = lazyComponent._init;
                                try {
                                    return getComponentNameFromType(init(payload));
                                }
                                catch (x) {
                                    return null;
                                }
                            }
                        // eslint-disable-next-line no-fallthrough
                    }
                }
                return null;
            }
            var assign = Object.assign;
            // Helpers to patch console.logs to avoid logging during side-effect free
            // replaying on render function. This currently only patches the object
            // lazily which won't cover if the log function was extracted eagerly.
            // We could also eagerly patch the method.
            var disabledDepth = 0;
            var prevLog;
            var prevInfo;
            var prevWarn;
            var prevError;
            var prevGroup;
            var prevGroupCollapsed;
            var prevGroupEnd;
            function disabledLog() { }
            disabledLog.__reactDisabledLog = true;
            function disableLogs() {
                {
                    if (disabledDepth === 0) {
                        /* eslint-disable react-internal/no-production-logging */
                        prevLog = console.log;
                        prevInfo = console.info;
                        prevWarn = console.warn;
                        prevError = console.error;
                        prevGroup = console.group;
                        prevGroupCollapsed = console.groupCollapsed;
                        prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
                        var props = {
                            configurable: true,
                            enumerable: true,
                            value: disabledLog,
                            writable: true
                        }; // $FlowFixMe Flow thinks console is immutable.
                        Object.defineProperties(console, {
                            info: props,
                            log: props,
                            warn: props,
                            error: props,
                            group: props,
                            groupCollapsed: props,
                            groupEnd: props
                        });
                        /* eslint-enable react-internal/no-production-logging */
                    }
                    disabledDepth++;
                }
            }
            function reenableLogs() {
                {
                    disabledDepth--;
                    if (disabledDepth === 0) {
                        /* eslint-disable react-internal/no-production-logging */
                        var props = {
                            configurable: true,
                            enumerable: true,
                            writable: true
                        }; // $FlowFixMe Flow thinks console is immutable.
                        Object.defineProperties(console, {
                            log: assign({}, props, {
                                value: prevLog
                            }),
                            info: assign({}, props, {
                                value: prevInfo
                            }),
                            warn: assign({}, props, {
                                value: prevWarn
                            }),
                            error: assign({}, props, {
                                value: prevError
                            }),
                            group: assign({}, props, {
                                value: prevGroup
                            }),
                            groupCollapsed: assign({}, props, {
                                value: prevGroupCollapsed
                            }),
                            groupEnd: assign({}, props, {
                                value: prevGroupEnd
                            })
                        });
                        /* eslint-enable react-internal/no-production-logging */
                    }
                    if (disabledDepth < 0) {
                        error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
                    }
                }
            }
            var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
            var prefix;
            function describeBuiltInComponentFrame(name, source, ownerFn) {
                {
                    if (prefix === undefined) {
                        // Extract the VM specific prefix used by each line.
                        try {
                            throw Error();
                        }
                        catch (x) {
                            var match = x.stack.trim().match(/\n( *(at )?)/);
                            prefix = match && match[1] || '';
                        }
                    } // We use the prefix to ensure our stacks line up with native stack frames.
                    return '\n' + prefix + name;
                }
            }
            var reentry = false;
            var componentFrameCache;
            {
                var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
                componentFrameCache = new PossiblyWeakMap();
            }
            function describeNativeComponentFrame(fn, construct) {
                // If something asked for a stack inside a fake render, it should get ignored.
                if (!fn || reentry) {
                    return '';
                }
                {
                    var frame = componentFrameCache.get(fn);
                    if (frame !== undefined) {
                        return frame;
                    }
                }
                var control;
                reentry = true;
                var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
                Error.prepareStackTrace = undefined;
                var previousDispatcher;
                {
                    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
                    // for warnings.
                    ReactCurrentDispatcher.current = null;
                    disableLogs();
                }
                try {
                    // This should throw.
                    if (construct) {
                        // Something should be setting the props in the constructor.
                        var Fake = function () {
                            throw Error();
                        }; // $FlowFixMe
                        Object.defineProperty(Fake.prototype, 'props', {
                            set: function () {
                                // We use a throwing setter instead of frozen or non-writable props
                                // because that won't throw in a non-strict mode function.
                                throw Error();
                            }
                        });
                        if (typeof Reflect === 'object' && Reflect.construct) {
                            // We construct a different control for this case to include any extra
                            // frames added by the construct call.
                            try {
                                Reflect.construct(Fake, []);
                            }
                            catch (x) {
                                control = x;
                            }
                            Reflect.construct(fn, [], Fake);
                        }
                        else {
                            try {
                                Fake.call();
                            }
                            catch (x) {
                                control = x;
                            }
                            fn.call(Fake.prototype);
                        }
                    }
                    else {
                        try {
                            throw Error();
                        }
                        catch (x) {
                            control = x;
                        }
                        fn();
                    }
                }
                catch (sample) {
                    // This is inlined manually because closure doesn't do it for us.
                    if (sample && control && typeof sample.stack === 'string') {
                        // This extracts the first frame from the sample that isn't also in the control.
                        // Skipping one frame that we assume is the frame that calls the two.
                        var sampleLines = sample.stack.split('\n');
                        var controlLines = control.stack.split('\n');
                        var s = sampleLines.length - 1;
                        var c = controlLines.length - 1;
                        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                            // We expect at least one stack frame to be shared.
                            // Typically this will be the root most one. However, stack frames may be
                            // cut off due to maximum stack limits. In this case, one maybe cut off
                            // earlier than the other. We assume that the sample is longer or the same
                            // and there for cut off earlier. So we should find the root most frame in
                            // the sample somewhere in the control.
                            c--;
                        }
                        for (; s >= 1 && c >= 0; s--, c--) {
                            // Next we find the first one that isn't the same which should be the
                            // frame that called our sample function and the control.
                            if (sampleLines[s] !== controlLines[c]) {
                                // In V8, the first line is describing the message but other VMs don't.
                                // If we're about to return the first line, and the control is also on the same
                                // line, that's a pretty good indicator that our sample threw at same line as
                                // the control. I.e. before we entered the sample frame. So we ignore this result.
                                // This can happen if you passed a class to function component, or non-function.
                                if (s !== 1 || c !== 1) {
                                    do {
                                        s--;
                                        c--; // We may still have similar intermediate frames from the construct call.
                                        // The next one that isn't the same should be our match though.
                                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                                            // but we have a user-provided "displayName"
                                            // splice it in to make the stack more readable.
                                            if (fn.displayName && _frame.includes('<anonymous>')) {
                                                _frame = _frame.replace('<anonymous>', fn.displayName);
                                            }
                                            {
                                                if (typeof fn === 'function') {
                                                    componentFrameCache.set(fn, _frame);
                                                }
                                            } // Return the line we found.
                                            return _frame;
                                        }
                                    } while (s >= 1 && c >= 0);
                                }
                                break;
                            }
                        }
                    }
                }
                finally {
                    reentry = false;
                    {
                        ReactCurrentDispatcher.current = previousDispatcher;
                        reenableLogs();
                    }
                    Error.prepareStackTrace = previousPrepareStackTrace;
                } // Fallback to just using the name if we couldn't make it throw.
                var name = fn ? fn.displayName || fn.name : '';
                var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
                {
                    if (typeof fn === 'function') {
                        componentFrameCache.set(fn, syntheticFrame);
                    }
                }
                return syntheticFrame;
            }
            function describeFunctionComponentFrame(fn, source, ownerFn) {
                {
                    return describeNativeComponentFrame(fn, false);
                }
            }
            function shouldConstruct(Component) {
                var prototype = Component.prototype;
                return !!(prototype && prototype.isReactComponent);
            }
            function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
                if (type == null) {
                    return '';
                }
                if (typeof type === 'function') {
                    {
                        return describeNativeComponentFrame(type, shouldConstruct(type));
                    }
                }
                if (typeof type === 'string') {
                    return describeBuiltInComponentFrame(type);
                }
                switch (type) {
                    case REACT_SUSPENSE_TYPE:
                        return describeBuiltInComponentFrame('Suspense');
                    case REACT_SUSPENSE_LIST_TYPE:
                        return describeBuiltInComponentFrame('SuspenseList');
                }
                if (typeof type === 'object') {
                    switch (type.$$typeof) {
                        case REACT_FORWARD_REF_TYPE:
                            return describeFunctionComponentFrame(type.render);
                        case REACT_MEMO_TYPE:
                            // Memo may contain any component type so we recursively resolve it.
                            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                        case REACT_LAZY_TYPE:
                            {
                                var lazyComponent = type;
                                var payload = lazyComponent._payload;
                                var init = lazyComponent._init;
                                try {
                                    // Lazy may contain any component type so we recursively resolve it.
                                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                                }
                                catch (x) { }
                            }
                    }
                }
                return '';
            }
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var loggedTypeFailures = {};
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            function setCurrentlyValidatingElement(element) {
                {
                    if (element) {
                        var owner = element._owner;
                        var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                        ReactDebugCurrentFrame.setExtraStackFrame(stack);
                    }
                    else {
                        ReactDebugCurrentFrame.setExtraStackFrame(null);
                    }
                }
            }
            function checkPropTypes(typeSpecs, values, location, componentName, element) {
                {
                    // $FlowFixMe This is okay but Flow doesn't know it.
                    var has = Function.call.bind(hasOwnProperty);
                    for (var typeSpecName in typeSpecs) {
                        if (has(typeSpecs, typeSpecName)) {
                            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                            // fail the render phase where it didn't fail before. So we log it.
                            // After these have been cleaned up, we'll let them throw.
                            try {
                                // This is intentionally an invariant that gets caught. It's the same
                                // behavior as without this statement except with a better message.
                                if (typeof typeSpecs[typeSpecName] !== 'function') {
                                    // eslint-disable-next-line react-internal/prod-error-codes
                                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                                    err.name = 'Invariant Violation';
                                    throw err;
                                }
                                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
                            }
                            catch (ex) {
                                error$1 = ex;
                            }
                            if (error$1 && !(error$1 instanceof Error)) {
                                setCurrentlyValidatingElement(element);
                                error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
                                setCurrentlyValidatingElement(null);
                            }
                            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                                // Only monitor this failure once because there tends to be a lot of the
                                // same error.
                                loggedTypeFailures[error$1.message] = true;
                                setCurrentlyValidatingElement(element);
                                error('Failed %s type: %s', location, error$1.message);
                                setCurrentlyValidatingElement(null);
                            }
                        }
                    }
                }
            }
            var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
            function isArray(a) {
                return isArrayImpl(a);
            }
            /*
             * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
             * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
             *
             * The functions in this module will throw an easier-to-understand,
             * easier-to-debug exception with a clear errors message message explaining the
             * problem. (Instead of a confusing exception thrown inside the implementation
             * of the `value` object).
             */
            // $FlowFixMe only called in DEV, so void return is not possible.
            function typeName(value) {
                {
                    // toStringTag is needed for namespaced types like Temporal.Instant
                    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
                    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
                    return type;
                }
            } // $FlowFixMe only called in DEV, so void return is not possible.
            function willCoercionThrow(value) {
                {
                    try {
                        testStringCoercion(value);
                        return false;
                    }
                    catch (e) {
                        return true;
                    }
                }
            }
            function testStringCoercion(value) {
                // If you ended up here by following an exception call stack, here's what's
                // happened: you supplied an object or symbol value to React (as a prop, key,
                // DOM attribute, CSS property, string ref, etc.) and when React tried to
                // coerce it to a string using `'' + value`, an exception was thrown.
                //
                // The most common types that will cause this exception are `Symbol` instances
                // and Temporal objects like `Temporal.Instant`. But any object that has a
                // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
                // exception. (Library authors do this to prevent users from using built-in
                // numeric operators like `+` or comparison operators like `>=` because custom
                // methods are needed to perform accurate arithmetic or comparison.)
                //
                // To fix the problem, coerce this object or symbol value to a string before
                // passing it to React. The most reliable way is usually `String(value)`.
                //
                // To find which value is throwing, check the browser or debugger console.
                // Before this exception was thrown, there should be `console.error` output
                // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
                // problem and how that type was used: key, atrribute, input value prop, etc.
                // In most cases, this console output also shows the component and its
                // ancestor components where the exception happened.
                //
                // eslint-disable-next-line react-internal/safe-string-coercion
                return '' + value;
            }
            function checkKeyStringCoercion(value) {
                {
                    if (willCoercionThrow(value)) {
                        error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));
                        return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
                    }
                }
            }
            var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
            var RESERVED_PROPS = {
                key: true,
                ref: true,
                __self: true,
                __source: true
            };
            var specialPropKeyWarningShown;
            var specialPropRefWarningShown;
            var didWarnAboutStringRefs;
            {
                didWarnAboutStringRefs = {};
            }
            function hasValidRef(config) {
                {
                    if (hasOwnProperty.call(config, 'ref')) {
                        var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
                        if (getter && getter.isReactWarning) {
                            return false;
                        }
                    }
                }
                return config.ref !== undefined;
            }
            function hasValidKey(config) {
                {
                    if (hasOwnProperty.call(config, 'key')) {
                        var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
                        if (getter && getter.isReactWarning) {
                            return false;
                        }
                    }
                }
                return config.key !== undefined;
            }
            function warnIfStringRefCannotBeAutoConverted(config, self) {
                {
                    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
                        var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                        if (!didWarnAboutStringRefs[componentName]) {
                            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                            didWarnAboutStringRefs[componentName] = true;
                        }
                    }
                }
            }
            function defineKeyPropWarningGetter(props, displayName) {
                {
                    var warnAboutAccessingKey = function () {
                        if (!specialPropKeyWarningShown) {
                            specialPropKeyWarningShown = true;
                            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
                        }
                    };
                    warnAboutAccessingKey.isReactWarning = true;
                    Object.defineProperty(props, 'key', {
                        get: warnAboutAccessingKey,
                        configurable: true
                    });
                }
            }
            function defineRefPropWarningGetter(props, displayName) {
                {
                    var warnAboutAccessingRef = function () {
                        if (!specialPropRefWarningShown) {
                            specialPropRefWarningShown = true;
                            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
                        }
                    };
                    warnAboutAccessingRef.isReactWarning = true;
                    Object.defineProperty(props, 'ref', {
                        get: warnAboutAccessingRef,
                        configurable: true
                    });
                }
            }
            /**
             * Factory method to create a new React element. This no longer adheres to
             * the class pattern, so do not use new to call it. Also, instanceof check
             * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
             * if something is a React Element.
             *
             * @param {*} type
             * @param {*} props
             * @param {*} key
             * @param {string|object} ref
             * @param {*} owner
             * @param {*} self A *temporary* helper to detect places where `this` is
             * different from the `owner` when React.createElement is called, so that we
             * can warn. We want to get rid of owner and replace string `ref`s with arrow
             * functions, and as long as `this` and owner are the same, there will be no
             * change in behavior.
             * @param {*} source An annotation object (added by a transpiler or otherwise)
             * indicating filename, line number, and/or other information.
             * @internal
             */
            var ReactElement = function (type, key, ref, self, source, owner, props) {
                var element = {
                    // This tag allows us to uniquely identify this as a React Element
                    $$typeof: REACT_ELEMENT_TYPE,
                    // Built-in properties that belong on the element
                    type: type,
                    key: key,
                    ref: ref,
                    props: props,
                    // Record the component responsible for creating this element.
                    _owner: owner
                };
                {
                    // The validation flag is currently mutative. We put it on
                    // an external backing store so that we can freeze the whole object.
                    // This can be replaced with a WeakMap once they are implemented in
                    // commonly used development environments.
                    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
                    // the validation flag non-enumerable (where possible, which should
                    // include every environment we run tests in), so the test framework
                    // ignores it.
                    Object.defineProperty(element._store, 'validated', {
                        configurable: false,
                        enumerable: false,
                        writable: true,
                        value: false
                    }); // self and source are DEV only properties.
                    Object.defineProperty(element, '_self', {
                        configurable: false,
                        enumerable: false,
                        writable: false,
                        value: self
                    }); // Two elements created in two different places should be considered
                    // equal for testing purposes and therefore we hide it from enumeration.
                    Object.defineProperty(element, '_source', {
                        configurable: false,
                        enumerable: false,
                        writable: false,
                        value: source
                    });
                    if (Object.freeze) {
                        Object.freeze(element.props);
                        Object.freeze(element);
                    }
                }
                return element;
            };
            /**
             * https://github.com/reactjs/rfcs/pull/107
             * @param {*} type
             * @param {object} props
             * @param {string} key
             */
            function jsxDEV(type, config, maybeKey, source, self) {
                {
                    var propName; // Reserved names are extracted
                    var props = {};
                    var key = null;
                    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
                    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
                    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
                    // but as an intermediary step, we will use jsxDEV for everything except
                    // <div {...props} key="Hi" />, because we aren't currently able to tell if
                    // key is explicitly declared to be undefined or not.
                    if (maybeKey !== undefined) {
                        {
                            checkKeyStringCoercion(maybeKey);
                        }
                        key = '' + maybeKey;
                    }
                    if (hasValidKey(config)) {
                        {
                            checkKeyStringCoercion(config.key);
                        }
                        key = '' + config.key;
                    }
                    if (hasValidRef(config)) {
                        ref = config.ref;
                        warnIfStringRefCannotBeAutoConverted(config, self);
                    } // Remaining properties are added to a new props object
                    for (propName in config) {
                        if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                            props[propName] = config[propName];
                        }
                    } // Resolve default props
                    if (type && type.defaultProps) {
                        var defaultProps = type.defaultProps;
                        for (propName in defaultProps) {
                            if (props[propName] === undefined) {
                                props[propName] = defaultProps[propName];
                            }
                        }
                    }
                    if (key || ref) {
                        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
                        if (key) {
                            defineKeyPropWarningGetter(props, displayName);
                        }
                        if (ref) {
                            defineRefPropWarningGetter(props, displayName);
                        }
                    }
                    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
                }
            }
            var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
            var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
            function setCurrentlyValidatingElement$1(element) {
                {
                    if (element) {
                        var owner = element._owner;
                        var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                        ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                    }
                    else {
                        ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                    }
                }
            }
            var propTypesMisspellWarningShown;
            {
                propTypesMisspellWarningShown = false;
            }
            /**
             * Verifies the object is a ReactElement.
             * See https://reactjs.org/docs/react-api.html#isvalidelement
             * @param {?object} object
             * @return {boolean} True if `object` is a ReactElement.
             * @final
             */
            function isValidElement(object) {
                {
                    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                }
            }
            function getDeclarationErrorAddendum() {
                {
                    if (ReactCurrentOwner$1.current) {
                        var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                        if (name) {
                            return '\n\nCheck the render method of `' + name + '`.';
                        }
                    }
                    return '';
                }
            }
            function getSourceInfoErrorAddendum(source) {
                {
                    if (source !== undefined) {
                        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
                        var lineNumber = source.lineNumber;
                        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
                    }
                    return '';
                }
            }
            /**
             * Warn if there's no key explicitly set on dynamic arrays of children or
             * object keys are not valid. This allows us to keep track of children between
             * updates.
             */
            var ownerHasKeyUseWarning = {};
            function getCurrentComponentErrorInfo(parentType) {
                {
                    var info = getDeclarationErrorAddendum();
                    if (!info) {
                        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
                        if (parentName) {
                            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                        }
                    }
                    return info;
                }
            }
            /**
             * Warn if the element doesn't have an explicit key assigned to it.
             * This element is in an array. The array could grow and shrink or be
             * reordered. All children that haven't already been validated are required to
             * have a "key" property assigned to it. Error statuses are cached so a warning
             * will only be shown once.
             *
             * @internal
             * @param {ReactElement} element Element that requires a key.
             * @param {*} parentType element's parent's type.
             */
            function validateExplicitKey(element, parentType) {
                {
                    if (!element._store || element._store.validated || element.key != null) {
                        return;
                    }
                    element._store.validated = true;
                    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
                    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                        return;
                    }
                    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
                    // property, it may be the creator of the child that's responsible for
                    // assigning it a key.
                    var childOwner = '';
                    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                        // Give the component that originally created this child.
                        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
                    }
                    setCurrentlyValidatingElement$1(element);
                    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
                    setCurrentlyValidatingElement$1(null);
                }
            }
            /**
             * Ensure that every element either is passed in a static location, in an
             * array with an explicit keys property defined, or in an object literal
             * with valid key property.
             *
             * @internal
             * @param {ReactNode} node Statically passed child of any type.
             * @param {*} parentType node's parent's type.
             */
            function validateChildKeys(node, parentType) {
                {
                    if (typeof node !== 'object') {
                        return;
                    }
                    if (isArray(node)) {
                        for (var i = 0; i < node.length; i++) {
                            var child = node[i];
                            if (isValidElement(child)) {
                                validateExplicitKey(child, parentType);
                            }
                        }
                    }
                    else if (isValidElement(node)) {
                        // This element was passed in a valid location.
                        if (node._store) {
                            node._store.validated = true;
                        }
                    }
                    else if (node) {
                        var iteratorFn = getIteratorFn(node);
                        if (typeof iteratorFn === 'function') {
                            // Entry iterators used to provide implicit keys,
                            // but now we print a separate warning for them later.
                            if (iteratorFn !== node.entries) {
                                var iterator = iteratorFn.call(node);
                                var step;
                                while (!(step = iterator.next()).done) {
                                    if (isValidElement(step.value)) {
                                        validateExplicitKey(step.value, parentType);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            /**
             * Given an element, validate that its props follow the propTypes definition,
             * provided by the type.
             *
             * @param {ReactElement} element
             */
            function validatePropTypes(element) {
                {
                    var type = element.type;
                    if (type === null || type === undefined || typeof type === 'string') {
                        return;
                    }
                    var propTypes;
                    if (typeof type === 'function') {
                        propTypes = type.propTypes;
                    }
                    else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
                        // Inner props are checked in the reconciler.
                        type.$$typeof === REACT_MEMO_TYPE)) {
                        propTypes = type.propTypes;
                    }
                    else {
                        return;
                    }
                    if (propTypes) {
                        // Intentionally inside to avoid triggering lazy initializers:
                        var name = getComponentNameFromType(type);
                        checkPropTypes(propTypes, element.props, 'prop', name, element);
                    }
                    else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
                        propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
                        var _name = getComponentNameFromType(type);
                        error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
                    }
                    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
                        error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
                    }
                }
            }
            /**
             * Given a fragment, validate that it can only be provided with fragment props
             * @param {ReactElement} fragment
             */
            function validateFragmentProps(fragment) {
                {
                    var keys = Object.keys(fragment.props);
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        if (key !== 'children' && key !== 'key') {
                            setCurrentlyValidatingElement$1(fragment);
                            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
                            setCurrentlyValidatingElement$1(null);
                            break;
                        }
                    }
                    if (fragment.ref !== null) {
                        setCurrentlyValidatingElement$1(fragment);
                        error('Invalid attribute `ref` supplied to `React.Fragment`.');
                        setCurrentlyValidatingElement$1(null);
                    }
                }
            }
            function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
                {
                    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
                    // succeed and there will likely be errors in render.
                    if (!validType) {
                        var info = '';
                        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
                        }
                        var sourceInfo = getSourceInfoErrorAddendum(source);
                        if (sourceInfo) {
                            info += sourceInfo;
                        }
                        else {
                            info += getDeclarationErrorAddendum();
                        }
                        var typeString;
                        if (type === null) {
                            typeString = 'null';
                        }
                        else if (isArray(type)) {
                            typeString = 'array';
                        }
                        else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                            typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
                            info = ' Did you accidentally export a JSX literal instead of a component?';
                        }
                        else {
                            typeString = typeof type;
                        }
                        error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
                    }
                    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
                    // TODO: Drop this when these are no longer allowed as the type argument.
                    if (element == null) {
                        return element;
                    } // Skip key warning if the type isn't valid since our key validation logic
                    // doesn't expect a non-string/function type and can throw confusing errors.
                    // We don't want exception behavior to differ between dev and prod.
                    // (Rendering will throw with a helpful message and as soon as the type is
                    // fixed, the key warnings will appear.)
                    if (validType) {
                        var children = props.children;
                        if (children !== undefined) {
                            if (isStaticChildren) {
                                if (isArray(children)) {
                                    for (var i = 0; i < children.length; i++) {
                                        validateChildKeys(children[i], type);
                                    }
                                    if (Object.freeze) {
                                        Object.freeze(children);
                                    }
                                }
                                else {
                                    error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
                                }
                            }
                            else {
                                validateChildKeys(children, type);
                            }
                        }
                    }
                    if (type === REACT_FRAGMENT_TYPE) {
                        validateFragmentProps(element);
                    }
                    else {
                        validatePropTypes(element);
                    }
                    return element;
                }
            } // These two functions exist to still get child warnings in dev
            // even with the prod transform. This means that jsxDEV is purely
            // opt-in behavior for better messages but that we won't stop
            // giving you warnings if you use production apis.
            function jsxWithValidationStatic(type, props, key) {
                {
                    return jsxWithValidation(type, props, key, true);
                }
            }
            function jsxWithValidationDynamic(type, props, key) {
                {
                    return jsxWithValidation(type, props, key, false);
                }
            }
            var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
            // for now we can ship identical prod functions
            var jsxs = jsxWithValidationStatic;
            reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
            reactJsxRuntime_development.jsx = jsx;
            reactJsxRuntime_development.jsxs = jsxs;
        })();
    }
    return reactJsxRuntime_development;
}
if (process.env.NODE_ENV === 'production') {
    jsxRuntime.exports = requireReactJsxRuntime_production_min();
}
else {
    jsxRuntime.exports = requireReactJsxRuntime_development();
}
var jsxRuntimeExports = jsxRuntime.exports;
/** Returns true when the props are of type {@link DayPickerMultipleProps}. */
function isDayPickerMultiple(props) {
    return props.mode === 'multiple';
}
/** Returns true when the props are of type {@link DayPickerRangeProps}. */
function isDayPickerRange(props) {
    return props.mode === 'range';
}
/** Returns true when the props are of type {@link DayPickerSingleProps}. */
function isDayPickerSingle(props) {
    return props.mode === 'single';
}
/**
 * The name of the default CSS classes.
 */
var defaultClassNames = {
    root: 'rdp',
    multiple_months: 'rdp-multiple_months',
    with_weeknumber: 'rdp-with_weeknumber',
    vhidden: 'rdp-vhidden',
    button_reset: 'rdp-button_reset',
    button: 'rdp-button',
    caption: 'rdp-caption',
    caption_start: 'rdp-caption_start',
    caption_end: 'rdp-caption_end',
    caption_between: 'rdp-caption_between',
    caption_label: 'rdp-caption_label',
    caption_dropdowns: 'rdp-caption_dropdowns',
    dropdown: 'rdp-dropdown',
    dropdown_month: 'rdp-dropdown_month',
    dropdown_year: 'rdp-dropdown_year',
    dropdown_icon: 'rdp-dropdown_icon',
    months: 'rdp-months',
    month: 'rdp-month',
    table: 'rdp-table',
    tbody: 'rdp-tbody',
    tfoot: 'rdp-tfoot',
    head: 'rdp-head',
    head_row: 'rdp-head_row',
    head_cell: 'rdp-head_cell',
    nav: 'rdp-nav',
    nav_button: 'rdp-nav_button',
    nav_button_previous: 'rdp-nav_button_previous',
    nav_button_next: 'rdp-nav_button_next',
    nav_icon: 'rdp-nav_icon',
    row: 'rdp-row',
    weeknumber: 'rdp-weeknumber',
    cell: 'rdp-cell',
    day: 'rdp-day',
    day_today: 'rdp-day_today',
    day_outside: 'rdp-day_outside',
    day_selected: 'rdp-day_selected',
    day_disabled: 'rdp-day_disabled',
    day_hidden: 'rdp-day_hidden',
    day_range_start: 'rdp-day_range_start',
    day_range_end: 'rdp-day_range_end',
    day_range_middle: 'rdp-day_range_middle'
};
/**
 * The default formatter for the caption.
 */
function formatCaption(month, options) {
    return format(month, 'LLLL y', options);
}
/**
 * The default formatter for the Day button.
 */
function formatDay(day, options) {
    return format(day, 'd', options);
}
/**
 * The default formatter for the Month caption.
 */
function formatMonthCaption(month, options) {
    return format(month, 'LLLL', options);
}
/**
 * The default formatter for the week number.
 */
function formatWeekNumber(weekNumber) {
    return "".concat(weekNumber);
}
/**
 * The default formatter for the name of the weekday.
 */
function formatWeekdayName(weekday, options) {
    return format(weekday, 'cccccc', options);
}
/**
 * The default formatter for the Year caption.
 */
function formatYearCaption(year, options) {
    return format(year, 'yyyy', options);
}
var formatters = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    formatCaption: formatCaption,
    formatDay: formatDay,
    formatMonthCaption: formatMonthCaption,
    formatWeekNumber: formatWeekNumber,
    formatWeekdayName: formatWeekdayName,
    formatYearCaption: formatYearCaption
});
/**
 * The default ARIA label for the day button.
 */
var labelDay = function (day, activeModifiers, options) {
    return format(day, 'do MMMM (EEEE)', options);
};
/**
 * The default ARIA label for the WeekNumber element.
 */
var labelMonthDropdown = function () {
    return 'Month: ';
};
/**
 * The default ARIA label for next month button in navigation
 */
var labelNext = function () {
    return 'Go to next month';
};
/**
 * The default ARIA label for previous month button in navigation
 */
var labelPrevious = function () {
    return 'Go to previous month';
};
/**
 * The default ARIA label for the Weekday element.
 */
var labelWeekday = function (day, options) {
    return format(day, 'cccc', options);
};
/**
 * The default ARIA label for the WeekNumber element.
 */
var labelWeekNumber = function (n) {
    return "Week n. ".concat(n);
};
/**
 * The default ARIA label for the WeekNumber element.
 */
var labelYearDropdown = function () {
    return 'Year: ';
};
var labels = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    labelDay: labelDay,
    labelMonthDropdown: labelMonthDropdown,
    labelNext: labelNext,
    labelPrevious: labelPrevious,
    labelWeekNumber: labelWeekNumber,
    labelWeekday: labelWeekday,
    labelYearDropdown: labelYearDropdown
});
/**
 * Returns the default values to use in the DayPickerContext, in case they are
 * not passed down with the DayPicker initial props.
 */
function getDefaultContextValues() {
    var captionLayout = 'buttons';
    var classNames = defaultClassNames;
    var locale = enUS;
    var modifiersClassNames = {};
    var modifiers = {};
    var numberOfMonths = 1;
    var styles = {};
    var today = new Date();
    return {
        captionLayout: captionLayout,
        classNames: classNames,
        formatters: formatters,
        labels: labels,
        locale: locale,
        modifiersClassNames: modifiersClassNames,
        modifiers: modifiers,
        numberOfMonths: numberOfMonths,
        styles: styles,
        today: today,
        mode: 'default'
    };
}
/** Return the `fromDate` and `toDate` prop values values parsing the DayPicker props. */
function parseFromToProps(props) {
    var fromYear = props.fromYear, toYear = props.toYear, fromMonth = props.fromMonth, toMonth = props.toMonth;
    var fromDate = props.fromDate, toDate = props.toDate;
    if (fromMonth) {
        fromDate = startOfMonth(fromMonth);
    }
    else if (fromYear) {
        fromDate = new Date(fromYear, 0, 1);
    }
    if (toMonth) {
        toDate = endOfMonth$2(toMonth);
    }
    else if (toYear) {
        toDate = new Date(toYear, 11, 31);
    }
    return {
        fromDate: fromDate ? startOfDay$2(fromDate) : undefined,
        toDate: toDate ? startOfDay$2(toDate) : undefined
    };
}
/**
 * The DayPicker context shares the props passed to DayPicker within internal
 * and custom components. It is used to set the default values and perform
 * one-time calculations required to render the days.
 *
 * Access to this context from the {@link useDayPicker} hook.
 */
var DayPickerContext = React.createContext(undefined);
/**
 * The provider for the {@link DayPickerContext}, assigning the defaults from the
 * initial DayPicker props.
 */
function DayPickerProvider(props) {
    var _a;
    var initialProps = props.initialProps;
    var defaultContextValues = getDefaultContextValues();
    var _b = parseFromToProps(initialProps), fromDate = _b.fromDate, toDate = _b.toDate;
    var captionLayout = (_a = initialProps.captionLayout) !== null && _a !== void 0 ? _a : defaultContextValues.captionLayout;
    if (captionLayout !== 'buttons' && (!fromDate || !toDate)) {
        // When no from/to dates are set, the caption is always buttons
        captionLayout = 'buttons';
    }
    var onSelect;
    if (isDayPickerSingle(initialProps) ||
        isDayPickerMultiple(initialProps) ||
        isDayPickerRange(initialProps)) {
        onSelect = initialProps.onSelect;
    }
    var value = __assign(__assign(__assign({}, defaultContextValues), initialProps), { captionLayout: captionLayout, classNames: __assign(__assign({}, defaultContextValues.classNames), initialProps.classNames), components: __assign({}, initialProps.components), formatters: __assign(__assign({}, defaultContextValues.formatters), initialProps.formatters), fromDate: fromDate, labels: __assign(__assign({}, defaultContextValues.labels), initialProps.labels), mode: initialProps.mode || defaultContextValues.mode, modifiers: __assign(__assign({}, defaultContextValues.modifiers), initialProps.modifiers), modifiersClassNames: __assign(__assign({}, defaultContextValues.modifiersClassNames), initialProps.modifiersClassNames), onSelect: onSelect, styles: __assign(__assign({}, defaultContextValues.styles), initialProps.styles), toDate: toDate });
    return (jsxRuntimeExports.jsx(DayPickerContext.Provider, __assign({ value: value }, { children: props.children })));
}
/**
 * Hook to access the {@link DayPickerContextValue}.
 *
 * Use the DayPicker context to access to the props passed to DayPicker inside
 * internal or custom components.
 */
function useDayPicker() {
    var context = React.useContext(DayPickerContext);
    if (!context) {
        throw new Error("useDayPicker must be used within a DayPickerProvider.");
    }
    return context;
}
/** Render the caption for the displayed month. This component is used when `captionLayout="buttons"`. */
function CaptionLabel(props) {
    var _a = useDayPicker(), locale = _a.locale, classNames = _a.classNames, styles = _a.styles, formatCaption = _a.formatters.formatCaption;
    return (jsxRuntimeExports.jsx("div", __assign({ className: classNames.caption_label, style: styles.caption_label, "aria-live": "polite", role: "presentation", id: props.id }, { children: formatCaption(props.displayMonth, { locale: locale }) })));
}
/**
 * Render the icon in the styled drop-down.
 */
function IconDropdown(props) {
    return (jsxRuntimeExports.jsx("svg", __assign({ width: "8px", height: "8px", viewBox: "0 0 120 120", "data-testid": "iconDropdown" }, props, { children: jsxRuntimeExports.jsx("path", { d: "M4.22182541,48.2218254 C8.44222828,44.0014225 15.2388494,43.9273804 19.5496459,47.9996989 L19.7781746,48.2218254 L60,88.443 L100.221825,48.2218254 C104.442228,44.0014225 111.238849,43.9273804 115.549646,47.9996989 L115.778175,48.2218254 C119.998577,52.4422283 120.07262,59.2388494 116.000301,63.5496459 L115.778175,63.7781746 L67.7781746,111.778175 C63.5577717,115.998577 56.7611506,116.07262 52.4503541,112.000301 L52.2218254,111.778175 L4.22182541,63.7781746 C-0.0739418023,59.4824074 -0.0739418023,52.5175926 4.22182541,48.2218254 Z", fill: "currentColor", fillRule: "nonzero" }) })));
}
/**
 * Render a styled select component – displaying a caption and a custom
 * drop-down icon.
 */
function Dropdown$1(props) {
    var _a, _b;
    var onChange = props.onChange, value = props.value, children = props.children, caption = props.caption, className = props.className, style = props.style;
    var dayPicker = useDayPicker();
    var IconDropdownComponent = (_b = (_a = dayPicker.components) === null || _a === void 0 ? void 0 : _a.IconDropdown) !== null && _b !== void 0 ? _b : IconDropdown;
    return (jsxRuntimeExports.jsxs("div", __assign({ className: className, style: style }, { children: [jsxRuntimeExports.jsx("span", __assign({ className: dayPicker.classNames.vhidden }, { children: props['aria-label'] })), jsxRuntimeExports.jsx("select", __assign({ name: props.name, "aria-label": props['aria-label'], className: dayPicker.classNames.dropdown, style: dayPicker.styles.dropdown, value: value, onChange: onChange }, { children: children })), jsxRuntimeExports.jsxs("div", __assign({ className: dayPicker.classNames.caption_label, style: dayPicker.styles.caption_label, "aria-hidden": "true" }, { children: [caption, jsxRuntimeExports.jsx(IconDropdownComponent, { className: dayPicker.classNames.dropdown_icon, style: dayPicker.styles.dropdown_icon })] }))] })));
}
/** Render the dropdown to navigate between months. */
function MonthsDropdown(props) {
    var _a;
    var _b = useDayPicker(), fromDate = _b.fromDate, toDate = _b.toDate, styles = _b.styles, locale = _b.locale, formatMonthCaption = _b.formatters.formatMonthCaption, classNames = _b.classNames, components = _b.components, labelMonthDropdown = _b.labels.labelMonthDropdown;
    // Dropdown should appear only when both from/toDate is set
    if (!fromDate)
        return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
    if (!toDate)
        return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
    var dropdownMonths = [];
    if (isSameYear(fromDate, toDate)) {
        // only display the months included in the range
        var date = startOfMonth(fromDate);
        for (var month = fromDate.getMonth(); month <= toDate.getMonth(); month++) {
            dropdownMonths.push(setMonth(date, month));
        }
    }
    else {
        // display all the 12 months
        var date = startOfMonth(new Date()); // Any date should be OK, as we just need the year
        for (var month = 0; month <= 11; month++) {
            dropdownMonths.push(setMonth(date, month));
        }
    }
    var handleChange = function (e) {
        var selectedMonth = Number(e.target.value);
        var newMonth = setMonth(startOfMonth(props.displayMonth), selectedMonth);
        props.onChange(newMonth);
    };
    var DropdownComponent = (_a = components === null || components === void 0 ? void 0 : components.Dropdown) !== null && _a !== void 0 ? _a : Dropdown$1;
    return (jsxRuntimeExports.jsx(DropdownComponent, __assign({ name: "months", "aria-label": labelMonthDropdown(), className: classNames.dropdown_month, style: styles.dropdown_month, onChange: handleChange, value: props.displayMonth.getMonth(), caption: formatMonthCaption(props.displayMonth, { locale: locale }) }, { children: dropdownMonths.map(function (m) { return (jsxRuntimeExports.jsx("option", __assign({ value: m.getMonth() }, { children: formatMonthCaption(m, { locale: locale }) }), m.getMonth())); }) })));
}
/**
 * Render a dropdown to change the year. Take in account the `nav.fromDate` and
 * `toDate` from context.
 */
function YearsDropdown(props) {
    var _a;
    var displayMonth = props.displayMonth;
    var _b = useDayPicker(), fromDate = _b.fromDate, toDate = _b.toDate, locale = _b.locale, styles = _b.styles, classNames = _b.classNames, components = _b.components, formatYearCaption = _b.formatters.formatYearCaption, labelYearDropdown = _b.labels.labelYearDropdown;
    var years = [];
    // Dropdown should appear only when both from/toDate is set
    if (!fromDate)
        return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
    if (!toDate)
        return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
    var fromYear = fromDate.getFullYear();
    var toYear = toDate.getFullYear();
    for (var year = fromYear; year <= toYear; year++) {
        years.push(setYear(startOfYear(new Date()), year));
    }
    var handleChange = function (e) {
        var newMonth = setYear(startOfMonth(displayMonth), Number(e.target.value));
        props.onChange(newMonth);
    };
    var DropdownComponent = (_a = components === null || components === void 0 ? void 0 : components.Dropdown) !== null && _a !== void 0 ? _a : Dropdown$1;
    return (jsxRuntimeExports.jsx(DropdownComponent, __assign({ name: "years", "aria-label": labelYearDropdown(), className: classNames.dropdown_year, style: styles.dropdown_year, onChange: handleChange, value: displayMonth.getFullYear(), caption: formatYearCaption(displayMonth, { locale: locale }) }, { children: years.map(function (year) { return (jsxRuntimeExports.jsx("option", __assign({ value: year.getFullYear() }, { children: formatYearCaption(year, { locale: locale }) }), year.getFullYear())); }) })));
}
/**
 * Helper hook for using controlled/uncontrolled values from a component props.
 *
 * When the value is not controlled, pass `undefined` as `controlledValue` and
 * use the returned setter to update it.
 *
 * When the value is controlled, pass the controlled value as second
 * argument, which will be always returned as `value`.
 */
function useControlledValue(defaultValue, controlledValue) {
    var _a = React.useState(defaultValue), uncontrolledValue = _a[0], setValue = _a[1];
    var value = controlledValue === undefined ? uncontrolledValue : controlledValue;
    return [value, setValue];
}
/** Return the initial month according to the given options. */
function getInitialMonth(context) {
    var month = context.month, defaultMonth = context.defaultMonth, today = context.today;
    var initialMonth = month || defaultMonth || today || new Date();
    var toDate = context.toDate, fromDate = context.fromDate, _a = context.numberOfMonths, numberOfMonths = _a === void 0 ? 1 : _a;
    // Fix the initialMonth if is after the to-date
    if (toDate && differenceInCalendarMonths(toDate, initialMonth) < 0) {
        var offset = -1 * (numberOfMonths - 1);
        initialMonth = addMonths(toDate, offset);
    }
    // Fix the initialMonth if is before the from-date
    if (fromDate && differenceInCalendarMonths(initialMonth, fromDate) < 0) {
        initialMonth = fromDate;
    }
    return startOfMonth(initialMonth);
}
/** Controls the navigation state. */
function useNavigationState() {
    var context = useDayPicker();
    var initialMonth = getInitialMonth(context);
    var _a = useControlledValue(initialMonth, context.month), month = _a[0], setMonth = _a[1];
    var goToMonth = function (date) {
        var _a;
        if (context.disableNavigation)
            return;
        var month = startOfMonth(date);
        setMonth(month);
        (_a = context.onMonthChange) === null || _a === void 0 ? void 0 : _a.call(context, month);
    };
    return [month, goToMonth];
}
/**
 * Return the months to display in the component according to the number of
 * months and the from/to date.
 */
function getDisplayMonths(month, _a) {
    var reverseMonths = _a.reverseMonths, numberOfMonths = _a.numberOfMonths;
    var start = startOfMonth(month);
    var end = startOfMonth(addMonths(start, numberOfMonths));
    var monthsDiff = differenceInCalendarMonths(end, start);
    var months = [];
    for (var i = 0; i < monthsDiff; i++) {
        var nextMonth = addMonths(start, i);
        months.push(nextMonth);
    }
    if (reverseMonths)
        months = months.reverse();
    return months;
}
/**
 * Returns the next month the user can navigate to according to the given
 * options.
 *
 * Please note that the next month is not always the next calendar month:
 *
 * - if after the `toDate` range, is undefined;
 * - if the navigation is paged, is the number of months displayed ahead.
 *
 */
function getNextMonth(startingMonth, options) {
    if (options.disableNavigation) {
        return undefined;
    }
    var toDate = options.toDate, pagedNavigation = options.pagedNavigation, _a = options.numberOfMonths, numberOfMonths = _a === void 0 ? 1 : _a;
    var offset = pagedNavigation ? numberOfMonths : 1;
    var month = startOfMonth(startingMonth);
    if (!toDate) {
        return addMonths(month, offset);
    }
    var monthsDiff = differenceInCalendarMonths(toDate, startingMonth);
    if (monthsDiff < numberOfMonths) {
        return undefined;
    }
    // Jump forward as the number of months when paged navigation
    return addMonths(month, offset);
}
/**
 * Returns the next previous the user can navigate to, according to the given
 * options.
 *
 * Please note that the previous month is not always the previous calendar
 * month:
 *
 * - if before the `fromDate` date, is `undefined`;
 * - if the navigation is paged, is the number of months displayed before.
 *
 */
function getPreviousMonth(startingMonth, options) {
    if (options.disableNavigation) {
        return undefined;
    }
    var fromDate = options.fromDate, pagedNavigation = options.pagedNavigation, _a = options.numberOfMonths, numberOfMonths = _a === void 0 ? 1 : _a;
    var offset = pagedNavigation ? numberOfMonths : 1;
    var month = startOfMonth(startingMonth);
    if (!fromDate) {
        return addMonths(month, -offset);
    }
    var monthsDiff = differenceInCalendarMonths(month, fromDate);
    if (monthsDiff <= 0) {
        return undefined;
    }
    // Jump back as the number of months when paged navigation
    return addMonths(month, -offset);
}
/**
 * The Navigation context shares details and methods to navigate the months in DayPicker.
 * Access this context from the {@link useNavigation} hook.
 */
var NavigationContext = React.createContext(undefined);
/** Provides the values for the {@link NavigationContext}. */
function NavigationProvider(props) {
    var dayPicker = useDayPicker();
    var _a = useNavigationState(), currentMonth = _a[0], goToMonth = _a[1];
    var displayMonths = getDisplayMonths(currentMonth, dayPicker);
    var nextMonth = getNextMonth(currentMonth, dayPicker);
    var previousMonth = getPreviousMonth(currentMonth, dayPicker);
    var isDateDisplayed = function (date) {
        return displayMonths.some(function (displayMonth) {
            return isSameMonth(date, displayMonth);
        });
    };
    var goToDate = function (date, refDate) {
        if (isDateDisplayed(date)) {
            return;
        }
        if (refDate && isBefore$2(date, refDate)) {
            goToMonth(addMonths(date, 1 + dayPicker.numberOfMonths * -1));
        }
        else {
            goToMonth(date);
        }
    };
    var value = {
        currentMonth: currentMonth,
        displayMonths: displayMonths,
        goToMonth: goToMonth,
        goToDate: goToDate,
        previousMonth: previousMonth,
        nextMonth: nextMonth,
        isDateDisplayed: isDateDisplayed
    };
    return (jsxRuntimeExports.jsx(NavigationContext.Provider, __assign({ value: value }, { children: props.children })));
}
/**
 * Hook to access the {@link NavigationContextValue}. Use this hook to navigate
 * between months or years in DayPicker.
 *
 * This hook is meant to be used inside internal or custom components.
 */
function useNavigation() {
    var context = React.useContext(NavigationContext);
    if (!context) {
        throw new Error('useNavigation must be used within a NavigationProvider');
    }
    return context;
}
/**
 * Render a caption with the dropdowns to navigate between months and years.
 */
function CaptionDropdowns(props) {
    var _a;
    var _b = useDayPicker(), classNames = _b.classNames, styles = _b.styles, components = _b.components;
    var goToMonth = useNavigation().goToMonth;
    var handleMonthChange = function (newMonth) {
        goToMonth(addMonths(newMonth, props.displayIndex ? -props.displayIndex : 0));
    };
    var CaptionLabelComponent = (_a = components === null || components === void 0 ? void 0 : components.CaptionLabel) !== null && _a !== void 0 ? _a : CaptionLabel;
    var captionLabel = (jsxRuntimeExports.jsx(CaptionLabelComponent, { id: props.id, displayMonth: props.displayMonth }));
    return (jsxRuntimeExports.jsxs("div", __assign({ className: classNames.caption_dropdowns, style: styles.caption_dropdowns }, { children: [jsxRuntimeExports.jsx("div", __assign({ className: classNames.vhidden }, { children: captionLabel })), jsxRuntimeExports.jsx(MonthsDropdown, { onChange: handleMonthChange, displayMonth: props.displayMonth }), jsxRuntimeExports.jsx(YearsDropdown, { onChange: handleMonthChange, displayMonth: props.displayMonth })] })));
}
/**
 * Render the "previous month" button in the navigation.
 */
function IconLeft(props) {
    return (jsxRuntimeExports.jsx("svg", __assign({ width: "16px", height: "16px", viewBox: "0 0 120 120" }, props, { children: jsxRuntimeExports.jsx("path", { d: "M69.490332,3.34314575 C72.6145263,0.218951416 77.6798462,0.218951416 80.8040405,3.34314575 C83.8617626,6.40086786 83.9268205,11.3179931 80.9992143,14.4548388 L80.8040405,14.6568542 L35.461,60 L80.8040405,105.343146 C83.8617626,108.400868 83.9268205,113.317993 80.9992143,116.454839 L80.8040405,116.656854 C77.7463184,119.714576 72.8291931,119.779634 69.6923475,116.852028 L69.490332,116.656854 L18.490332,65.6568542 C15.4326099,62.5991321 15.367552,57.6820069 18.2951583,54.5451612 L18.490332,54.3431458 L69.490332,3.34314575 Z", fill: "currentColor", fillRule: "nonzero" }) })));
}
/**
 * Render the "next month" button in the navigation.
 */
function IconRight(props) {
    return (jsxRuntimeExports.jsx("svg", __assign({ width: "16px", height: "16px", viewBox: "0 0 120 120" }, props, { children: jsxRuntimeExports.jsx("path", { d: "M49.8040405,3.34314575 C46.6798462,0.218951416 41.6145263,0.218951416 38.490332,3.34314575 C35.4326099,6.40086786 35.367552,11.3179931 38.2951583,14.4548388 L38.490332,14.6568542 L83.8333725,60 L38.490332,105.343146 C35.4326099,108.400868 35.367552,113.317993 38.2951583,116.454839 L38.490332,116.656854 C41.5480541,119.714576 46.4651794,119.779634 49.602025,116.852028 L49.8040405,116.656854 L100.804041,65.6568542 C103.861763,62.5991321 103.926821,57.6820069 100.999214,54.5451612 L100.804041,54.3431458 L49.8040405,3.34314575 Z", fill: "currentColor" }) })));
}
/** Render a button HTML element applying the reset class name. */
var Button = React.forwardRef(function (props, ref) {
    var _a = useDayPicker(), classNames = _a.classNames, styles = _a.styles;
    var classNamesArr = [classNames.button_reset, classNames.button];
    if (props.className) {
        classNamesArr.push(props.className);
    }
    var className = classNamesArr.join(' ');
    var style = __assign(__assign({}, styles.button_reset), styles.button);
    if (props.style) {
        Object.assign(style, props.style);
    }
    return (jsxRuntimeExports.jsx("button", __assign({}, props, { ref: ref, type: "button", className: className, style: style })));
});
/** A component rendering the navigation buttons or the drop-downs. */
function Navigation(props) {
    var _a, _b;
    var _c = useDayPicker(), dir = _c.dir, locale = _c.locale, classNames = _c.classNames, styles = _c.styles, _d = _c.labels, labelPrevious = _d.labelPrevious, labelNext = _d.labelNext, components = _c.components;
    if (!props.nextMonth && !props.previousMonth) {
        return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
    }
    var previousLabel = labelPrevious(props.previousMonth, { locale: locale });
    var previousClassName = [
        classNames.nav_button,
        classNames.nav_button_previous
    ].join(' ');
    var nextLabel = labelNext(props.nextMonth, { locale: locale });
    var nextClassName = [
        classNames.nav_button,
        classNames.nav_button_next
    ].join(' ');
    var IconRightComponent = (_a = components === null || components === void 0 ? void 0 : components.IconRight) !== null && _a !== void 0 ? _a : IconRight;
    var IconLeftComponent = (_b = components === null || components === void 0 ? void 0 : components.IconLeft) !== null && _b !== void 0 ? _b : IconLeft;
    return (jsxRuntimeExports.jsxs("div", __assign({ className: classNames.nav, style: styles.nav }, { children: [!props.hidePrevious && (jsxRuntimeExports.jsx(Button, __assign({ name: "previous-month", "aria-label": previousLabel, className: previousClassName, style: styles.nav_button_previous, disabled: !props.previousMonth, onClick: props.onPreviousClick }, { children: dir === 'rtl' ? (jsxRuntimeExports.jsx(IconRightComponent, { className: classNames.nav_icon, style: styles.nav_icon })) : (jsxRuntimeExports.jsx(IconLeftComponent, { className: classNames.nav_icon, style: styles.nav_icon })) }))), !props.hideNext && (jsxRuntimeExports.jsx(Button, __assign({ name: "next-month", "aria-label": nextLabel, className: nextClassName, style: styles.nav_button_next, disabled: !props.nextMonth, onClick: props.onNextClick }, { children: dir === 'rtl' ? (jsxRuntimeExports.jsx(IconLeftComponent, { className: classNames.nav_icon, style: styles.nav_icon })) : (jsxRuntimeExports.jsx(IconRightComponent, { className: classNames.nav_icon, style: styles.nav_icon })) })))] })));
}
/**
 * Render a caption with a button-based navigation.
 */
function CaptionNavigation(props) {
    var numberOfMonths = useDayPicker().numberOfMonths;
    var _a = useNavigation(), previousMonth = _a.previousMonth, nextMonth = _a.nextMonth, goToMonth = _a.goToMonth, displayMonths = _a.displayMonths;
    var displayIndex = displayMonths.findIndex(function (month) {
        return isSameMonth(props.displayMonth, month);
    });
    var isFirst = displayIndex === 0;
    var isLast = displayIndex === displayMonths.length - 1;
    var hideNext = numberOfMonths > 1 && (isFirst || !isLast);
    var hidePrevious = numberOfMonths > 1 && (isLast || !isFirst);
    var handlePreviousClick = function () {
        if (!previousMonth)
            return;
        goToMonth(previousMonth);
    };
    var handleNextClick = function () {
        if (!nextMonth)
            return;
        goToMonth(nextMonth);
    };
    return (jsxRuntimeExports.jsx(Navigation, { displayMonth: props.displayMonth, hideNext: hideNext, hidePrevious: hidePrevious, nextMonth: nextMonth, previousMonth: previousMonth, onPreviousClick: handlePreviousClick, onNextClick: handleNextClick }));
}
/**
 * Render the caption of a month. The caption has a different layout when
 * setting the {@link DayPickerBase.captionLayout} prop.
 */
function Caption(props) {
    var _a;
    var _b = useDayPicker(), classNames = _b.classNames, disableNavigation = _b.disableNavigation, styles = _b.styles, captionLayout = _b.captionLayout, components = _b.components;
    var CaptionLabelComponent = (_a = components === null || components === void 0 ? void 0 : components.CaptionLabel) !== null && _a !== void 0 ? _a : CaptionLabel;
    var caption;
    if (disableNavigation) {
        caption = (jsxRuntimeExports.jsx(CaptionLabelComponent, { id: props.id, displayMonth: props.displayMonth }));
    }
    else if (captionLayout === 'dropdown') {
        caption = (jsxRuntimeExports.jsx(CaptionDropdowns, { displayMonth: props.displayMonth, id: props.id }));
    }
    else if (captionLayout === 'dropdown-buttons') {
        caption = (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(CaptionDropdowns, { displayMonth: props.displayMonth, displayIndex: props.displayIndex, id: props.id }), jsxRuntimeExports.jsx(CaptionNavigation, { displayMonth: props.displayMonth, displayIndex: props.displayIndex, id: props.id })] }));
    }
    else {
        caption = (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(CaptionLabelComponent, { id: props.id, displayMonth: props.displayMonth, displayIndex: props.displayIndex }), jsxRuntimeExports.jsx(CaptionNavigation, { displayMonth: props.displayMonth, id: props.id })] }));
    }
    return (jsxRuntimeExports.jsx("div", __assign({ className: classNames.caption, style: styles.caption }, { children: caption })));
}
/** Render the Footer component (empty as default).*/
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function Footer$1(props) {
    var _a = useDayPicker(), footer = _a.footer, styles = _a.styles, tfoot = _a.classNames.tfoot;
    if (!footer)
        return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
    return (jsxRuntimeExports.jsx("tfoot", __assign({ className: tfoot, style: styles.tfoot }, { children: jsxRuntimeExports.jsx("tr", { children: jsxRuntimeExports.jsx("td", __assign({ colSpan: 8 }, { children: footer })) }) })));
}
/**
 * Generate a series of 7 days, starting from the week, to use for formatting
 * the weekday names (Monday, Tuesday, etc.).
 */
function getWeekdays(locale, 
/** The index of the first day of the week (0 - Sunday). */
weekStartsOn, 
/** Use ISOWeek instead of locale/ */
ISOWeek) {
    var start = ISOWeek
        ? startOfISOWeek(new Date())
        : startOfWeek(new Date(), { locale: locale, weekStartsOn: weekStartsOn });
    var days = [];
    for (var i = 0; i < 7; i++) {
        var day = addDays$2(start, i);
        days.push(day);
    }
    return days;
}
/**
 * Render the HeadRow component - i.e. the table head row with the weekday names.
 */
function HeadRow() {
    var _a = useDayPicker(), classNames = _a.classNames, styles = _a.styles, showWeekNumber = _a.showWeekNumber, locale = _a.locale, weekStartsOn = _a.weekStartsOn, ISOWeek = _a.ISOWeek, formatWeekdayName = _a.formatters.formatWeekdayName, labelWeekday = _a.labels.labelWeekday;
    var weekdays = getWeekdays(locale, weekStartsOn, ISOWeek);
    return (jsxRuntimeExports.jsxs("tr", __assign({ style: styles.head_row, className: classNames.head_row }, { children: [showWeekNumber && (jsxRuntimeExports.jsx("td", { style: styles.head_cell, className: classNames.head_cell })), weekdays.map(function (weekday, i) { return (jsxRuntimeExports.jsx("th", __assign({ scope: "col", className: classNames.head_cell, style: styles.head_cell, "aria-label": labelWeekday(weekday, { locale: locale }) }, { children: formatWeekdayName(weekday, { locale: locale }) }), i)); })] })));
}
/** Render the table head. */
function Head() {
    var _a;
    var _b = useDayPicker(), classNames = _b.classNames, styles = _b.styles, components = _b.components;
    var HeadRowComponent = (_a = components === null || components === void 0 ? void 0 : components.HeadRow) !== null && _a !== void 0 ? _a : HeadRow;
    return (jsxRuntimeExports.jsx("thead", __assign({ style: styles.head, className: classNames.head }, { children: jsxRuntimeExports.jsx(HeadRowComponent, {}) })));
}
/** Render the content of the day cell. */
function DayContent(props) {
    var _a = useDayPicker(), locale = _a.locale, formatDay = _a.formatters.formatDay;
    return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: formatDay(props.date, { locale: locale }) });
}
/**
 * The SelectMultiple context shares details about the selected days when in
 * multiple selection mode.
 *
 * Access this context from the {@link useSelectMultiple} hook.
 */
var SelectMultipleContext = React.createContext(undefined);
/** Provides the values for the {@link SelectMultipleContext}. */
function SelectMultipleProvider(props) {
    if (!isDayPickerMultiple(props.initialProps)) {
        var emptyContextValue = {
            selected: undefined,
            modifiers: {
                disabled: []
            }
        };
        return (jsxRuntimeExports.jsx(SelectMultipleContext.Provider, __assign({ value: emptyContextValue }, { children: props.children })));
    }
    return (jsxRuntimeExports.jsx(SelectMultipleProviderInternal, { initialProps: props.initialProps, children: props.children }));
}
function SelectMultipleProviderInternal(_a) {
    var initialProps = _a.initialProps, children = _a.children;
    var selected = initialProps.selected, min = initialProps.min, max = initialProps.max;
    var onDayClick = function (day, activeModifiers, e) {
        var _a, _b;
        (_a = initialProps.onDayClick) === null || _a === void 0 ? void 0 : _a.call(initialProps, day, activeModifiers, e);
        var isMinSelected = Boolean(activeModifiers.selected && min && (selected === null || selected === void 0 ? void 0 : selected.length) === min);
        if (isMinSelected) {
            return;
        }
        var isMaxSelected = Boolean(!activeModifiers.selected && max && (selected === null || selected === void 0 ? void 0 : selected.length) === max);
        if (isMaxSelected) {
            return;
        }
        var selectedDays = selected ? __spreadArray([], selected, true) : [];
        if (activeModifiers.selected) {
            var index = selectedDays.findIndex(function (selectedDay) {
                return isSameDay(day, selectedDay);
            });
            selectedDays.splice(index, 1);
        }
        else {
            selectedDays.push(day);
        }
        (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, selectedDays, day, activeModifiers, e);
    };
    var modifiers = {
        disabled: []
    };
    if (selected) {
        modifiers.disabled.push(function (day) {
            var isMaxSelected = max && selected.length > max - 1;
            var isSelected = selected.some(function (selectedDay) {
                return isSameDay(selectedDay, day);
            });
            return Boolean(isMaxSelected && !isSelected);
        });
    }
    var contextValue = {
        selected: selected,
        onDayClick: onDayClick,
        modifiers: modifiers
    };
    return (jsxRuntimeExports.jsx(SelectMultipleContext.Provider, __assign({ value: contextValue }, { children: children })));
}
/**
 * Hook to access the {@link SelectMultipleContextValue}.
 *
 * This hook is meant to be used inside internal or custom components.
 */
function useSelectMultiple() {
    var context = React.useContext(SelectMultipleContext);
    if (!context) {
        throw new Error('useSelectMultiple must be used within a SelectMultipleProvider');
    }
    return context;
}
/**
 * Add a day to an existing range.
 *
 * The returned range takes in account the `undefined` values and if the added
 * day is already present in the range.
 */
function addToRange(day, range) {
    var _a = range || {}, from = _a.from, to = _a.to;
    if (from && to) {
        if (isSameDay(to, day) && isSameDay(from, day)) {
            return undefined;
        }
        if (isSameDay(to, day)) {
            return { from: to, to: undefined };
        }
        if (isSameDay(from, day)) {
            return undefined;
        }
        if (isAfter$2(from, day)) {
            return { from: day, to: to };
        }
        return { from: from, to: day };
    }
    if (to) {
        if (isAfter$2(day, to)) {
            return { from: to, to: day };
        }
        return { from: day, to: to };
    }
    if (from) {
        if (isBefore$2(day, from)) {
            return { from: day, to: from };
        }
        return { from: from, to: day };
    }
    return { from: day, to: undefined };
}
/**
 * The SelectRange context shares details about the selected days when in
 * range selection mode.
 *
 * Access this context from the {@link useSelectRange} hook.
 */
var SelectRangeContext = React.createContext(undefined);
/** Provides the values for the {@link SelectRangeProvider}. */
function SelectRangeProvider(props) {
    if (!isDayPickerRange(props.initialProps)) {
        var emptyContextValue = {
            selected: undefined,
            modifiers: {
                range_start: [],
                range_end: [],
                range_middle: [],
                disabled: []
            }
        };
        return (jsxRuntimeExports.jsx(SelectRangeContext.Provider, __assign({ value: emptyContextValue }, { children: props.children })));
    }
    return (jsxRuntimeExports.jsx(SelectRangeProviderInternal, { initialProps: props.initialProps, children: props.children }));
}
function SelectRangeProviderInternal(_a) {
    var initialProps = _a.initialProps, children = _a.children;
    var selected = initialProps.selected;
    var _b = selected || {}, selectedFrom = _b.from, selectedTo = _b.to;
    var min = initialProps.min;
    var max = initialProps.max;
    var onDayClick = function (day, activeModifiers, e) {
        var _a, _b;
        (_a = initialProps.onDayClick) === null || _a === void 0 ? void 0 : _a.call(initialProps, day, activeModifiers, e);
        var newRange = addToRange(day, selected);
        (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, newRange, day, activeModifiers, e);
    };
    var modifiers = {
        range_start: [],
        range_end: [],
        range_middle: [],
        disabled: []
    };
    if (selectedFrom) {
        modifiers.range_start = [selectedFrom];
        if (!selectedTo) {
            modifiers.range_end = [selectedFrom];
        }
        else {
            modifiers.range_end = [selectedTo];
            if (!isSameDay(selectedFrom, selectedTo)) {
                modifiers.range_middle = [
                    {
                        after: selectedFrom,
                        before: selectedTo
                    }
                ];
            }
        }
    }
    else if (selectedTo) {
        modifiers.range_start = [selectedTo];
        modifiers.range_end = [selectedTo];
    }
    if (min) {
        if (selectedFrom && !selectedTo) {
            modifiers.disabled.push({
                after: subDays$2(selectedFrom, min - 1),
                before: addDays$2(selectedFrom, min - 1)
            });
        }
        if (selectedFrom && selectedTo) {
            modifiers.disabled.push({
                after: selectedFrom,
                before: addDays$2(selectedFrom, min - 1)
            });
        }
        if (!selectedFrom && selectedTo) {
            modifiers.disabled.push({
                after: subDays$2(selectedTo, min - 1),
                before: addDays$2(selectedTo, min - 1)
            });
        }
    }
    if (max) {
        if (selectedFrom && !selectedTo) {
            modifiers.disabled.push({
                before: addDays$2(selectedFrom, -max + 1)
            });
            modifiers.disabled.push({
                after: addDays$2(selectedFrom, max - 1)
            });
        }
        if (selectedFrom && selectedTo) {
            var selectedCount = differenceInCalendarDays(selectedTo, selectedFrom) + 1;
            var offset = max - selectedCount;
            modifiers.disabled.push({
                before: subDays$2(selectedFrom, offset)
            });
            modifiers.disabled.push({
                after: addDays$2(selectedTo, offset)
            });
        }
        if (!selectedFrom && selectedTo) {
            modifiers.disabled.push({
                before: addDays$2(selectedTo, -max + 1)
            });
            modifiers.disabled.push({
                after: addDays$2(selectedTo, max - 1)
            });
        }
    }
    return (jsxRuntimeExports.jsx(SelectRangeContext.Provider, __assign({ value: { selected: selected, onDayClick: onDayClick, modifiers: modifiers } }, { children: children })));
}
/**
 * Hook to access the {@link SelectRangeContextValue}.
 *
 * This hook is meant to be used inside internal or custom components.
 */
function useSelectRange() {
    var context = React.useContext(SelectRangeContext);
    if (!context) {
        throw new Error('useSelectRange must be used within a SelectRangeProvider');
    }
    return context;
}
/** Normalize to array a matcher input. */
function matcherToArray(matcher) {
    if (Array.isArray(matcher)) {
        return __spreadArray([], matcher, true);
    }
    else if (matcher !== undefined) {
        return [matcher];
    }
    else {
        return [];
    }
}
/** Create CustomModifiers from dayModifiers */
function getCustomModifiers(dayModifiers) {
    var customModifiers = {};
    Object.entries(dayModifiers).forEach(function (_a) {
        var modifier = _a[0], matcher = _a[1];
        customModifiers[modifier] = matcherToArray(matcher);
    });
    return customModifiers;
}
/** The name of the modifiers that are used internally by DayPicker. */
var InternalModifier;
(function (InternalModifier) {
    InternalModifier["Outside"] = "outside";
    /** Name of the modifier applied to the disabled days, using the `disabled` prop. */
    InternalModifier["Disabled"] = "disabled";
    /** Name of the modifier applied to the selected days using the `selected` prop). */
    InternalModifier["Selected"] = "selected";
    /** Name of the modifier applied to the hidden days using the `hidden` prop). */
    InternalModifier["Hidden"] = "hidden";
    /** Name of the modifier applied to the day specified using the `today` prop). */
    InternalModifier["Today"] = "today";
    /** The modifier applied to the day starting a selected range, when in range selection mode.  */
    InternalModifier["RangeStart"] = "range_start";
    /** The modifier applied to the day ending a selected range, when in range selection mode.  */
    InternalModifier["RangeEnd"] = "range_end";
    /** The modifier applied to the days between the start and the end of a selected range, when in range selection mode.  */
    InternalModifier["RangeMiddle"] = "range_middle";
})(InternalModifier || (InternalModifier = {}));
var Selected = InternalModifier.Selected, Disabled = InternalModifier.Disabled, Hidden = InternalModifier.Hidden, Today = InternalModifier.Today, RangeEnd = InternalModifier.RangeEnd, RangeMiddle = InternalModifier.RangeMiddle, RangeStart = InternalModifier.RangeStart, Outside = InternalModifier.Outside;
/** Return the {@link InternalModifiers} from the DayPicker and select contexts. */
function getInternalModifiers(dayPicker, selectMultiple, selectRange) {
    var _a;
    var internalModifiers = (_a = {},
        _a[Selected] = matcherToArray(dayPicker.selected),
        _a[Disabled] = matcherToArray(dayPicker.disabled),
        _a[Hidden] = matcherToArray(dayPicker.hidden),
        _a[Today] = [dayPicker.today],
        _a[RangeEnd] = [],
        _a[RangeMiddle] = [],
        _a[RangeStart] = [],
        _a[Outside] = [],
        _a);
    if (dayPicker.fromDate) {
        internalModifiers[Disabled].push({ before: dayPicker.fromDate });
    }
    if (dayPicker.toDate) {
        internalModifiers[Disabled].push({ after: dayPicker.toDate });
    }
    if (isDayPickerMultiple(dayPicker)) {
        internalModifiers[Disabled] = internalModifiers[Disabled].concat(selectMultiple.modifiers[Disabled]);
    }
    else if (isDayPickerRange(dayPicker)) {
        internalModifiers[Disabled] = internalModifiers[Disabled].concat(selectRange.modifiers[Disabled]);
        internalModifiers[RangeStart] = selectRange.modifiers[RangeStart];
        internalModifiers[RangeMiddle] = selectRange.modifiers[RangeMiddle];
        internalModifiers[RangeEnd] = selectRange.modifiers[RangeEnd];
    }
    return internalModifiers;
}
/** The Modifiers context store the modifiers used in DayPicker. To access the value of this context, use {@link useModifiers}. */
var ModifiersContext = React.createContext(undefined);
/** Provide the value for the {@link ModifiersContext}. */
function ModifiersProvider(props) {
    var dayPicker = useDayPicker();
    var selectMultiple = useSelectMultiple();
    var selectRange = useSelectRange();
    var internalModifiers = getInternalModifiers(dayPicker, selectMultiple, selectRange);
    var customModifiers = getCustomModifiers(dayPicker.modifiers);
    var modifiers = __assign(__assign({}, internalModifiers), customModifiers);
    return (jsxRuntimeExports.jsx(ModifiersContext.Provider, __assign({ value: modifiers }, { children: props.children })));
}
/**
 * Return the modifiers used by DayPicker.
 *
 * This hook is meant to be used inside internal or custom components.
 * Requires to be wrapped into {@link ModifiersProvider}.
 *
 */
function useModifiers() {
    var context = React.useContext(ModifiersContext);
    if (!context) {
        throw new Error('useModifiers must be used within a ModifiersProvider');
    }
    return context;
}
/** Returns true if `matcher` is of type {@link DateInterval}. */
function isDateInterval(matcher) {
    return Boolean(matcher &&
        typeof matcher === 'object' &&
        'before' in matcher &&
        'after' in matcher);
}
/** Returns true if `value` is a {@link DateRange} type. */
function isDateRange(value) {
    return Boolean(value && typeof value === 'object' && 'from' in value);
}
/** Returns true if `value` is of type {@link DateAfter}. */
function isDateAfterType(value) {
    return Boolean(value && typeof value === 'object' && 'after' in value);
}
/** Returns true if `value` is of type {@link DateBefore}. */
function isDateBeforeType(value) {
    return Boolean(value && typeof value === 'object' && 'before' in value);
}
/** Returns true if `value` is a {@link DayOfWeek} type. */
function isDayOfWeekType(value) {
    return Boolean(value && typeof value === 'object' && 'dayOfWeek' in value);
}
/** Return `true` whether `date` is inside `range`. */
function isDateInRange(date, range) {
    var _a;
    var from = range.from, to = range.to;
    if (from && to) {
        var isRangeInverted = differenceInCalendarDays(to, from) < 0;
        if (isRangeInverted) {
            _a = [to, from], from = _a[0], to = _a[1];
        }
        var isInRange = differenceInCalendarDays(date, from) >= 0 &&
            differenceInCalendarDays(to, date) >= 0;
        return isInRange;
    }
    if (to) {
        return isSameDay(to, date);
    }
    if (from) {
        return isSameDay(from, date);
    }
    return false;
}
/** Returns true if `value` is a Date type. */
function isDateType(value) {
    return isDate(value);
}
/** Returns true if `value` is an array of valid dates. */
function isArrayOfDates(value) {
    return Array.isArray(value) && value.every(isDate);
}
/**
 * Returns whether a day matches against at least one of the given Matchers.
 *
 * ```
 * const day = new Date(2022, 5, 19);
 * const matcher1: DateRange = {
 *    from: new Date(2021, 12, 21),
 *    to: new Date(2021, 12, 30)
 * }
 * const matcher2: DateRange = {
 *    from: new Date(2022, 5, 1),
 *    to: new Date(2022, 5, 23)
 * }
 *
 * const isMatch(day, [matcher1, matcher2]); // true, since day is in the matcher1 range.
 * ```
 * */
function isMatch(day, matchers) {
    return matchers.some(function (matcher) {
        if (typeof matcher === 'boolean') {
            return matcher;
        }
        if (isDateType(matcher)) {
            return isSameDay(day, matcher);
        }
        if (isArrayOfDates(matcher)) {
            return matcher.includes(day);
        }
        if (isDateRange(matcher)) {
            return isDateInRange(day, matcher);
        }
        if (isDayOfWeekType(matcher)) {
            return matcher.dayOfWeek.includes(day.getDay());
        }
        if (isDateInterval(matcher)) {
            var diffBefore = differenceInCalendarDays(matcher.before, day);
            var diffAfter = differenceInCalendarDays(matcher.after, day);
            var isDayBefore = diffBefore > 0;
            var isDayAfter = diffAfter < 0;
            var isClosedInterval = isAfter$2(matcher.before, matcher.after);
            if (isClosedInterval) {
                return isDayAfter && isDayBefore;
            }
            else {
                return isDayBefore || isDayAfter;
            }
        }
        if (isDateAfterType(matcher)) {
            return differenceInCalendarDays(day, matcher.after) > 0;
        }
        if (isDateBeforeType(matcher)) {
            return differenceInCalendarDays(matcher.before, day) > 0;
        }
        if (typeof matcher === 'function') {
            return matcher(day);
        }
        return false;
    });
}
/** Return the active modifiers for the given day. */
function getActiveModifiers(day, 
/** The modifiers to match for the given date. */
modifiers, 
/** The month where the day is displayed, to add the "outside" modifiers.  */
displayMonth) {
    var matchedModifiers = Object.keys(modifiers).reduce(function (result, key) {
        var modifier = modifiers[key];
        if (isMatch(day, modifier)) {
            result.push(key);
        }
        return result;
    }, []);
    var activeModifiers = {};
    matchedModifiers.forEach(function (modifier) { return (activeModifiers[modifier] = true); });
    if (displayMonth && !isSameMonth(day, displayMonth)) {
        activeModifiers.outside = true;
    }
    return activeModifiers;
}
/**
 * Returns the day that should be the target of the focus when DayPicker is
 * rendered the first time.
 *
 * TODO: this function doesn't consider if the day is outside the month. We
 * implemented this check in `useDayRender` but it should probably go here. See
 * https://github.com/gpbl/react-day-picker/pull/1576
 */
function getInitialFocusTarget(displayMonths, modifiers) {
    var firstDayInMonth = startOfMonth(displayMonths[0]);
    var lastDayInMonth = endOfMonth$2(displayMonths[displayMonths.length - 1]);
    // TODO: cleanup code
    var firstFocusableDay;
    var today;
    var date = firstDayInMonth;
    while (date <= lastDayInMonth) {
        var activeModifiers = getActiveModifiers(date, modifiers);
        var isFocusable = !activeModifiers.disabled && !activeModifiers.hidden;
        if (!isFocusable) {
            date = addDays$2(date, 1);
            continue;
        }
        if (activeModifiers.selected) {
            return date;
        }
        if (activeModifiers.today && !today) {
            today = date;
        }
        if (!firstFocusableDay) {
            firstFocusableDay = date;
        }
        date = addDays$2(date, 1);
    }
    if (today) {
        return today;
    }
    else {
        return firstFocusableDay;
    }
}
var MAX_RETRY = 365;
/** Return the next date to be focused. */
function getNextFocus(focusedDay, options) {
    var moveBy = options.moveBy, direction = options.direction, context = options.context, modifiers = options.modifiers, _a = options.retry, retry = _a === void 0 ? { count: 0, lastFocused: focusedDay } : _a;
    var weekStartsOn = context.weekStartsOn, fromDate = context.fromDate, toDate = context.toDate, locale = context.locale;
    var moveFns = {
        day: addDays$2,
        week: addWeeks,
        month: addMonths,
        year: addYears,
        startOfWeek: function (date) {
            return context.ISOWeek
                ? startOfISOWeek(date)
                : startOfWeek(date, { locale: locale, weekStartsOn: weekStartsOn });
        },
        endOfWeek: function (date) {
            return context.ISOWeek
                ? endOfISOWeek(date)
                : endOfWeek(date, { locale: locale, weekStartsOn: weekStartsOn });
        }
    };
    var newFocusedDay = moveFns[moveBy](focusedDay, direction === 'after' ? 1 : -1);
    if (direction === 'before' && fromDate) {
        newFocusedDay = max([fromDate, newFocusedDay]);
    }
    else if (direction === 'after' && toDate) {
        newFocusedDay = min([toDate, newFocusedDay]);
    }
    var isFocusable = true;
    if (modifiers) {
        var activeModifiers = getActiveModifiers(newFocusedDay, modifiers);
        isFocusable = !activeModifiers.disabled && !activeModifiers.hidden;
    }
    if (isFocusable) {
        return newFocusedDay;
    }
    else {
        if (retry.count > MAX_RETRY) {
            return retry.lastFocused;
        }
        return getNextFocus(newFocusedDay, {
            moveBy: moveBy,
            direction: direction,
            context: context,
            modifiers: modifiers,
            retry: __assign(__assign({}, retry), { count: retry.count + 1 })
        });
    }
}
/**
 * The Focus context shares details about the focused day for the keyboard
 *
 * Access this context from the {@link useFocusContext} hook.
 */
var FocusContext = React.createContext(undefined);
/** The provider for the {@link FocusContext}. */
function FocusProvider(props) {
    var navigation = useNavigation();
    var modifiers = useModifiers();
    var _a = React.useState(), focusedDay = _a[0], setFocusedDay = _a[1];
    var _b = React.useState(), lastFocused = _b[0], setLastFocused = _b[1];
    var initialFocusTarget = getInitialFocusTarget(navigation.displayMonths, modifiers);
    // TODO: cleanup and test obscure code below
    var focusTarget = (focusedDay !== null && focusedDay !== void 0 ? focusedDay : (lastFocused && navigation.isDateDisplayed(lastFocused)))
        ? lastFocused
        : initialFocusTarget;
    var blur = function () {
        setLastFocused(focusedDay);
        setFocusedDay(undefined);
    };
    var focus = function (date) {
        setFocusedDay(date);
    };
    var context = useDayPicker();
    var moveFocus = function (moveBy, direction) {
        if (!focusedDay)
            return;
        var nextFocused = getNextFocus(focusedDay, {
            moveBy: moveBy,
            direction: direction,
            context: context,
            modifiers: modifiers
        });
        if (isSameDay(focusedDay, nextFocused))
            return undefined;
        navigation.goToDate(nextFocused, focusedDay);
        focus(nextFocused);
    };
    var value = {
        focusedDay: focusedDay,
        focusTarget: focusTarget,
        blur: blur,
        focus: focus,
        focusDayAfter: function () { return moveFocus('day', 'after'); },
        focusDayBefore: function () { return moveFocus('day', 'before'); },
        focusWeekAfter: function () { return moveFocus('week', 'after'); },
        focusWeekBefore: function () { return moveFocus('week', 'before'); },
        focusMonthBefore: function () { return moveFocus('month', 'before'); },
        focusMonthAfter: function () { return moveFocus('month', 'after'); },
        focusYearBefore: function () { return moveFocus('year', 'before'); },
        focusYearAfter: function () { return moveFocus('year', 'after'); },
        focusStartOfWeek: function () { return moveFocus('startOfWeek', 'before'); },
        focusEndOfWeek: function () { return moveFocus('endOfWeek', 'after'); }
    };
    return (jsxRuntimeExports.jsx(FocusContext.Provider, __assign({ value: value }, { children: props.children })));
}
/**
 * Hook to access the {@link FocusContextValue}. Use this hook to handle the
 * focus state of the elements.
 *
 * This hook is meant to be used inside internal or custom components.
 */
function useFocusContext() {
    var context = React.useContext(FocusContext);
    if (!context) {
        throw new Error('useFocusContext must be used within a FocusProvider');
    }
    return context;
}
/**
 * Return the active modifiers for the specified day.
 *
 * This hook is meant to be used inside internal or custom components.
 *
 * @param day
 * @param displayMonth
 */
function useActiveModifiers(day, 
/**
 * The month where the date is displayed. If not the same as `date`, the day
 * is an "outside day".
 */
displayMonth) {
    var modifiers = useModifiers();
    var activeModifiers = getActiveModifiers(day, modifiers, displayMonth);
    return activeModifiers;
}
/**
 * The SelectSingle context shares details about the selected days when in
 * single selection mode.
 *
 * Access this context from the {@link useSelectSingle} hook.
 */
var SelectSingleContext = React.createContext(undefined);
/** Provides the values for the {@link SelectSingleProvider}. */
function SelectSingleProvider(props) {
    if (!isDayPickerSingle(props.initialProps)) {
        var emptyContextValue = {
            selected: undefined
        };
        return (jsxRuntimeExports.jsx(SelectSingleContext.Provider, __assign({ value: emptyContextValue }, { children: props.children })));
    }
    return (jsxRuntimeExports.jsx(SelectSingleProviderInternal, { initialProps: props.initialProps, children: props.children }));
}
function SelectSingleProviderInternal(_a) {
    var initialProps = _a.initialProps, children = _a.children;
    var onDayClick = function (day, activeModifiers, e) {
        var _a, _b, _c;
        (_a = initialProps.onDayClick) === null || _a === void 0 ? void 0 : _a.call(initialProps, day, activeModifiers, e);
        if (activeModifiers.selected && !initialProps.required) {
            (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, undefined, day, activeModifiers, e);
            return;
        }
        (_c = initialProps.onSelect) === null || _c === void 0 ? void 0 : _c.call(initialProps, day, day, activeModifiers, e);
    };
    var contextValue = {
        selected: initialProps.selected,
        onDayClick: onDayClick
    };
    return (jsxRuntimeExports.jsx(SelectSingleContext.Provider, __assign({ value: contextValue }, { children: children })));
}
/**
 * Hook to access the {@link SelectSingleContextValue}.
 *
 * This hook is meant to be used inside internal or custom components.
 */
function useSelectSingle() {
    var context = React.useContext(SelectSingleContext);
    if (!context) {
        throw new Error('useSelectSingle must be used within a SelectSingleProvider');
    }
    return context;
}
/**
 * This hook returns details about the content to render in the day cell.
 *
 *
 * When a day cell is rendered in the table, DayPicker can either:
 *
 * - render nothing: when the day is outside the month or has matched the
 *   "hidden" modifier.
 * - render a button when `onDayClick` or a selection mode is set.
 * - render a non-interactive element: when no selection mode is set, the day
 *   cell shouldn’t respond to any interaction. DayPicker should render a `div`
 *   or a `span`.
 *
 * ### Usage
 *
 * Use this hook to customize the behavior of the {@link Day} component. Create a
 * new `Day` component using this hook and pass it to the `components` prop.
 * The source of {@link Day} can be a good starting point.
 *
 */
function useDayEventHandlers(date, activeModifiers) {
    var dayPicker = useDayPicker();
    var single = useSelectSingle();
    var multiple = useSelectMultiple();
    var range = useSelectRange();
    var _a = useFocusContext(), focusDayAfter = _a.focusDayAfter, focusDayBefore = _a.focusDayBefore, focusWeekAfter = _a.focusWeekAfter, focusWeekBefore = _a.focusWeekBefore, blur = _a.blur, focus = _a.focus, focusMonthBefore = _a.focusMonthBefore, focusMonthAfter = _a.focusMonthAfter, focusYearBefore = _a.focusYearBefore, focusYearAfter = _a.focusYearAfter, focusStartOfWeek = _a.focusStartOfWeek, focusEndOfWeek = _a.focusEndOfWeek;
    var onClick = function (e) {
        var _a, _b, _c, _d;
        if (isDayPickerSingle(dayPicker)) {
            (_a = single.onDayClick) === null || _a === void 0 ? void 0 : _a.call(single, date, activeModifiers, e);
        }
        else if (isDayPickerMultiple(dayPicker)) {
            (_b = multiple.onDayClick) === null || _b === void 0 ? void 0 : _b.call(multiple, date, activeModifiers, e);
        }
        else if (isDayPickerRange(dayPicker)) {
            (_c = range.onDayClick) === null || _c === void 0 ? void 0 : _c.call(range, date, activeModifiers, e);
        }
        else {
            (_d = dayPicker.onDayClick) === null || _d === void 0 ? void 0 : _d.call(dayPicker, date, activeModifiers, e);
        }
    };
    var onFocus = function (e) {
        var _a;
        focus(date);
        (_a = dayPicker.onDayFocus) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);
    };
    var onBlur = function (e) {
        var _a;
        blur();
        (_a = dayPicker.onDayBlur) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);
    };
    var onMouseEnter = function (e) {
        var _a;
        (_a = dayPicker.onDayMouseEnter) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);
    };
    var onMouseLeave = function (e) {
        var _a;
        (_a = dayPicker.onDayMouseLeave) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);
    };
    var onPointerEnter = function (e) {
        var _a;
        (_a = dayPicker.onDayPointerEnter) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);
    };
    var onPointerLeave = function (e) {
        var _a;
        (_a = dayPicker.onDayPointerLeave) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);
    };
    var onTouchCancel = function (e) {
        var _a;
        (_a = dayPicker.onDayTouchCancel) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);
    };
    var onTouchEnd = function (e) {
        var _a;
        (_a = dayPicker.onDayTouchEnd) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);
    };
    var onTouchMove = function (e) {
        var _a;
        (_a = dayPicker.onDayTouchMove) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);
    };
    var onTouchStart = function (e) {
        var _a;
        (_a = dayPicker.onDayTouchStart) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);
    };
    var onKeyUp = function (e) {
        var _a;
        (_a = dayPicker.onDayKeyUp) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);
    };
    var onKeyDown = function (e) {
        var _a;
        switch (e.key) {
            case 'ArrowLeft':
                e.preventDefault();
                e.stopPropagation();
                dayPicker.dir === 'rtl' ? focusDayAfter() : focusDayBefore();
                break;
            case 'ArrowRight':
                e.preventDefault();
                e.stopPropagation();
                dayPicker.dir === 'rtl' ? focusDayBefore() : focusDayAfter();
                break;
            case 'ArrowDown':
                e.preventDefault();
                e.stopPropagation();
                focusWeekAfter();
                break;
            case 'ArrowUp':
                e.preventDefault();
                e.stopPropagation();
                focusWeekBefore();
                break;
            case 'PageUp':
                e.preventDefault();
                e.stopPropagation();
                e.shiftKey ? focusYearBefore() : focusMonthBefore();
                break;
            case 'PageDown':
                e.preventDefault();
                e.stopPropagation();
                e.shiftKey ? focusYearAfter() : focusMonthAfter();
                break;
            case 'Home':
                e.preventDefault();
                e.stopPropagation();
                focusStartOfWeek();
                break;
            case 'End':
                e.preventDefault();
                e.stopPropagation();
                focusEndOfWeek();
                break;
        }
        (_a = dayPicker.onDayKeyDown) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);
    };
    var eventHandlers = {
        onClick: onClick,
        onFocus: onFocus,
        onBlur: onBlur,
        onKeyDown: onKeyDown,
        onKeyUp: onKeyUp,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onPointerEnter: onPointerEnter,
        onPointerLeave: onPointerLeave,
        onTouchCancel: onTouchCancel,
        onTouchEnd: onTouchEnd,
        onTouchMove: onTouchMove,
        onTouchStart: onTouchStart
    };
    return eventHandlers;
}
/**
 * Return the current selected days when DayPicker is in selection mode. Days
 * selected by the custom selection mode are not returned.
 *
 * This hook is meant to be used inside internal or custom components.
 *
 */
function useSelectedDays() {
    var dayPicker = useDayPicker();
    var single = useSelectSingle();
    var multiple = useSelectMultiple();
    var range = useSelectRange();
    var selectedDays = isDayPickerSingle(dayPicker)
        ? single.selected
        : isDayPickerMultiple(dayPicker)
            ? multiple.selected
            : isDayPickerRange(dayPicker)
                ? range.selected
                : undefined;
    return selectedDays;
}
function isInternalModifier(modifier) {
    return Object.values(InternalModifier).includes(modifier);
}
/**
 * Return the class names for the Day element, according to the given active
 * modifiers.
 *
 * Custom class names are set via `modifiersClassNames` or `classNames`,
 * where the first have the precedence.
 */
function getDayClassNames(dayPicker, activeModifiers) {
    var classNames = [dayPicker.classNames.day];
    Object.keys(activeModifiers).forEach(function (modifier) {
        var customClassName = dayPicker.modifiersClassNames[modifier];
        if (customClassName) {
            classNames.push(customClassName);
        }
        else if (isInternalModifier(modifier)) {
            var internalClassName = dayPicker.classNames["day_".concat(modifier)];
            if (internalClassName) {
                classNames.push(internalClassName);
            }
        }
    });
    return classNames;
}
/** Return the style for the Day element, according to the given active modifiers. */
function getDayStyle(dayPicker, activeModifiers) {
    var style = __assign({}, dayPicker.styles.day);
    Object.keys(activeModifiers).forEach(function (modifier) {
        var _a;
        style = __assign(__assign({}, style), (_a = dayPicker.modifiersStyles) === null || _a === void 0 ? void 0 : _a[modifier]);
    });
    return style;
}
/**
 * Return props and data used to render the {@link Day} component.
 *
 * Use this hook when creating a component to replace the built-in `Day`
 * component.
 */
function useDayRender(
/** The date to render. */
day, 
/** The month where the date is displayed (if not the same as `date`, it means it is an "outside" day). */
displayMonth, 
/** A ref to the button element that will be target of focus when rendered (if required). */
buttonRef) {
    var _a;
    var _b, _c;
    var dayPicker = useDayPicker();
    var focusContext = useFocusContext();
    var activeModifiers = useActiveModifiers(day, displayMonth);
    var eventHandlers = useDayEventHandlers(day, activeModifiers);
    var selectedDays = useSelectedDays();
    var isButton = Boolean(dayPicker.onDayClick || dayPicker.mode !== 'default');
    // Focus the button if the day is focused according to the focus context
    React.useEffect(function () {
        var _a;
        if (activeModifiers.outside)
            return;
        if (!focusContext.focusedDay)
            return;
        if (!isButton)
            return;
        if (isSameDay(focusContext.focusedDay, day)) {
            (_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
    }, [
        focusContext.focusedDay,
        day,
        buttonRef,
        isButton,
        activeModifiers.outside
    ]);
    var className = getDayClassNames(dayPicker, activeModifiers).join(' ');
    var style = getDayStyle(dayPicker, activeModifiers);
    var isHidden = Boolean((activeModifiers.outside && !dayPicker.showOutsideDays) ||
        activeModifiers.hidden);
    var DayContentComponent = (_c = (_b = dayPicker.components) === null || _b === void 0 ? void 0 : _b.DayContent) !== null && _c !== void 0 ? _c : DayContent;
    var children = (jsxRuntimeExports.jsx(DayContentComponent, { date: day, displayMonth: displayMonth, activeModifiers: activeModifiers }));
    var divProps = {
        style: style,
        className: className,
        children: children,
        role: 'gridcell'
    };
    var isFocusTarget = focusContext.focusTarget &&
        isSameDay(focusContext.focusTarget, day) &&
        !activeModifiers.outside;
    var isFocused = focusContext.focusedDay && isSameDay(focusContext.focusedDay, day);
    var buttonProps = __assign(__assign(__assign({}, divProps), (_a = { disabled: activeModifiers.disabled, role: 'gridcell' }, _a['aria-selected'] = activeModifiers.selected, _a.tabIndex = isFocused || isFocusTarget ? 0 : -1, _a)), eventHandlers);
    var dayRender = {
        isButton: isButton,
        isHidden: isHidden,
        activeModifiers: activeModifiers,
        selectedDays: selectedDays,
        buttonProps: buttonProps,
        divProps: divProps
    };
    return dayRender;
}
/**
 * The content of a day cell – as a button or span element according to its
 * modifiers.
 */
function Day(props) {
    var buttonRef = React.useRef(null);
    var dayRender = useDayRender(props.date, props.displayMonth, buttonRef);
    if (dayRender.isHidden) {
        return jsxRuntimeExports.jsx("div", { role: "gridcell" });
    }
    if (!dayRender.isButton) {
        return jsxRuntimeExports.jsx("div", __assign({}, dayRender.divProps));
    }
    return jsxRuntimeExports.jsx(Button, __assign({ name: "day", ref: buttonRef }, dayRender.buttonProps));
}
/**
 * Render the week number element. If `onWeekNumberClick` is passed to DayPicker, it
 * renders a button, otherwise a span element.
 */
function WeekNumber(props) {
    var weekNumber = props.number, dates = props.dates;
    var _a = useDayPicker(), onWeekNumberClick = _a.onWeekNumberClick, styles = _a.styles, classNames = _a.classNames, locale = _a.locale, labelWeekNumber = _a.labels.labelWeekNumber, formatWeekNumber = _a.formatters.formatWeekNumber;
    var content = formatWeekNumber(Number(weekNumber), { locale: locale });
    if (!onWeekNumberClick) {
        return (jsxRuntimeExports.jsx("span", __assign({ className: classNames.weeknumber, style: styles.weeknumber }, { children: content })));
    }
    var label = labelWeekNumber(Number(weekNumber), { locale: locale });
    var handleClick = function (e) {
        onWeekNumberClick(weekNumber, dates, e);
    };
    return (jsxRuntimeExports.jsx(Button, __assign({ name: "week-number", "aria-label": label, className: classNames.weeknumber, style: styles.weeknumber, onClick: handleClick }, { children: content })));
}
/** Render a row in the calendar, with the days and the week number. */
function Row(props) {
    var _a, _b;
    var _c = useDayPicker(), styles = _c.styles, classNames = _c.classNames, showWeekNumber = _c.showWeekNumber, components = _c.components;
    var DayComponent = (_a = components === null || components === void 0 ? void 0 : components.Day) !== null && _a !== void 0 ? _a : Day;
    var WeeknumberComponent = (_b = components === null || components === void 0 ? void 0 : components.WeekNumber) !== null && _b !== void 0 ? _b : WeekNumber;
    var weekNumberCell;
    if (showWeekNumber) {
        weekNumberCell = (jsxRuntimeExports.jsx("td", __assign({ className: classNames.cell, style: styles.cell }, { children: jsxRuntimeExports.jsx(WeeknumberComponent, { number: props.weekNumber, dates: props.dates }) })));
    }
    return (jsxRuntimeExports.jsxs("tr", __assign({ className: classNames.row, style: styles.row }, { children: [weekNumberCell, props.dates.map(function (date) { return (jsxRuntimeExports.jsx("td", __assign({ className: classNames.cell, style: styles.cell, role: "presentation" }, { children: jsxRuntimeExports.jsx(DayComponent, { displayMonth: props.displayMonth, date: date }) }), getUnixTime$2(date))); })] })));
}
/** Return the weeks between two dates.  */
function daysToMonthWeeks(fromDate, toDate, options) {
    var toWeek = (options === null || options === void 0 ? void 0 : options.ISOWeek)
        ? endOfISOWeek(toDate)
        : endOfWeek(toDate, options);
    var fromWeek = (options === null || options === void 0 ? void 0 : options.ISOWeek)
        ? startOfISOWeek(fromDate)
        : startOfWeek(fromDate, options);
    var nOfDays = differenceInCalendarDays(toWeek, fromWeek);
    var days = [];
    for (var i = 0; i <= nOfDays; i++) {
        days.push(addDays$2(fromWeek, i));
    }
    var weeksInMonth = days.reduce(function (result, date) {
        var weekNumber = (options === null || options === void 0 ? void 0 : options.ISOWeek)
            ? getISOWeek(date)
            : getWeek(date, options);
        var existingWeek = result.find(function (value) { return value.weekNumber === weekNumber; });
        if (existingWeek) {
            existingWeek.dates.push(date);
            return result;
        }
        result.push({
            weekNumber: weekNumber,
            dates: [date]
        });
        return result;
    }, []);
    return weeksInMonth;
}
/**
 * Return the weeks belonging to the given month, adding the "outside days" to
 * the first and last week.
 */
function getMonthWeeks(month, options) {
    var weeksInMonth = daysToMonthWeeks(startOfMonth(month), endOfMonth$2(month), options);
    if (options === null || options === void 0 ? void 0 : options.useFixedWeeks) {
        // Add extra weeks to the month, up to 6 weeks
        var nrOfMonthWeeks = getWeeksInMonth(month, options);
        if (nrOfMonthWeeks < 6) {
            var lastWeek = weeksInMonth[weeksInMonth.length - 1];
            var lastDate = lastWeek.dates[lastWeek.dates.length - 1];
            var toDate = addWeeks(lastDate, 6 - nrOfMonthWeeks);
            var extraWeeks = daysToMonthWeeks(addWeeks(lastDate, 1), toDate, options);
            weeksInMonth.push.apply(weeksInMonth, extraWeeks);
        }
    }
    return weeksInMonth;
}
/** Render the table with the calendar. */
function Table$1(props) {
    var _a, _b, _c;
    var _d = useDayPicker(), locale = _d.locale, classNames = _d.classNames, styles = _d.styles, hideHead = _d.hideHead, fixedWeeks = _d.fixedWeeks, components = _d.components, weekStartsOn = _d.weekStartsOn, firstWeekContainsDate = _d.firstWeekContainsDate, ISOWeek = _d.ISOWeek;
    var weeks = getMonthWeeks(props.displayMonth, {
        useFixedWeeks: Boolean(fixedWeeks),
        ISOWeek: ISOWeek,
        locale: locale,
        weekStartsOn: weekStartsOn,
        firstWeekContainsDate: firstWeekContainsDate
    });
    var HeadComponent = (_a = components === null || components === void 0 ? void 0 : components.Head) !== null && _a !== void 0 ? _a : Head;
    var RowComponent = (_b = components === null || components === void 0 ? void 0 : components.Row) !== null && _b !== void 0 ? _b : Row;
    var FooterComponent = (_c = components === null || components === void 0 ? void 0 : components.Footer) !== null && _c !== void 0 ? _c : Footer$1;
    return (jsxRuntimeExports.jsxs("table", __assign({ id: props.id, className: classNames.table, style: styles.table, role: "grid", "aria-labelledby": props['aria-labelledby'] }, { children: [!hideHead && jsxRuntimeExports.jsx(HeadComponent, {}), jsxRuntimeExports.jsx("tbody", __assign({ className: classNames.tbody, style: styles.tbody }, { children: weeks.map(function (week) { return (jsxRuntimeExports.jsx(RowComponent, { displayMonth: props.displayMonth, dates: week.dates, weekNumber: week.weekNumber }, week.weekNumber)); }) })), jsxRuntimeExports.jsx(FooterComponent, { displayMonth: props.displayMonth })] })));
}
/*
The MIT License (MIT)

Copyright (c) 2018-present, React Training LLC

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/* eslint-disable prefer-const */
/* eslint-disable @typescript-eslint/ban-ts-comment */
/*
 * Welcome to @reach/auto-id!
 * Let's see if we can make sense of why this hook exists and its
 * implementation.
 *
 * Some background:
 *   1. Accessibility APIs rely heavily on element IDs
 *   2. Requiring developers to put IDs on every element in Reach UI is both
 *      cumbersome and error-prone
 *   3. With a component model, we can generate IDs for them!
 *
 * Solution 1: Generate random IDs.
 *
 * This works great as long as you don't server render your app. When React (in
 * the client) tries to reuse the markup from the server, the IDs won't match
 * and React will then recreate the entire DOM tree.
 *
 * Solution 2: Increment an integer
 *
 * This sounds great. Since we're rendering the exact same tree on the server
 * and client, we can increment a counter and get a deterministic result between
 * client and server. Also, JS integers can go up to nine-quadrillion. I'm
 * pretty sure the tab will be closed before an app never needs
 * 10 quadrillion IDs!
 *
 * Problem solved, right?
 *
 * Ah, but there's a catch! React's concurrent rendering makes this approach
 * non-deterministic. While the client and server will end up with the same
 * elements in the end, depending on suspense boundaries (and possibly some user
 * input during the initial render) the incrementing integers won't always match
 * up.
 *
 * Solution 3: Don't use IDs at all on the server; patch after first render.
 *
 * What we've done here is solution 2 with some tricks. With this approach, the
 * ID returned is an empty string on the first render. This way the server and
 * client have the same markup no matter how wild the concurrent rendering may
 * have gotten.
 *
 * After the render, we patch up the components with an incremented ID. This
 * causes a double render on any components with `useId`. Shouldn't be a problem
 * since the components using this hook should be small, and we're only updating
 * the ID attribute on the DOM, nothing big is happening.
 *
 * It doesn't have to be an incremented number, though--we could do generate
 * random strings instead, but incrementing a number is probably the cheapest
 * thing we can do.
 *
 * Additionally, we only do this patchup on the very first client render ever.
 * Any calls to `useId` that happen dynamically in the client will be
 * populated immediately with a value. So, we only get the double render after
 * server hydration and never again, SO BACK OFF ALRIGHT?
 */
function canUseDOM() {
    return !!(typeof window !== 'undefined' &&
        window.document &&
        window.document.createElement);
}
/**
 * React currently throws a warning when using useLayoutEffect on the server. To
 * get around it, we can conditionally useEffect on the server (no-op) and
 * useLayoutEffect in the browser. We occasionally need useLayoutEffect to
 * ensure we don't get a render flash for certain operations, but we may also
 * need affected components to render on the server. One example is when setting
 * a component's descendants to retrieve their index values.
 *
 * Important to note that using this hook as an escape hatch will break the
 * eslint dependency warnings unless you rename the import to `useLayoutEffect`.
 * Use sparingly only when the effect won't effect the rendered HTML to avoid
 * any server/client mismatch.
 *
 * If a useLayoutEffect is needed and the result would create a mismatch, it's
 * likely that the component in question shouldn't be rendered on the server at
 * all, so a better approach would be to lazily render those in a parent
 * component after client-side hydration.
 *
 * https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
 * https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.js
 *
 * @param effect
 * @param deps
 */
var useIsomorphicLayoutEffect = canUseDOM() ? React.useLayoutEffect : React.useEffect;
var serverHandoffComplete = false;
var id = 0;
function genId() {
    return "react-day-picker-".concat(++id);
}
function useId(providedId) {
    // TODO: Remove error flag when updating internal deps to React 18. None of
    // our tricks will play well with concurrent rendering anyway.
    var _a;
    // If this instance isn't part of the initial render, we don't have to do the
    // double render/patch-up dance. We can just generate the ID and return it.
    var initialId = providedId !== null && providedId !== void 0 ? providedId : (serverHandoffComplete ? genId() : null);
    var _b = React.useState(initialId), id = _b[0], setId = _b[1];
    useIsomorphicLayoutEffect(function () {
        if (id === null) {
            // Patch the ID after render. We do this in `useLayoutEffect` to avoid any
            // rendering flicker, though it'll make the first render slower (unlikely
            // to matter, but you're welcome to measure your app and let us know if
            // it's a problem).
            setId(genId());
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    React.useEffect(function () {
        if (serverHandoffComplete === false) {
            // Flag all future uses of `useId` to skip the update dance. This is in
            // `useEffect` because it goes after `useLayoutEffect`, ensuring we don't
            // accidentally bail out of the patch-up dance prematurely.
            serverHandoffComplete = true;
        }
    }, []);
    return (_a = providedId !== null && providedId !== void 0 ? providedId : id) !== null && _a !== void 0 ? _a : undefined;
}
/** Render a month. */
function Month(props) {
    var _a;
    var _b;
    var dayPicker = useDayPicker();
    var dir = dayPicker.dir, classNames = dayPicker.classNames, styles = dayPicker.styles, components = dayPicker.components;
    var displayMonths = useNavigation().displayMonths;
    var captionId = useId(dayPicker.id ? "".concat(dayPicker.id, "-").concat(props.displayIndex) : undefined);
    var tableId = dayPicker.id
        ? "".concat(dayPicker.id, "-grid-").concat(props.displayIndex)
        : undefined;
    var className = [classNames.month];
    var style = styles.month;
    var isStart = props.displayIndex === 0;
    var isEnd = props.displayIndex === displayMonths.length - 1;
    var isCenter = !isStart && !isEnd;
    if (dir === 'rtl') {
        _a = [isStart, isEnd], isEnd = _a[0], isStart = _a[1];
    }
    if (isStart) {
        className.push(classNames.caption_start);
        style = __assign(__assign({}, style), styles.caption_start);
    }
    if (isEnd) {
        className.push(classNames.caption_end);
        style = __assign(__assign({}, style), styles.caption_end);
    }
    if (isCenter) {
        className.push(classNames.caption_between);
        style = __assign(__assign({}, style), styles.caption_between);
    }
    var CaptionComponent = (_b = components === null || components === void 0 ? void 0 : components.Caption) !== null && _b !== void 0 ? _b : Caption;
    return (jsxRuntimeExports.jsxs("div", __assign({ className: className.join(' '), style: style }, { children: [jsxRuntimeExports.jsx(CaptionComponent, { id: captionId, displayMonth: props.displayMonth, displayIndex: props.displayIndex }), jsxRuntimeExports.jsx(Table$1, { id: tableId, "aria-labelledby": captionId, displayMonth: props.displayMonth })] }), props.displayIndex));
}
/**
 * Render the wrapper for the month grids.
 */
function Months(props) {
    var _a = useDayPicker(), classNames = _a.classNames, styles = _a.styles;
    return (jsxRuntimeExports.jsx("div", __assign({ className: classNames.months, style: styles.months }, { children: props.children })));
}
/** Render the container with the months according to the number of months to display. */
function Root(_a) {
    var _b, _c;
    var initialProps = _a.initialProps;
    var dayPicker = useDayPicker();
    var focusContext = useFocusContext();
    var navigation = useNavigation();
    var _d = React.useState(false), hasInitialFocus = _d[0], setHasInitialFocus = _d[1];
    // Focus the focus target when initialFocus is passed in
    React.useEffect(function () {
        if (!dayPicker.initialFocus)
            return;
        if (!focusContext.focusTarget)
            return;
        if (hasInitialFocus)
            return;
        focusContext.focus(focusContext.focusTarget);
        setHasInitialFocus(true);
    }, [
        dayPicker.initialFocus,
        hasInitialFocus,
        focusContext.focus,
        focusContext.focusTarget,
        focusContext
    ]);
    // Apply classnames according to props
    var classNames = [dayPicker.classNames.root, dayPicker.className];
    if (dayPicker.numberOfMonths > 1) {
        classNames.push(dayPicker.classNames.multiple_months);
    }
    if (dayPicker.showWeekNumber) {
        classNames.push(dayPicker.classNames.with_weeknumber);
    }
    var style = __assign(__assign({}, dayPicker.styles.root), dayPicker.style);
    var dataAttributes = Object.keys(initialProps)
        .filter(function (key) { return key.startsWith('data-'); })
        .reduce(function (attrs, key) {
        var _a;
        return __assign(__assign({}, attrs), (_a = {}, _a[key] = initialProps[key], _a));
    }, {});
    var MonthsComponent = (_c = (_b = initialProps.components) === null || _b === void 0 ? void 0 : _b.Months) !== null && _c !== void 0 ? _c : Months;
    return (jsxRuntimeExports.jsx("div", __assign({ className: classNames.join(' '), style: style, dir: dayPicker.dir, id: dayPicker.id, nonce: initialProps.nonce, title: initialProps.title, lang: initialProps.lang }, dataAttributes, { children: jsxRuntimeExports.jsx(MonthsComponent, { children: navigation.displayMonths.map(function (month, i) { return (jsxRuntimeExports.jsx(Month, { displayIndex: i, displayMonth: month }, i)); }) }) })));
}
/** Provide the value for all the context providers. */
function RootProvider(props) {
    var children = props.children, initialProps = __rest(props, ["children"]);
    return (jsxRuntimeExports.jsx(DayPickerProvider, __assign({ initialProps: initialProps }, { children: jsxRuntimeExports.jsx(NavigationProvider, { children: jsxRuntimeExports.jsx(SelectSingleProvider, __assign({ initialProps: initialProps }, { children: jsxRuntimeExports.jsx(SelectMultipleProvider, __assign({ initialProps: initialProps }, { children: jsxRuntimeExports.jsx(SelectRangeProvider, __assign({ initialProps: initialProps }, { children: jsxRuntimeExports.jsx(ModifiersProvider, { children: jsxRuntimeExports.jsx(FocusProvider, { children: children }) }) })) })) })) }) })));
}
/**
 * DayPicker render a date picker component to let users pick dates from a
 * calendar. See http://react-day-picker.js.org for updated documentation and
 * examples.
 *
 * ### Customization
 *
 * DayPicker offers different customization props. For example,
 *
 * - show multiple months using `numberOfMonths`
 * - display a dropdown to navigate the months via `captionLayout`
 * - display the week numbers with `showWeekNumbers`
 * - disable or hide days with `disabled` or `hidden`
 *
 * ### Controlling the months
 *
 * Change the initially displayed month using the `defaultMonth` prop. The
 * displayed months are controlled by DayPicker and stored in its internal
 * state. To control the months yourself, use `month` instead of `defaultMonth`
 * and use the `onMonthChange` event to set it.
 *
 * To limit the months the user can navigate to, use
 * `fromDate`/`fromMonth`/`fromYear` or `toDate`/`toMonth`/`toYear`.
 *
 * ### Selection modes
 *
 * DayPicker supports different selection mode that can be toggled using the
 * `mode` prop:
 *
 * - `mode="single"`: only one day can be selected. Use `required` to make the
 *   selection required. Use the `onSelect` event handler to get the selected
 *   days.
 * - `mode="multiple"`: users can select one or more days. Limit the amount of
 *   days that can be selected with the `min` or the `max` props.
 * - `mode="range"`: users can select a range of days. Limit the amount of days
 *   in the range with the `min` or the `max` props.
 * - `mode="default"` (default): the built-in selections are disabled. Implement
 *   your own selection mode with `onDayClick`.
 *
 * The selection modes should cover the most common use cases. In case you
 * need a more refined way of selecting days, use `mode="default"`. Use the
 * `selected` props and add the day event handlers to add/remove days from the
 * selection.
 *
 * ### Modifiers
 *
 * A _modifier_ represents different styles or states for the days displayed in
 * the calendar (like "selected" or "disabled"). Define custom modifiers using
 * the `modifiers` prop.
 *
 * ### Formatters and custom component
 *
 * You can customize how the content is displayed in the date picker by using
 * either the formatters or replacing the internal components.
 *
 * For the most common cases you want to use the `formatters` prop to change how
 * the content is formatted in the calendar. Use the `components` prop to
 * replace the internal components, like the navigation icons.
 *
 * ### Styling
 *
 * DayPicker comes with a default, basic style in `react-day-picker/style` – use
 * it as template for your own style.
 *
 * If you are using CSS modules, pass the imported styles object the
 * `classNames` props.
 *
 * You can also style the elements via inline styles using the `styles` prop.
 *
 * ### Form fields
 *
 * If you need to bind the date picker to a form field, you can use the
 * `useInput` hooks for a basic behavior. See the `useInput` source as an
 * example to bind the date picker with form fields.
 *
 * ### Localization
 *
 * To localize DayPicker, import the locale from `date-fns` package and use the
 * `locale` prop.
 *
 * For example, to use Spanish locale:
 *
 * ```
 * import { es } from 'date-fns/locale';
 * <DayPicker locale={es} />
 * ```
 */
function DayPicker(props) {
    return (jsxRuntimeExports.jsx(RootProvider, __assign({}, props, { children: jsxRuntimeExports.jsx(Root, { initialProps: props }) })));
}

var isBefore$1 = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = isBefore;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    /**
     * @name isBefore
     * @category Common Helpers
     * @summary Is the first date before the second one?
     *
     * @description
     * Is the first date before the second one?
     *
     * @param {Date|Number} date - the date that should be before the other one to return true
     * @param {Date|Number} dateToCompare - the date to compare with
     * @returns {Boolean} the first date is before the second date
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Is 10 July 1989 before 11 February 1987?
     * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
     * //=> false
     */
    function isBefore(dirtyDate, dirtyDateToCompare) {
        (0, _index2.default)(2, arguments);
        var date = (0, _index.default)(dirtyDate);
        var dateToCompare = (0, _index.default)(dirtyDateToCompare);
        return date.getTime() < dateToCompare.getTime();
    }
    module.exports = exports.default;
}(isBefore$1, isBefore$1.exports));
var isBeforeExports = isBefore$1.exports;
var isBefore = /*@__PURE__*/ getDefaultExportFromCjs(isBeforeExports);

var isAfter$1 = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = isAfter;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    /**
     * @name isAfter
     * @category Common Helpers
     * @summary Is the first date after the second one?
     *
     * @description
     * Is the first date after the second one?
     *
     * @param {Date|Number} date - the date that should be after the other one to return true
     * @param {Date|Number} dateToCompare - the date to compare with
     * @returns {Boolean} the first date is after the second date
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Is 10 July 1989 after 11 February 1987?
     * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
     * //=> true
     */
    function isAfter(dirtyDate, dirtyDateToCompare) {
        (0, _index2.default)(2, arguments);
        var date = (0, _index.default)(dirtyDate);
        var dateToCompare = (0, _index.default)(dirtyDateToCompare);
        return date.getTime() > dateToCompare.getTime();
    }
    module.exports = exports.default;
}(isAfter$1, isAfter$1.exports));
var isAfterExports = isAfter$1.exports;
var isAfter = /*@__PURE__*/ getDefaultExportFromCjs(isAfterExports);

function SvgIconArrowInTheBox(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M19 13v8H3V5h8m5-3h6v6m-10 4L22 2" }),
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }))));
}

function SvgIconCalendar(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M3 4h18v17H3zm0 6h18M7 7V2m10 0v5" }))));
}

function SvgIconCaretLeft(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M17 21 7 12l10-9" }),
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }))));
}

function SvgIconCaretRight(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "m7 21 10-9L7 3" }),
            React__namespace.createElement("path", { fill: "none", d: "M-.14.11h24v24h-24z" }))));
}

function SvgIconMagnifyingGlass(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "m22 22-5-5" }),
            React__namespace.createElement("circle", { cx: 11, cy: 11, r: 8, fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2 }),
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }))));
}

function SvgIconPlus(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeMiterlimit: 10, strokeWidth: 2, d: "M12 2v20M2 12h20" }),
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }))));
}

function SvgIconSortDown(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M12 4v16l4-4m-8 0 4 4" }))));
}

function SvgIconSortUp(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M12 20V4l4 4M8 8l4-4" }))));
}

function SvgIconSort(props) {
    return (React__namespace.createElement(Icon, Object.assign({}, props),
        React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "1em", height: "1em" },
            React__namespace.createElement("path", { fill: "none", d: "M0 0h24v24H0z" }),
            React__namespace.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M6 20V4l4 4M2 8l4-4m12 0v16l4-4m-8 0 4 4" }))));
}

var parse$1 = {exports: {}};

var createForOfIteratorHelper = {exports: {}};

var unsupportedIterableToArray = {exports: {}};

var arrayLikeToArray = {exports: {}};

(function (module) {
    function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
            len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++)
            arr2[i] = arr[i];
        return arr2;
    }
    module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(arrayLikeToArray));
var arrayLikeToArrayExports = arrayLikeToArray.exports;

(function (module) {
    var arrayLikeToArray = arrayLikeToArrayExports;
    function _unsupportedIterableToArray(o, minLen) {
        if (!o)
            return;
        if (typeof o === "string")
            return arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
            n = o.constructor.name;
        if (n === "Map" || n === "Set")
            return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return arrayLikeToArray(o, minLen);
    }
    module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(unsupportedIterableToArray));
var unsupportedIterableToArrayExports = unsupportedIterableToArray.exports;

(function (module) {
    var unsupportedIterableToArray = unsupportedIterableToArrayExports;
    function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
        if (!it) {
            if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it)
                    o = it;
                var i = 0;
                var F = function F() { };
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length)
                            return {
                                done: true
                            };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = it.call(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it["return"] != null)
                        it["return"]();
                }
                finally {
                    if (didErr)
                        throw err;
                }
            }
        };
    }
    module.exports = _createForOfIteratorHelper, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(createForOfIteratorHelper));
var createForOfIteratorHelperExports = createForOfIteratorHelper.exports;

var assign = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = assign;
    function assign(target, object) {
        if (target == null) {
            throw new TypeError('assign requires that input parameter not be null or undefined');
        }
        for (var property in object) {
            if (Object.prototype.hasOwnProperty.call(object, property)) {
                target[property] = object[property];
            }
        }
        return target;
    }
    module.exports = exports.default;
}(assign, assign.exports));
var assignExports = assign.exports;

var Setter$1 = {};

var assertThisInitialized = {exports: {}};

(function (module) {
    function _assertThisInitialized(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(assertThisInitialized));
var assertThisInitializedExports = assertThisInitialized.exports;

var inherits = {exports: {}};

var setPrototypeOf = {exports: {}};

(function (module) {
    function _setPrototypeOf(o, p) {
        module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        return _setPrototypeOf(o, p);
    }
    module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(setPrototypeOf));
var setPrototypeOfExports = setPrototypeOf.exports;

(function (module) {
    var setPrototypeOf = setPrototypeOfExports;
    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        Object.defineProperty(subClass, "prototype", {
            writable: false
        });
        if (superClass)
            setPrototypeOf(subClass, superClass);
    }
    module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(inherits));
var inheritsExports = inherits.exports;

var createSuper = {exports: {}};

var getPrototypeOf = {exports: {}};

(function (module) {
    function _getPrototypeOf(o) {
        module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        return _getPrototypeOf(o);
    }
    module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(getPrototypeOf));
var getPrototypeOfExports = getPrototypeOf.exports;

var isNativeReflectConstruct = {exports: {}};

(function (module) {
    function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
            return false;
        if (Reflect.construct.sham)
            return false;
        if (typeof Proxy === "function")
            return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
            return true;
        }
        catch (e) {
            return false;
        }
    }
    module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(isNativeReflectConstruct));
var isNativeReflectConstructExports = isNativeReflectConstruct.exports;

var possibleConstructorReturn = {exports: {}};

(function (module) {
    var _typeof = _typeofExports["default"];
    var assertThisInitialized = assertThisInitializedExports;
    function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
            return call;
        }
        else if (call !== void 0) {
            throw new TypeError("Derived constructors may only return object or undefined");
        }
        return assertThisInitialized(self);
    }
    module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(possibleConstructorReturn));
var possibleConstructorReturnExports = possibleConstructorReturn.exports;

(function (module) {
    var getPrototypeOf = getPrototypeOfExports;
    var isNativeReflectConstruct = isNativeReflectConstructExports;
    var possibleConstructorReturn = possibleConstructorReturnExports;
    function _createSuper(Derived) {
        var hasNativeReflectConstruct = isNativeReflectConstruct();
        return function _createSuperInternal() {
            var Super = getPrototypeOf(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = getPrototypeOf(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            }
            else {
                result = Super.apply(this, arguments);
            }
            return possibleConstructorReturn(this, result);
        };
    }
    module.exports = _createSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(createSuper));
var createSuperExports = createSuper.exports;

var classCallCheck = {exports: {}};

(function (module) {
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(classCallCheck));
var classCallCheckExports = classCallCheck.exports;

var createClass = {exports: {}};

var toPropertyKey = {exports: {}};

var toPrimitive = {exports: {}};

(function (module) {
    var _typeof = _typeofExports["default"];
    function _toPrimitive(input, hint) {
        if (_typeof(input) !== "object" || input === null)
            return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== undefined) {
            var res = prim.call(input, hint || "default");
            if (_typeof(res) !== "object")
                return res;
            throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
    }
    module.exports = _toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(toPrimitive));
var toPrimitiveExports = toPrimitive.exports;

(function (module) {
    var _typeof = _typeofExports["default"];
    var toPrimitive = toPrimitiveExports;
    function _toPropertyKey(arg) {
        var key = toPrimitive(arg, "string");
        return _typeof(key) === "symbol" ? key : String(key);
    }
    module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(toPropertyKey));
var toPropertyKeyExports = toPropertyKey.exports;

(function (module) {
    var toPropertyKey = toPropertyKeyExports;
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
                descriptor.writable = true;
            Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
            _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
            _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", {
            writable: false
        });
        return Constructor;
    }
    module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(createClass));
var createClassExports = createClass.exports;

var defineProperty = {exports: {}};

(function (module) {
    var toPropertyKey = toPropertyKeyExports;
    function _defineProperty(obj, key, value) {
        key = toPropertyKey(key);
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        }
        else {
            obj[key] = value;
        }
        return obj;
    }
    module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
}(defineProperty));
var definePropertyExports = defineProperty.exports;

var _interopRequireDefault$w = interopRequireDefaultExports.default;
Object.defineProperty(Setter$1, "__esModule", {
    value: true
});
Setter$1.ValueSetter = Setter$1.Setter = Setter$1.DateToSystemTimezoneSetter = void 0;
var _assertThisInitialized2$v = _interopRequireDefault$w(assertThisInitializedExports);
var _inherits2$v = _interopRequireDefault$w(inheritsExports);
var _createSuper2$v = _interopRequireDefault$w(createSuperExports);
var _classCallCheck2$w = _interopRequireDefault$w(classCallCheckExports);
var _createClass2$w = _interopRequireDefault$w(createClassExports);
var _defineProperty2$w = _interopRequireDefault$w(definePropertyExports);
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = /*#__PURE__*/ function () {
    function Setter() {
        (0, _classCallCheck2$w.default)(this, Setter);
        (0, _defineProperty2$w.default)(this, "priority", void 0);
        (0, _defineProperty2$w.default)(this, "subPriority", 0);
    }
    (0, _createClass2$w.default)(Setter, [{
            key: "validate",
            value: function validate(_utcDate, _options) {
                return true;
            }
        }]);
    return Setter;
}();
Setter$1.Setter = Setter;
var ValueSetter = /*#__PURE__*/ function (_Setter) {
    (0, _inherits2$v.default)(ValueSetter, _Setter);
    var _super = (0, _createSuper2$v.default)(ValueSetter);
    function ValueSetter(value, validateValue, setValue, priority, subPriority) {
        var _this;
        (0, _classCallCheck2$w.default)(this, ValueSetter);
        _this = _super.call(this);
        _this.value = value;
        _this.validateValue = validateValue;
        _this.setValue = setValue;
        _this.priority = priority;
        if (subPriority) {
            _this.subPriority = subPriority;
        }
        return _this;
    }
    (0, _createClass2$w.default)(ValueSetter, [{
            key: "validate",
            value: function validate(utcDate, options) {
                return this.validateValue(utcDate, this.value, options);
            }
        }, {
            key: "set",
            value: function set(utcDate, flags, options) {
                return this.setValue(utcDate, flags, this.value, options);
            }
        }]);
    return ValueSetter;
}(Setter);
Setter$1.ValueSetter = ValueSetter;
var DateToSystemTimezoneSetter = /*#__PURE__*/ function (_Setter2) {
    (0, _inherits2$v.default)(DateToSystemTimezoneSetter, _Setter2);
    var _super2 = (0, _createSuper2$v.default)(DateToSystemTimezoneSetter);
    function DateToSystemTimezoneSetter() {
        var _this2;
        (0, _classCallCheck2$w.default)(this, DateToSystemTimezoneSetter);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this2 = _super2.call.apply(_super2, [this].concat(args));
        (0, _defineProperty2$w.default)((0, _assertThisInitialized2$v.default)(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
        (0, _defineProperty2$w.default)((0, _assertThisInitialized2$v.default)(_this2), "subPriority", -1);
        return _this2;
    }
    (0, _createClass2$w.default)(DateToSystemTimezoneSetter, [{
            key: "set",
            value: function set(date, flags) {
                if (flags.timestampIsSet) {
                    return date;
                }
                var convertedDate = new Date(0);
                convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
                convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
                return convertedDate;
            }
        }]);
    return DateToSystemTimezoneSetter;
}(Setter);
Setter$1.DateToSystemTimezoneSetter = DateToSystemTimezoneSetter;

var parsers$1 = {};

var EraParser$1 = {};

var Parser$1 = {};

var _interopRequireDefault$v = interopRequireDefaultExports.default;
Object.defineProperty(Parser$1, "__esModule", {
    value: true
});
Parser$1.Parser = void 0;
var _classCallCheck2$v = _interopRequireDefault$v(classCallCheckExports);
var _createClass2$v = _interopRequireDefault$v(createClassExports);
var _defineProperty2$v = _interopRequireDefault$v(definePropertyExports);
var _Setter = Setter$1;
var Parser = /*#__PURE__*/ function () {
    function Parser() {
        (0, _classCallCheck2$v.default)(this, Parser);
        (0, _defineProperty2$v.default)(this, "incompatibleTokens", void 0);
        (0, _defineProperty2$v.default)(this, "priority", void 0);
        (0, _defineProperty2$v.default)(this, "subPriority", void 0);
    }
    (0, _createClass2$v.default)(Parser, [{
            key: "run",
            value: function run(dateString, token, match, options) {
                var result = this.parse(dateString, token, match, options);
                if (!result) {
                    return null;
                }
                return {
                    setter: new _Setter.ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
                    rest: result.rest
                };
            }
        }, {
            key: "validate",
            value: function validate(_utcDate, _value, _options) {
                return true;
            }
        }]);
    return Parser;
}();
Parser$1.Parser = Parser;

var _interopRequireDefault$u = interopRequireDefaultExports.default;
Object.defineProperty(EraParser$1, "__esModule", {
    value: true
});
EraParser$1.EraParser = void 0;
var _classCallCheck2$u = _interopRequireDefault$u(classCallCheckExports);
var _createClass2$u = _interopRequireDefault$u(createClassExports);
var _assertThisInitialized2$u = _interopRequireDefault$u(assertThisInitializedExports);
var _inherits2$u = _interopRequireDefault$u(inheritsExports);
var _createSuper2$u = _interopRequireDefault$u(createSuperExports);
var _defineProperty2$u = _interopRequireDefault$u(definePropertyExports);
var _Parser2$u = Parser$1;
var EraParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$u.default)(EraParser, _Parser);
    var _super = (0, _createSuper2$u.default)(EraParser);
    function EraParser() {
        var _this;
        (0, _classCallCheck2$u.default)(this, EraParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$u.default)((0, _assertThisInitialized2$u.default)(_this), "priority", 140);
        (0, _defineProperty2$u.default)((0, _assertThisInitialized2$u.default)(_this), "incompatibleTokens", ['R', 'u', 't', 'T']);
        return _this;
    }
    (0, _createClass2$u.default)(EraParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    // AD, BC
                    case 'G':
                    case 'GG':
                    case 'GGG':
                        return match.era(dateString, {
                            width: 'abbreviated'
                        }) || match.era(dateString, {
                            width: 'narrow'
                        });
                    // A, B
                    case 'GGGGG':
                        return match.era(dateString, {
                            width: 'narrow'
                        });
                    // Anno Domini, Before Christ
                    case 'GGGG':
                    default:
                        return match.era(dateString, {
                            width: 'wide'
                        }) || match.era(dateString, {
                            width: 'abbreviated'
                        }) || match.era(dateString, {
                            width: 'narrow'
                        });
                }
            }
        }, {
            key: "set",
            value: function set(date, flags, value) {
                flags.era = value;
                date.setUTCFullYear(value, 0, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return EraParser;
}(_Parser2$u.Parser);
EraParser$1.EraParser = EraParser;

var YearParser$1 = {};

var utils = {};

var constants$1 = {};

Object.defineProperty(constants$1, "__esModule", {
    value: true
});
constants$1.secondsInYear = constants$1.secondsInWeek = constants$1.secondsInQuarter = constants$1.secondsInMonth = constants$1.secondsInMinute = constants$1.secondsInHour = constants$1.secondsInDay = constants$1.quartersInYear = constants$1.monthsInYear = constants$1.monthsInQuarter = constants$1.minutesInHour = constants$1.minTime = constants$1.millisecondsInSecond = constants$1.millisecondsInMinute = constants$1.millisecondsInHour = constants$1.maxTime = constants$1.daysInYear = constants$1.daysInWeek = void 0;
/**
 * Days in 1 week.
 *
 * @name daysInWeek
 * @constant
 * @type {number}
 * @default
 */
var daysInWeek = 7;
/**
 * Days in 1 year
 * One years equals 365.2425 days according to the formula:
 *
 * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.
 * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days
 *
 * @name daysInYear
 * @constant
 * @type {number}
 * @default
 */
constants$1.daysInWeek = daysInWeek;
var daysInYear = 365.2425;
/**
 * Maximum allowed time.
 *
 * @name maxTime
 * @constant
 * @type {number}
 * @default
 */
constants$1.daysInYear = daysInYear;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;
/**
 * Milliseconds in 1 minute
 *
 * @name millisecondsInMinute
 * @constant
 * @type {number}
 * @default
 */
constants$1.maxTime = maxTime;
var millisecondsInMinute = 60000;
/**
 * Milliseconds in 1 hour
 *
 * @name millisecondsInHour
 * @constant
 * @type {number}
 * @default
 */
constants$1.millisecondsInMinute = millisecondsInMinute;
var millisecondsInHour = 3600000;
/**
 * Milliseconds in 1 second
 *
 * @name millisecondsInSecond
 * @constant
 * @type {number}
 * @default
 */
constants$1.millisecondsInHour = millisecondsInHour;
var millisecondsInSecond = 1000;
/**
 * Minimum allowed time.
 *
 * @name minTime
 * @constant
 * @type {number}
 * @default
 */
constants$1.millisecondsInSecond = millisecondsInSecond;
var minTime = -maxTime;
/**
 * Minutes in 1 hour
 *
 * @name minutesInHour
 * @constant
 * @type {number}
 * @default
 */
constants$1.minTime = minTime;
var minutesInHour = 60;
/**
 * Months in 1 quarter
 *
 * @name monthsInQuarter
 * @constant
 * @type {number}
 * @default
 */
constants$1.minutesInHour = minutesInHour;
var monthsInQuarter = 3;
/**
 * Months in 1 year
 *
 * @name monthsInYear
 * @constant
 * @type {number}
 * @default
 */
constants$1.monthsInQuarter = monthsInQuarter;
var monthsInYear = 12;
/**
 * Quarters in 1 year
 *
 * @name quartersInYear
 * @constant
 * @type {number}
 * @default
 */
constants$1.monthsInYear = monthsInYear;
var quartersInYear = 4;
/**
 * Seconds in 1 hour
 *
 * @name secondsInHour
 * @constant
 * @type {number}
 * @default
 */
constants$1.quartersInYear = quartersInYear;
var secondsInHour = 3600;
/**
 * Seconds in 1 minute
 *
 * @name secondsInMinute
 * @constant
 * @type {number}
 * @default
 */
constants$1.secondsInHour = secondsInHour;
var secondsInMinute = 60;
/**
 * Seconds in 1 day
 *
 * @name secondsInDay
 * @constant
 * @type {number}
 * @default
 */
constants$1.secondsInMinute = secondsInMinute;
var secondsInDay = secondsInHour * 24;
/**
 * Seconds in 1 week
 *
 * @name secondsInWeek
 * @constant
 * @type {number}
 * @default
 */
constants$1.secondsInDay = secondsInDay;
var secondsInWeek = secondsInDay * 7;
/**
 * Seconds in 1 year
 *
 * @name secondsInYear
 * @constant
 * @type {number}
 * @default
 */
constants$1.secondsInWeek = secondsInWeek;
var secondsInYear = secondsInDay * daysInYear;
/**
 * Seconds in 1 month
 *
 * @name secondsInMonth
 * @constant
 * @type {number}
 * @default
 */
constants$1.secondsInYear = secondsInYear;
var secondsInMonth = secondsInYear / 12;
/**
 * Seconds in 1 quarter
 *
 * @name secondsInQuarter
 * @constant
 * @type {number}
 * @default
 */
constants$1.secondsInMonth = secondsInMonth;
var secondsInQuarter = secondsInMonth * 3;
constants$1.secondsInQuarter = secondsInQuarter;

var constants = {};

Object.defineProperty(constants, "__esModule", {
    value: true
});
constants.timezonePatterns = constants.numericPatterns = void 0;
var numericPatterns = {
    month: /^(1[0-2]|0?\d)/,
    // 0 to 12
    date: /^(3[0-1]|[0-2]?\d)/,
    // 0 to 31
    dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
    // 0 to 366
    week: /^(5[0-3]|[0-4]?\d)/,
    // 0 to 53
    hour23h: /^(2[0-3]|[0-1]?\d)/,
    // 0 to 23
    hour24h: /^(2[0-4]|[0-1]?\d)/,
    // 0 to 24
    hour11h: /^(1[0-1]|0?\d)/,
    // 0 to 11
    hour12h: /^(1[0-2]|0?\d)/,
    // 0 to 12
    minute: /^[0-5]?\d/,
    // 0 to 59
    second: /^[0-5]?\d/,
    // 0 to 59
    singleDigit: /^\d/,
    // 0 to 9
    twoDigits: /^\d{1,2}/,
    // 0 to 99
    threeDigits: /^\d{1,3}/,
    // 0 to 999
    fourDigits: /^\d{1,4}/,
    // 0 to 9999
    anyDigitsSigned: /^-?\d+/,
    singleDigitSigned: /^-?\d/,
    // 0 to 9, -0 to -9
    twoDigitsSigned: /^-?\d{1,2}/,
    // 0 to 99, -0 to -99
    threeDigitsSigned: /^-?\d{1,3}/,
    // 0 to 999, -0 to -999
    fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999
};
constants.numericPatterns = numericPatterns;
var timezonePatterns = {
    basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
    basic: /^([+-])(\d{2})(\d{2})|Z/,
    basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
    extended: /^([+-])(\d{2}):(\d{2})|Z/,
    extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
constants.timezonePatterns = timezonePatterns;

Object.defineProperty(utils, "__esModule", {
    value: true
});
utils.dayPeriodEnumToHours = dayPeriodEnumToHours;
utils.isLeapYearIndex = isLeapYearIndex;
utils.mapValue = mapValue;
utils.normalizeTwoDigitYear = normalizeTwoDigitYear;
utils.parseAnyDigitsSigned = parseAnyDigitsSigned;
utils.parseNDigits = parseNDigits;
utils.parseNDigitsSigned = parseNDigitsSigned;
utils.parseNumericPattern = parseNumericPattern;
utils.parseTimezonePattern = parseTimezonePattern;
var _index$8 = constants$1;
var _constants$e = constants;
function mapValue(parseFnResult, mapFn) {
    if (!parseFnResult) {
        return parseFnResult;
    }
    return {
        value: mapFn(parseFnResult.value),
        rest: parseFnResult.rest
    };
}
function parseNumericPattern(pattern, dateString) {
    var matchResult = dateString.match(pattern);
    if (!matchResult) {
        return null;
    }
    return {
        value: parseInt(matchResult[0], 10),
        rest: dateString.slice(matchResult[0].length)
    };
}
function parseTimezonePattern(pattern, dateString) {
    var matchResult = dateString.match(pattern);
    if (!matchResult) {
        return null;
    }
    // Input is 'Z'
    if (matchResult[0] === 'Z') {
        return {
            value: 0,
            rest: dateString.slice(1)
        };
    }
    var sign = matchResult[1] === '+' ? 1 : -1;
    var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
    var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
    var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
    return {
        value: sign * (hours * _index$8.millisecondsInHour + minutes * _index$8.millisecondsInMinute + seconds * _index$8.millisecondsInSecond),
        rest: dateString.slice(matchResult[0].length)
    };
}
function parseAnyDigitsSigned(dateString) {
    return parseNumericPattern(_constants$e.numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
    switch (n) {
        case 1:
            return parseNumericPattern(_constants$e.numericPatterns.singleDigit, dateString);
        case 2:
            return parseNumericPattern(_constants$e.numericPatterns.twoDigits, dateString);
        case 3:
            return parseNumericPattern(_constants$e.numericPatterns.threeDigits, dateString);
        case 4:
            return parseNumericPattern(_constants$e.numericPatterns.fourDigits, dateString);
        default:
            return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), dateString);
    }
}
function parseNDigitsSigned(n, dateString) {
    switch (n) {
        case 1:
            return parseNumericPattern(_constants$e.numericPatterns.singleDigitSigned, dateString);
        case 2:
            return parseNumericPattern(_constants$e.numericPatterns.twoDigitsSigned, dateString);
        case 3:
            return parseNumericPattern(_constants$e.numericPatterns.threeDigitsSigned, dateString);
        case 4:
            return parseNumericPattern(_constants$e.numericPatterns.fourDigitsSigned, dateString);
        default:
            return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), dateString);
    }
}
function dayPeriodEnumToHours(dayPeriod) {
    switch (dayPeriod) {
        case 'morning':
            return 4;
        case 'evening':
            return 17;
        case 'pm':
        case 'noon':
        case 'afternoon':
            return 12;
        case 'am':
        case 'midnight':
        case 'night':
        default:
            return 0;
    }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
    var isCommonEra = currentYear > 0;
    // Absolute number of the current year:
    // 1 -> 1 AC
    // 0 -> 1 BC
    // -1 -> 2 BC
    var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
    var result;
    if (absCurrentYear <= 50) {
        result = twoDigitYear || 100;
    }
    else {
        var rangeEnd = absCurrentYear + 50;
        var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
        var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
        result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
    }
    return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

var _interopRequireDefault$t = interopRequireDefaultExports.default;
Object.defineProperty(YearParser$1, "__esModule", {
    value: true
});
YearParser$1.YearParser = void 0;
var _classCallCheck2$t = _interopRequireDefault$t(classCallCheckExports);
var _createClass2$t = _interopRequireDefault$t(createClassExports);
var _assertThisInitialized2$t = _interopRequireDefault$t(assertThisInitializedExports);
var _inherits2$t = _interopRequireDefault$t(inheritsExports);
var _createSuper2$t = _interopRequireDefault$t(createSuperExports);
var _defineProperty2$t = _interopRequireDefault$t(definePropertyExports);
var _Parser2$t = Parser$1;
var _utils$s = utils;
// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
// | Year     |     y | yy |   yyy |  yyyy | yyyyy |
// |----------|-------|----|-------|-------|-------|
// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
var YearParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$t.default)(YearParser, _Parser);
    var _super = (0, _createSuper2$t.default)(YearParser);
    function YearParser() {
        var _this;
        (0, _classCallCheck2$t.default)(this, YearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$t.default)((0, _assertThisInitialized2$t.default)(_this), "priority", 130);
        (0, _defineProperty2$t.default)((0, _assertThisInitialized2$t.default)(_this), "incompatibleTokens", ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    (0, _createClass2$t.default)(YearParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(year) {
                    return {
                        year: year,
                        isTwoDigitYear: token === 'yy'
                    };
                };
                switch (token) {
                    case 'y':
                        return (0, _utils$s.mapValue)((0, _utils$s.parseNDigits)(4, dateString), valueCallback);
                    case 'yo':
                        return (0, _utils$s.mapValue)(match.ordinalNumber(dateString, {
                            unit: 'year'
                        }), valueCallback);
                    default:
                        return (0, _utils$s.mapValue)((0, _utils$s.parseNDigits)(token.length, dateString), valueCallback);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value.isTwoDigitYear || value.year > 0;
            }
        }, {
            key: "set",
            value: function set(date, flags, value) {
                var currentYear = date.getUTCFullYear();
                if (value.isTwoDigitYear) {
                    var normalizedTwoDigitYear = (0, _utils$s.normalizeTwoDigitYear)(value.year, currentYear);
                    date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
                    date.setUTCHours(0, 0, 0, 0);
                    return date;
                }
                var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
                date.setUTCFullYear(year, 0, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return YearParser;
}(_Parser2$t.Parser);
YearParser$1.YearParser = YearParser;

var LocalWeekYearParser$1 = {};

var _interopRequireDefault$s = interopRequireDefaultExports.default;
Object.defineProperty(LocalWeekYearParser$1, "__esModule", {
    value: true
});
LocalWeekYearParser$1.LocalWeekYearParser = void 0;
var _classCallCheck2$s = _interopRequireDefault$s(classCallCheckExports);
var _createClass2$s = _interopRequireDefault$s(createClassExports);
var _assertThisInitialized2$s = _interopRequireDefault$s(assertThisInitializedExports);
var _inherits2$s = _interopRequireDefault$s(inheritsExports);
var _createSuper2$s = _interopRequireDefault$s(createSuperExports);
var _defineProperty2$s = _interopRequireDefault$s(definePropertyExports);
var _Parser2$s = Parser$1;
var _utils$r = utils;
var _index$7 = _interopRequireDefault$s(getUTCWeekYearExports);
var _index2$2 = _interopRequireDefault$s(startOfUTCWeekExports);
// Local week-numbering year
var LocalWeekYearParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$s.default)(LocalWeekYearParser, _Parser);
    var _super = (0, _createSuper2$s.default)(LocalWeekYearParser);
    function LocalWeekYearParser() {
        var _this;
        (0, _classCallCheck2$s.default)(this, LocalWeekYearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$s.default)((0, _assertThisInitialized2$s.default)(_this), "priority", 130);
        (0, _defineProperty2$s.default)((0, _assertThisInitialized2$s.default)(_this), "incompatibleTokens", ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
        return _this;
    }
    (0, _createClass2$s.default)(LocalWeekYearParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(year) {
                    return {
                        year: year,
                        isTwoDigitYear: token === 'YY'
                    };
                };
                switch (token) {
                    case 'Y':
                        return (0, _utils$r.mapValue)((0, _utils$r.parseNDigits)(4, dateString), valueCallback);
                    case 'Yo':
                        return (0, _utils$r.mapValue)(match.ordinalNumber(dateString, {
                            unit: 'year'
                        }), valueCallback);
                    default:
                        return (0, _utils$r.mapValue)((0, _utils$r.parseNDigits)(token.length, dateString), valueCallback);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value.isTwoDigitYear || value.year > 0;
            }
        }, {
            key: "set",
            value: function set(date, flags, value, options) {
                var currentYear = (0, _index$7.default)(date, options);
                if (value.isTwoDigitYear) {
                    var normalizedTwoDigitYear = (0, _utils$r.normalizeTwoDigitYear)(value.year, currentYear);
                    date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
                    date.setUTCHours(0, 0, 0, 0);
                    return (0, _index2$2.default)(date, options);
                }
                var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
                date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
                date.setUTCHours(0, 0, 0, 0);
                return (0, _index2$2.default)(date, options);
            }
        }]);
    return LocalWeekYearParser;
}(_Parser2$s.Parser);
LocalWeekYearParser$1.LocalWeekYearParser = LocalWeekYearParser;

var ISOWeekYearParser$1 = {};

var _interopRequireDefault$r = interopRequireDefaultExports.default;
Object.defineProperty(ISOWeekYearParser$1, "__esModule", {
    value: true
});
ISOWeekYearParser$1.ISOWeekYearParser = void 0;
var _classCallCheck2$r = _interopRequireDefault$r(classCallCheckExports);
var _createClass2$r = _interopRequireDefault$r(createClassExports);
var _assertThisInitialized2$r = _interopRequireDefault$r(assertThisInitializedExports);
var _inherits2$r = _interopRequireDefault$r(inheritsExports);
var _createSuper2$r = _interopRequireDefault$r(createSuperExports);
var _defineProperty2$r = _interopRequireDefault$r(definePropertyExports);
var _Parser2$r = Parser$1;
var _utils$q = utils;
var _index$6 = _interopRequireDefault$r(startOfUTCISOWeekExports);
// ISO week-numbering year
var ISOWeekYearParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$r.default)(ISOWeekYearParser, _Parser);
    var _super = (0, _createSuper2$r.default)(ISOWeekYearParser);
    function ISOWeekYearParser() {
        var _this;
        (0, _classCallCheck2$r.default)(this, ISOWeekYearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$r.default)((0, _assertThisInitialized2$r.default)(_this), "priority", 130);
        (0, _defineProperty2$r.default)((0, _assertThisInitialized2$r.default)(_this), "incompatibleTokens", ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
        return _this;
    }
    (0, _createClass2$r.default)(ISOWeekYearParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                if (token === 'R') {
                    return (0, _utils$q.parseNDigitsSigned)(4, dateString);
                }
                return (0, _utils$q.parseNDigitsSigned)(token.length, dateString);
            }
        }, {
            key: "set",
            value: function set(_date, _flags, value) {
                var firstWeekOfYear = new Date(0);
                firstWeekOfYear.setUTCFullYear(value, 0, 4);
                firstWeekOfYear.setUTCHours(0, 0, 0, 0);
                return (0, _index$6.default)(firstWeekOfYear);
            }
        }]);
    return ISOWeekYearParser;
}(_Parser2$r.Parser);
ISOWeekYearParser$1.ISOWeekYearParser = ISOWeekYearParser;

var ExtendedYearParser$1 = {};

var _interopRequireDefault$q = interopRequireDefaultExports.default;
Object.defineProperty(ExtendedYearParser$1, "__esModule", {
    value: true
});
ExtendedYearParser$1.ExtendedYearParser = void 0;
var _classCallCheck2$q = _interopRequireDefault$q(classCallCheckExports);
var _createClass2$q = _interopRequireDefault$q(createClassExports);
var _assertThisInitialized2$q = _interopRequireDefault$q(assertThisInitializedExports);
var _inherits2$q = _interopRequireDefault$q(inheritsExports);
var _createSuper2$q = _interopRequireDefault$q(createSuperExports);
var _defineProperty2$q = _interopRequireDefault$q(definePropertyExports);
var _Parser2$q = Parser$1;
var _utils$p = utils;
var ExtendedYearParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$q.default)(ExtendedYearParser, _Parser);
    var _super = (0, _createSuper2$q.default)(ExtendedYearParser);
    function ExtendedYearParser() {
        var _this;
        (0, _classCallCheck2$q.default)(this, ExtendedYearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$q.default)((0, _assertThisInitialized2$q.default)(_this), "priority", 130);
        (0, _defineProperty2$q.default)((0, _assertThisInitialized2$q.default)(_this), "incompatibleTokens", ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    (0, _createClass2$q.default)(ExtendedYearParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                if (token === 'u') {
                    return (0, _utils$p.parseNDigitsSigned)(4, dateString);
                }
                return (0, _utils$p.parseNDigitsSigned)(token.length, dateString);
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCFullYear(value, 0, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return ExtendedYearParser;
}(_Parser2$q.Parser);
ExtendedYearParser$1.ExtendedYearParser = ExtendedYearParser;

var QuarterParser$1 = {};

var _interopRequireDefault$p = interopRequireDefaultExports.default;
Object.defineProperty(QuarterParser$1, "__esModule", {
    value: true
});
QuarterParser$1.QuarterParser = void 0;
var _classCallCheck2$p = _interopRequireDefault$p(classCallCheckExports);
var _createClass2$p = _interopRequireDefault$p(createClassExports);
var _assertThisInitialized2$p = _interopRequireDefault$p(assertThisInitializedExports);
var _inherits2$p = _interopRequireDefault$p(inheritsExports);
var _createSuper2$p = _interopRequireDefault$p(createSuperExports);
var _defineProperty2$p = _interopRequireDefault$p(definePropertyExports);
var _Parser2$p = Parser$1;
var _utils$o = utils;
var QuarterParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$p.default)(QuarterParser, _Parser);
    var _super = (0, _createSuper2$p.default)(QuarterParser);
    function QuarterParser() {
        var _this;
        (0, _classCallCheck2$p.default)(this, QuarterParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$p.default)((0, _assertThisInitialized2$p.default)(_this), "priority", 120);
        (0, _defineProperty2$p.default)((0, _assertThisInitialized2$p.default)(_this), "incompatibleTokens", ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    (0, _createClass2$p.default)(QuarterParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    // 1, 2, 3, 4
                    case 'Q':
                    case 'QQ':
                        // 01, 02, 03, 04
                        return (0, _utils$o.parseNDigits)(token.length, dateString);
                    // 1st, 2nd, 3rd, 4th
                    case 'Qo':
                        return match.ordinalNumber(dateString, {
                            unit: 'quarter'
                        });
                    // Q1, Q2, Q3, Q4
                    case 'QQQ':
                        return match.quarter(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.quarter(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // 1, 2, 3, 4 (narrow quarter; could be not numerical)
                    case 'QQQQQ':
                        return match.quarter(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // 1st quarter, 2nd quarter, ...
                    case 'QQQQ':
                    default:
                        return match.quarter(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.quarter(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.quarter(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 4;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth((value - 1) * 3, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return QuarterParser;
}(_Parser2$p.Parser);
QuarterParser$1.QuarterParser = QuarterParser;

var StandAloneQuarterParser$1 = {};

var _interopRequireDefault$o = interopRequireDefaultExports.default;
Object.defineProperty(StandAloneQuarterParser$1, "__esModule", {
    value: true
});
StandAloneQuarterParser$1.StandAloneQuarterParser = void 0;
var _classCallCheck2$o = _interopRequireDefault$o(classCallCheckExports);
var _createClass2$o = _interopRequireDefault$o(createClassExports);
var _assertThisInitialized2$o = _interopRequireDefault$o(assertThisInitializedExports);
var _inherits2$o = _interopRequireDefault$o(inheritsExports);
var _createSuper2$o = _interopRequireDefault$o(createSuperExports);
var _defineProperty2$o = _interopRequireDefault$o(definePropertyExports);
var _Parser2$o = Parser$1;
var _utils$n = utils;
var StandAloneQuarterParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$o.default)(StandAloneQuarterParser, _Parser);
    var _super = (0, _createSuper2$o.default)(StandAloneQuarterParser);
    function StandAloneQuarterParser() {
        var _this;
        (0, _classCallCheck2$o.default)(this, StandAloneQuarterParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$o.default)((0, _assertThisInitialized2$o.default)(_this), "priority", 120);
        (0, _defineProperty2$o.default)((0, _assertThisInitialized2$o.default)(_this), "incompatibleTokens", ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    (0, _createClass2$o.default)(StandAloneQuarterParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    // 1, 2, 3, 4
                    case 'q':
                    case 'qq':
                        // 01, 02, 03, 04
                        return (0, _utils$n.parseNDigits)(token.length, dateString);
                    // 1st, 2nd, 3rd, 4th
                    case 'qo':
                        return match.ordinalNumber(dateString, {
                            unit: 'quarter'
                        });
                    // Q1, Q2, Q3, Q4
                    case 'qqq':
                        return match.quarter(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.quarter(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // 1, 2, 3, 4 (narrow quarter; could be not numerical)
                    case 'qqqqq':
                        return match.quarter(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // 1st quarter, 2nd quarter, ...
                    case 'qqqq':
                    default:
                        return match.quarter(dateString, {
                            width: 'wide',
                            context: 'standalone'
                        }) || match.quarter(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.quarter(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 4;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth((value - 1) * 3, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return StandAloneQuarterParser;
}(_Parser2$o.Parser);
StandAloneQuarterParser$1.StandAloneQuarterParser = StandAloneQuarterParser;

var MonthParser$1 = {};

var _interopRequireDefault$n = interopRequireDefaultExports.default;
Object.defineProperty(MonthParser$1, "__esModule", {
    value: true
});
MonthParser$1.MonthParser = void 0;
var _classCallCheck2$n = _interopRequireDefault$n(classCallCheckExports);
var _createClass2$n = _interopRequireDefault$n(createClassExports);
var _assertThisInitialized2$n = _interopRequireDefault$n(assertThisInitializedExports);
var _inherits2$n = _interopRequireDefault$n(inheritsExports);
var _createSuper2$n = _interopRequireDefault$n(createSuperExports);
var _defineProperty2$n = _interopRequireDefault$n(definePropertyExports);
var _utils$m = utils;
var _Parser2$n = Parser$1;
var _constants$d = constants;
var MonthParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$n.default)(MonthParser, _Parser);
    var _super = (0, _createSuper2$n.default)(MonthParser);
    function MonthParser() {
        var _this;
        (0, _classCallCheck2$n.default)(this, MonthParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$n.default)((0, _assertThisInitialized2$n.default)(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
        (0, _defineProperty2$n.default)((0, _assertThisInitialized2$n.default)(_this), "priority", 110);
        return _this;
    }
    (0, _createClass2$n.default)(MonthParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(value) {
                    return value - 1;
                };
                switch (token) {
                    // 1, 2, ..., 12
                    case 'M':
                        return (0, _utils$m.mapValue)((0, _utils$m.parseNumericPattern)(_constants$d.numericPatterns.month, dateString), valueCallback);
                    // 01, 02, ..., 12
                    case 'MM':
                        return (0, _utils$m.mapValue)((0, _utils$m.parseNDigits)(2, dateString), valueCallback);
                    // 1st, 2nd, ..., 12th
                    case 'Mo':
                        return (0, _utils$m.mapValue)(match.ordinalNumber(dateString, {
                            unit: 'month'
                        }), valueCallback);
                    // Jan, Feb, ..., Dec
                    case 'MMM':
                        return match.month(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.month(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // J, F, ..., D
                    case 'MMMMM':
                        return match.month(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // January, February, ..., December
                    case 'MMMM':
                    default:
                        return match.month(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.month(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.month(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 11;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth(value, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return MonthParser;
}(_Parser2$n.Parser);
MonthParser$1.MonthParser = MonthParser;

var StandAloneMonthParser$1 = {};

var _interopRequireDefault$m = interopRequireDefaultExports.default;
Object.defineProperty(StandAloneMonthParser$1, "__esModule", {
    value: true
});
StandAloneMonthParser$1.StandAloneMonthParser = void 0;
var _classCallCheck2$m = _interopRequireDefault$m(classCallCheckExports);
var _createClass2$m = _interopRequireDefault$m(createClassExports);
var _assertThisInitialized2$m = _interopRequireDefault$m(assertThisInitializedExports);
var _inherits2$m = _interopRequireDefault$m(inheritsExports);
var _createSuper2$m = _interopRequireDefault$m(createSuperExports);
var _defineProperty2$m = _interopRequireDefault$m(definePropertyExports);
var _Parser2$m = Parser$1;
var _constants$c = constants;
var _utils$l = utils;
var StandAloneMonthParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$m.default)(StandAloneMonthParser, _Parser);
    var _super = (0, _createSuper2$m.default)(StandAloneMonthParser);
    function StandAloneMonthParser() {
        var _this;
        (0, _classCallCheck2$m.default)(this, StandAloneMonthParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$m.default)((0, _assertThisInitialized2$m.default)(_this), "priority", 110);
        (0, _defineProperty2$m.default)((0, _assertThisInitialized2$m.default)(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    (0, _createClass2$m.default)(StandAloneMonthParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(value) {
                    return value - 1;
                };
                switch (token) {
                    // 1, 2, ..., 12
                    case 'L':
                        return (0, _utils$l.mapValue)((0, _utils$l.parseNumericPattern)(_constants$c.numericPatterns.month, dateString), valueCallback);
                    // 01, 02, ..., 12
                    case 'LL':
                        return (0, _utils$l.mapValue)((0, _utils$l.parseNDigits)(2, dateString), valueCallback);
                    // 1st, 2nd, ..., 12th
                    case 'Lo':
                        return (0, _utils$l.mapValue)(match.ordinalNumber(dateString, {
                            unit: 'month'
                        }), valueCallback);
                    // Jan, Feb, ..., Dec
                    case 'LLL':
                        return match.month(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.month(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // J, F, ..., D
                    case 'LLLLL':
                        return match.month(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // January, February, ..., December
                    case 'LLLL':
                    default:
                        return match.month(dateString, {
                            width: 'wide',
                            context: 'standalone'
                        }) || match.month(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.month(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 11;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth(value, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return StandAloneMonthParser;
}(_Parser2$m.Parser);
StandAloneMonthParser$1.StandAloneMonthParser = StandAloneMonthParser;

var LocalWeekParser$1 = {};

var setUTCWeek = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = setUTCWeek;
    var _index = _interopRequireDefault(toIntegerExports);
    var _index2 = _interopRequireDefault(toDateExports);
    var _index3 = _interopRequireDefault(getUTCWeekExports);
    var _index4 = _interopRequireDefault(requiredArgsExports);
    function setUTCWeek(dirtyDate, dirtyWeek, options) {
        (0, _index4.default)(2, arguments);
        var date = (0, _index2.default)(dirtyDate);
        var week = (0, _index.default)(dirtyWeek);
        var diff = (0, _index3.default)(date, options) - week;
        date.setUTCDate(date.getUTCDate() - diff * 7);
        return date;
    }
    module.exports = exports.default;
}(setUTCWeek, setUTCWeek.exports));
var setUTCWeekExports = setUTCWeek.exports;

var _interopRequireDefault$l = interopRequireDefaultExports.default;
Object.defineProperty(LocalWeekParser$1, "__esModule", {
    value: true
});
LocalWeekParser$1.LocalWeekParser = void 0;
var _classCallCheck2$l = _interopRequireDefault$l(classCallCheckExports);
var _createClass2$l = _interopRequireDefault$l(createClassExports);
var _assertThisInitialized2$l = _interopRequireDefault$l(assertThisInitializedExports);
var _inherits2$l = _interopRequireDefault$l(inheritsExports);
var _createSuper2$l = _interopRequireDefault$l(createSuperExports);
var _defineProperty2$l = _interopRequireDefault$l(definePropertyExports);
var _Parser2$l = Parser$1;
var _constants$b = constants;
var _utils$k = utils;
var _index$5 = _interopRequireDefault$l(setUTCWeekExports);
var _index2$1 = _interopRequireDefault$l(startOfUTCWeekExports);
// Local week of year
var LocalWeekParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$l.default)(LocalWeekParser, _Parser);
    var _super = (0, _createSuper2$l.default)(LocalWeekParser);
    function LocalWeekParser() {
        var _this;
        (0, _classCallCheck2$l.default)(this, LocalWeekParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$l.default)((0, _assertThisInitialized2$l.default)(_this), "priority", 100);
        (0, _defineProperty2$l.default)((0, _assertThisInitialized2$l.default)(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
        return _this;
    }
    (0, _createClass2$l.default)(LocalWeekParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'w':
                        return (0, _utils$k.parseNumericPattern)(_constants$b.numericPatterns.week, dateString);
                    case 'wo':
                        return match.ordinalNumber(dateString, {
                            unit: 'week'
                        });
                    default:
                        return (0, _utils$k.parseNDigits)(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 53;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value, options) {
                return (0, _index2$1.default)((0, _index$5.default)(date, value, options), options);
            }
        }]);
    return LocalWeekParser;
}(_Parser2$l.Parser);
LocalWeekParser$1.LocalWeekParser = LocalWeekParser;

var ISOWeekParser$1 = {};

var setUTCISOWeek = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = setUTCISOWeek;
    var _index = _interopRequireDefault(toIntegerExports);
    var _index2 = _interopRequireDefault(toDateExports);
    var _index3 = _interopRequireDefault(getUTCISOWeekExports);
    var _index4 = _interopRequireDefault(requiredArgsExports);
    function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
        (0, _index4.default)(2, arguments);
        var date = (0, _index2.default)(dirtyDate);
        var isoWeek = (0, _index.default)(dirtyISOWeek);
        var diff = (0, _index3.default)(date) - isoWeek;
        date.setUTCDate(date.getUTCDate() - diff * 7);
        return date;
    }
    module.exports = exports.default;
}(setUTCISOWeek, setUTCISOWeek.exports));
var setUTCISOWeekExports = setUTCISOWeek.exports;

var _interopRequireDefault$k = interopRequireDefaultExports.default;
Object.defineProperty(ISOWeekParser$1, "__esModule", {
    value: true
});
ISOWeekParser$1.ISOWeekParser = void 0;
var _classCallCheck2$k = _interopRequireDefault$k(classCallCheckExports);
var _createClass2$k = _interopRequireDefault$k(createClassExports);
var _assertThisInitialized2$k = _interopRequireDefault$k(assertThisInitializedExports);
var _inherits2$k = _interopRequireDefault$k(inheritsExports);
var _createSuper2$k = _interopRequireDefault$k(createSuperExports);
var _defineProperty2$k = _interopRequireDefault$k(definePropertyExports);
var _Parser2$k = Parser$1;
var _constants$a = constants;
var _utils$j = utils;
var _index$4 = _interopRequireDefault$k(setUTCISOWeekExports);
var _index2 = _interopRequireDefault$k(startOfUTCISOWeekExports);
// ISO week of year
var ISOWeekParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$k.default)(ISOWeekParser, _Parser);
    var _super = (0, _createSuper2$k.default)(ISOWeekParser);
    function ISOWeekParser() {
        var _this;
        (0, _classCallCheck2$k.default)(this, ISOWeekParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$k.default)((0, _assertThisInitialized2$k.default)(_this), "priority", 100);
        (0, _defineProperty2$k.default)((0, _assertThisInitialized2$k.default)(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
        return _this;
    }
    (0, _createClass2$k.default)(ISOWeekParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'I':
                        return (0, _utils$j.parseNumericPattern)(_constants$a.numericPatterns.week, dateString);
                    case 'Io':
                        return match.ordinalNumber(dateString, {
                            unit: 'week'
                        });
                    default:
                        return (0, _utils$j.parseNDigits)(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 53;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                return (0, _index2.default)((0, _index$4.default)(date, value));
            }
        }]);
    return ISOWeekParser;
}(_Parser2$k.Parser);
ISOWeekParser$1.ISOWeekParser = ISOWeekParser;

var DateParser$1 = {};

var _interopRequireDefault$j = interopRequireDefaultExports.default;
Object.defineProperty(DateParser$1, "__esModule", {
    value: true
});
DateParser$1.DateParser = void 0;
var _classCallCheck2$j = _interopRequireDefault$j(classCallCheckExports);
var _createClass2$j = _interopRequireDefault$j(createClassExports);
var _assertThisInitialized2$j = _interopRequireDefault$j(assertThisInitializedExports);
var _inherits2$j = _interopRequireDefault$j(inheritsExports);
var _createSuper2$j = _interopRequireDefault$j(createSuperExports);
var _defineProperty2$j = _interopRequireDefault$j(definePropertyExports);
var _utils$i = utils;
var _Parser2$j = Parser$1;
var _constants$9 = constants;
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
// Day of the month
var DateParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$j.default)(DateParser, _Parser);
    var _super = (0, _createSuper2$j.default)(DateParser);
    function DateParser() {
        var _this;
        (0, _classCallCheck2$j.default)(this, DateParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$j.default)((0, _assertThisInitialized2$j.default)(_this), "priority", 90);
        (0, _defineProperty2$j.default)((0, _assertThisInitialized2$j.default)(_this), "subPriority", 1);
        (0, _defineProperty2$j.default)((0, _assertThisInitialized2$j.default)(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    (0, _createClass2$j.default)(DateParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'd':
                        return (0, _utils$i.parseNumericPattern)(_constants$9.numericPatterns.date, dateString);
                    case 'do':
                        return match.ordinalNumber(dateString, {
                            unit: 'date'
                        });
                    default:
                        return (0, _utils$i.parseNDigits)(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(date, value) {
                var year = date.getUTCFullYear();
                var isLeapYear = (0, _utils$i.isLeapYearIndex)(year);
                var month = date.getUTCMonth();
                if (isLeapYear) {
                    return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
                }
                else {
                    return value >= 1 && value <= DAYS_IN_MONTH[month];
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCDate(value);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return DateParser;
}(_Parser2$j.Parser);
DateParser$1.DateParser = DateParser;

var DayOfYearParser$1 = {};

var _interopRequireDefault$i = interopRequireDefaultExports.default;
Object.defineProperty(DayOfYearParser$1, "__esModule", {
    value: true
});
DayOfYearParser$1.DayOfYearParser = void 0;
var _classCallCheck2$i = _interopRequireDefault$i(classCallCheckExports);
var _createClass2$i = _interopRequireDefault$i(createClassExports);
var _assertThisInitialized2$i = _interopRequireDefault$i(assertThisInitializedExports);
var _inherits2$i = _interopRequireDefault$i(inheritsExports);
var _createSuper2$i = _interopRequireDefault$i(createSuperExports);
var _defineProperty2$i = _interopRequireDefault$i(definePropertyExports);
var _Parser2$i = Parser$1;
var _constants$8 = constants;
var _utils$h = utils;
var DayOfYearParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$i.default)(DayOfYearParser, _Parser);
    var _super = (0, _createSuper2$i.default)(DayOfYearParser);
    function DayOfYearParser() {
        var _this;
        (0, _classCallCheck2$i.default)(this, DayOfYearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$i.default)((0, _assertThisInitialized2$i.default)(_this), "priority", 90);
        (0, _defineProperty2$i.default)((0, _assertThisInitialized2$i.default)(_this), "subpriority", 1);
        (0, _defineProperty2$i.default)((0, _assertThisInitialized2$i.default)(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    (0, _createClass2$i.default)(DayOfYearParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'D':
                    case 'DD':
                        return (0, _utils$h.parseNumericPattern)(_constants$8.numericPatterns.dayOfYear, dateString);
                    case 'Do':
                        return match.ordinalNumber(dateString, {
                            unit: 'date'
                        });
                    default:
                        return (0, _utils$h.parseNDigits)(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(date, value) {
                var year = date.getUTCFullYear();
                var isLeapYear = (0, _utils$h.isLeapYearIndex)(year);
                if (isLeapYear) {
                    return value >= 1 && value <= 366;
                }
                else {
                    return value >= 1 && value <= 365;
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth(0, value);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return DayOfYearParser;
}(_Parser2$i.Parser);
DayOfYearParser$1.DayOfYearParser = DayOfYearParser;

var DayParser$1 = {};

var setUTCDay = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = setUTCDay;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    var _index3 = _interopRequireDefault(toIntegerExports);
    var _index4 = defaultOptions$2;
    function setUTCDay(dirtyDate, dirtyDay, options) {
        var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        (0, _index2.default)(2, arguments);
        var defaultOptions = (0, _index4.getDefaultOptions)();
        var weekStartsOn = (0, _index3.default)((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
        // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
            throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
        }
        var date = (0, _index.default)(dirtyDate);
        var day = (0, _index3.default)(dirtyDay);
        var currentDay = date.getUTCDay();
        var remainder = day % 7;
        var dayIndex = (remainder + 7) % 7;
        var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
        date.setUTCDate(date.getUTCDate() + diff);
        return date;
    }
    module.exports = exports.default;
}(setUTCDay, setUTCDay.exports));
var setUTCDayExports = setUTCDay.exports;

var _interopRequireDefault$h = interopRequireDefaultExports.default;
Object.defineProperty(DayParser$1, "__esModule", {
    value: true
});
DayParser$1.DayParser = void 0;
var _classCallCheck2$h = _interopRequireDefault$h(classCallCheckExports);
var _createClass2$h = _interopRequireDefault$h(createClassExports);
var _assertThisInitialized2$h = _interopRequireDefault$h(assertThisInitializedExports);
var _inherits2$h = _interopRequireDefault$h(inheritsExports);
var _createSuper2$h = _interopRequireDefault$h(createSuperExports);
var _defineProperty2$h = _interopRequireDefault$h(definePropertyExports);
var _Parser2$h = Parser$1;
var _index$3 = _interopRequireDefault$h(setUTCDayExports);
// Day of week
var DayParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$h.default)(DayParser, _Parser);
    var _super = (0, _createSuper2$h.default)(DayParser);
    function DayParser() {
        var _this;
        (0, _classCallCheck2$h.default)(this, DayParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$h.default)((0, _assertThisInitialized2$h.default)(_this), "priority", 90);
        (0, _defineProperty2$h.default)((0, _assertThisInitialized2$h.default)(_this), "incompatibleTokens", ['D', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    (0, _createClass2$h.default)(DayParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    // Tue
                    case 'E':
                    case 'EE':
                    case 'EEE':
                        return match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // T
                    case 'EEEEE':
                        return match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // Tu
                    case 'EEEEEE':
                        return match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // Tuesday
                    case 'EEEE':
                    default:
                        return match.day(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 6;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value, options) {
                date = (0, _index$3.default)(date, value, options);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return DayParser;
}(_Parser2$h.Parser);
DayParser$1.DayParser = DayParser;

var LocalDayParser$1 = {};

var _interopRequireDefault$g = interopRequireDefaultExports.default;
Object.defineProperty(LocalDayParser$1, "__esModule", {
    value: true
});
LocalDayParser$1.LocalDayParser = void 0;
var _classCallCheck2$g = _interopRequireDefault$g(classCallCheckExports);
var _createClass2$g = _interopRequireDefault$g(createClassExports);
var _assertThisInitialized2$g = _interopRequireDefault$g(assertThisInitializedExports);
var _inherits2$g = _interopRequireDefault$g(inheritsExports);
var _createSuper2$g = _interopRequireDefault$g(createSuperExports);
var _defineProperty2$g = _interopRequireDefault$g(definePropertyExports);
var _Parser2$g = Parser$1;
var _utils$g = utils;
var _index$2 = _interopRequireDefault$g(setUTCDayExports);
// Local day of week
var LocalDayParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$g.default)(LocalDayParser, _Parser);
    var _super = (0, _createSuper2$g.default)(LocalDayParser);
    function LocalDayParser() {
        var _this;
        (0, _classCallCheck2$g.default)(this, LocalDayParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$g.default)((0, _assertThisInitialized2$g.default)(_this), "priority", 90);
        (0, _defineProperty2$g.default)((0, _assertThisInitialized2$g.default)(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']);
        return _this;
    }
    (0, _createClass2$g.default)(LocalDayParser, [{
            key: "parse",
            value: function parse(dateString, token, match, options) {
                var valueCallback = function valueCallback(value) {
                    var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
                    return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
                };
                switch (token) {
                    // 3
                    case 'e':
                    case 'ee':
                        // 03
                        return (0, _utils$g.mapValue)((0, _utils$g.parseNDigits)(token.length, dateString), valueCallback);
                    // 3rd
                    case 'eo':
                        return (0, _utils$g.mapValue)(match.ordinalNumber(dateString, {
                            unit: 'day'
                        }), valueCallback);
                    // Tue
                    case 'eee':
                        return match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // T
                    case 'eeeee':
                        return match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // Tu
                    case 'eeeeee':
                        return match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // Tuesday
                    case 'eeee':
                    default:
                        return match.day(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 6;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value, options) {
                date = (0, _index$2.default)(date, value, options);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return LocalDayParser;
}(_Parser2$g.Parser);
LocalDayParser$1.LocalDayParser = LocalDayParser;

var StandAloneLocalDayParser$1 = {};

var _interopRequireDefault$f = interopRequireDefaultExports.default;
Object.defineProperty(StandAloneLocalDayParser$1, "__esModule", {
    value: true
});
StandAloneLocalDayParser$1.StandAloneLocalDayParser = void 0;
var _classCallCheck2$f = _interopRequireDefault$f(classCallCheckExports);
var _createClass2$f = _interopRequireDefault$f(createClassExports);
var _assertThisInitialized2$f = _interopRequireDefault$f(assertThisInitializedExports);
var _inherits2$f = _interopRequireDefault$f(inheritsExports);
var _createSuper2$f = _interopRequireDefault$f(createSuperExports);
var _defineProperty2$f = _interopRequireDefault$f(definePropertyExports);
var _Parser2$f = Parser$1;
var _utils$f = utils;
var _index$1 = _interopRequireDefault$f(setUTCDayExports);
// Stand-alone local day of week
var StandAloneLocalDayParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$f.default)(StandAloneLocalDayParser, _Parser);
    var _super = (0, _createSuper2$f.default)(StandAloneLocalDayParser);
    function StandAloneLocalDayParser() {
        var _this;
        (0, _classCallCheck2$f.default)(this, StandAloneLocalDayParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$f.default)((0, _assertThisInitialized2$f.default)(_this), "priority", 90);
        (0, _defineProperty2$f.default)((0, _assertThisInitialized2$f.default)(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']);
        return _this;
    }
    (0, _createClass2$f.default)(StandAloneLocalDayParser, [{
            key: "parse",
            value: function parse(dateString, token, match, options) {
                var valueCallback = function valueCallback(value) {
                    var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
                    return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
                };
                switch (token) {
                    // 3
                    case 'c':
                    case 'cc':
                        // 03
                        return (0, _utils$f.mapValue)((0, _utils$f.parseNDigits)(token.length, dateString), valueCallback);
                    // 3rd
                    case 'co':
                        return (0, _utils$f.mapValue)(match.ordinalNumber(dateString, {
                            unit: 'day'
                        }), valueCallback);
                    // Tue
                    case 'ccc':
                        return match.day(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // T
                    case 'ccccc':
                        return match.day(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // Tu
                    case 'cccccc':
                        return match.day(dateString, {
                            width: 'short',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // Tuesday
                    case 'cccc':
                    default:
                        return match.day(dateString, {
                            width: 'wide',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 6;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value, options) {
                date = (0, _index$1.default)(date, value, options);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return StandAloneLocalDayParser;
}(_Parser2$f.Parser);
StandAloneLocalDayParser$1.StandAloneLocalDayParser = StandAloneLocalDayParser;

var ISODayParser$1 = {};

var setUTCISODay = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = setUTCISODay;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    var _index3 = _interopRequireDefault(toIntegerExports);
    function setUTCISODay(dirtyDate, dirtyDay) {
        (0, _index2.default)(2, arguments);
        var day = (0, _index3.default)(dirtyDay);
        if (day % 7 === 0) {
            day = day - 7;
        }
        var weekStartsOn = 1;
        var date = (0, _index.default)(dirtyDate);
        var currentDay = date.getUTCDay();
        var remainder = day % 7;
        var dayIndex = (remainder + 7) % 7;
        var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
        date.setUTCDate(date.getUTCDate() + diff);
        return date;
    }
    module.exports = exports.default;
}(setUTCISODay, setUTCISODay.exports));
var setUTCISODayExports = setUTCISODay.exports;

var _interopRequireDefault$e = interopRequireDefaultExports.default;
Object.defineProperty(ISODayParser$1, "__esModule", {
    value: true
});
ISODayParser$1.ISODayParser = void 0;
var _classCallCheck2$e = _interopRequireDefault$e(classCallCheckExports);
var _createClass2$e = _interopRequireDefault$e(createClassExports);
var _assertThisInitialized2$e = _interopRequireDefault$e(assertThisInitializedExports);
var _inherits2$e = _interopRequireDefault$e(inheritsExports);
var _createSuper2$e = _interopRequireDefault$e(createSuperExports);
var _defineProperty2$e = _interopRequireDefault$e(definePropertyExports);
var _Parser2$e = Parser$1;
var _utils$e = utils;
var _index = _interopRequireDefault$e(setUTCISODayExports);
// ISO day of week
var ISODayParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$e.default)(ISODayParser, _Parser);
    var _super = (0, _createSuper2$e.default)(ISODayParser);
    function ISODayParser() {
        var _this;
        (0, _classCallCheck2$e.default)(this, ISODayParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$e.default)((0, _assertThisInitialized2$e.default)(_this), "priority", 90);
        (0, _defineProperty2$e.default)((0, _assertThisInitialized2$e.default)(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']);
        return _this;
    }
    (0, _createClass2$e.default)(ISODayParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(value) {
                    if (value === 0) {
                        return 7;
                    }
                    return value;
                };
                switch (token) {
                    // 2
                    case 'i':
                    case 'ii':
                        // 02
                        return (0, _utils$e.parseNDigits)(token.length, dateString);
                    // 2nd
                    case 'io':
                        return match.ordinalNumber(dateString, {
                            unit: 'day'
                        });
                    // Tue
                    case 'iii':
                        return (0, _utils$e.mapValue)(match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        }), valueCallback);
                    // T
                    case 'iiiii':
                        return (0, _utils$e.mapValue)(match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        }), valueCallback);
                    // Tu
                    case 'iiiiii':
                        return (0, _utils$e.mapValue)(match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        }), valueCallback);
                    // Tuesday
                    case 'iiii':
                    default:
                        return (0, _utils$e.mapValue)(match.day(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        }), valueCallback);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 7;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date = (0, _index.default)(date, value);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return ISODayParser;
}(_Parser2$e.Parser);
ISODayParser$1.ISODayParser = ISODayParser;

var AMPMParser$1 = {};

var _interopRequireDefault$d = interopRequireDefaultExports.default;
Object.defineProperty(AMPMParser$1, "__esModule", {
    value: true
});
AMPMParser$1.AMPMParser = void 0;
var _classCallCheck2$d = _interopRequireDefault$d(classCallCheckExports);
var _createClass2$d = _interopRequireDefault$d(createClassExports);
var _assertThisInitialized2$d = _interopRequireDefault$d(assertThisInitializedExports);
var _inherits2$d = _interopRequireDefault$d(inheritsExports);
var _createSuper2$d = _interopRequireDefault$d(createSuperExports);
var _defineProperty2$d = _interopRequireDefault$d(definePropertyExports);
var _Parser2$d = Parser$1;
var _utils$d = utils;
var AMPMParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$d.default)(AMPMParser, _Parser);
    var _super = (0, _createSuper2$d.default)(AMPMParser);
    function AMPMParser() {
        var _this;
        (0, _classCallCheck2$d.default)(this, AMPMParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$d.default)((0, _assertThisInitialized2$d.default)(_this), "priority", 80);
        (0, _defineProperty2$d.default)((0, _assertThisInitialized2$d.default)(_this), "incompatibleTokens", ['b', 'B', 'H', 'k', 't', 'T']);
        return _this;
    }
    (0, _createClass2$d.default)(AMPMParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'a':
                    case 'aa':
                    case 'aaa':
                        return match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'aaaaa':
                        return match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'aaaa':
                    default:
                        return match.dayPeriod(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCHours((0, _utils$d.dayPeriodEnumToHours)(value), 0, 0, 0);
                return date;
            }
        }]);
    return AMPMParser;
}(_Parser2$d.Parser);
AMPMParser$1.AMPMParser = AMPMParser;

var AMPMMidnightParser$1 = {};

var _interopRequireDefault$c = interopRequireDefaultExports.default;
Object.defineProperty(AMPMMidnightParser$1, "__esModule", {
    value: true
});
AMPMMidnightParser$1.AMPMMidnightParser = void 0;
var _classCallCheck2$c = _interopRequireDefault$c(classCallCheckExports);
var _createClass2$c = _interopRequireDefault$c(createClassExports);
var _assertThisInitialized2$c = _interopRequireDefault$c(assertThisInitializedExports);
var _inherits2$c = _interopRequireDefault$c(inheritsExports);
var _createSuper2$c = _interopRequireDefault$c(createSuperExports);
var _defineProperty2$c = _interopRequireDefault$c(definePropertyExports);
var _Parser2$c = Parser$1;
var _utils$c = utils;
var AMPMMidnightParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$c.default)(AMPMMidnightParser, _Parser);
    var _super = (0, _createSuper2$c.default)(AMPMMidnightParser);
    function AMPMMidnightParser() {
        var _this;
        (0, _classCallCheck2$c.default)(this, AMPMMidnightParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$c.default)((0, _assertThisInitialized2$c.default)(_this), "priority", 80);
        (0, _defineProperty2$c.default)((0, _assertThisInitialized2$c.default)(_this), "incompatibleTokens", ['a', 'B', 'H', 'k', 't', 'T']);
        return _this;
    }
    (0, _createClass2$c.default)(AMPMMidnightParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'b':
                    case 'bb':
                    case 'bbb':
                        return match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'bbbbb':
                        return match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'bbbb':
                    default:
                        return match.dayPeriod(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCHours((0, _utils$c.dayPeriodEnumToHours)(value), 0, 0, 0);
                return date;
            }
        }]);
    return AMPMMidnightParser;
}(_Parser2$c.Parser);
AMPMMidnightParser$1.AMPMMidnightParser = AMPMMidnightParser;

var DayPeriodParser$1 = {};

var _interopRequireDefault$b = interopRequireDefaultExports.default;
Object.defineProperty(DayPeriodParser$1, "__esModule", {
    value: true
});
DayPeriodParser$1.DayPeriodParser = void 0;
var _classCallCheck2$b = _interopRequireDefault$b(classCallCheckExports);
var _createClass2$b = _interopRequireDefault$b(createClassExports);
var _assertThisInitialized2$b = _interopRequireDefault$b(assertThisInitializedExports);
var _inherits2$b = _interopRequireDefault$b(inheritsExports);
var _createSuper2$b = _interopRequireDefault$b(createSuperExports);
var _defineProperty2$b = _interopRequireDefault$b(definePropertyExports);
var _Parser2$b = Parser$1;
var _utils$b = utils;
// in the morning, in the afternoon, in the evening, at night
var DayPeriodParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$b.default)(DayPeriodParser, _Parser);
    var _super = (0, _createSuper2$b.default)(DayPeriodParser);
    function DayPeriodParser() {
        var _this;
        (0, _classCallCheck2$b.default)(this, DayPeriodParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$b.default)((0, _assertThisInitialized2$b.default)(_this), "priority", 80);
        (0, _defineProperty2$b.default)((0, _assertThisInitialized2$b.default)(_this), "incompatibleTokens", ['a', 'b', 't', 'T']);
        return _this;
    }
    (0, _createClass2$b.default)(DayPeriodParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'B':
                    case 'BB':
                    case 'BBB':
                        return match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'BBBBB':
                        return match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'BBBB':
                    default:
                        return match.dayPeriod(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCHours((0, _utils$b.dayPeriodEnumToHours)(value), 0, 0, 0);
                return date;
            }
        }]);
    return DayPeriodParser;
}(_Parser2$b.Parser);
DayPeriodParser$1.DayPeriodParser = DayPeriodParser;

var Hour1to12Parser$1 = {};

var _interopRequireDefault$a = interopRequireDefaultExports.default;
Object.defineProperty(Hour1to12Parser$1, "__esModule", {
    value: true
});
Hour1to12Parser$1.Hour1to12Parser = void 0;
var _classCallCheck2$a = _interopRequireDefault$a(classCallCheckExports);
var _createClass2$a = _interopRequireDefault$a(createClassExports);
var _assertThisInitialized2$a = _interopRequireDefault$a(assertThisInitializedExports);
var _inherits2$a = _interopRequireDefault$a(inheritsExports);
var _createSuper2$a = _interopRequireDefault$a(createSuperExports);
var _defineProperty2$a = _interopRequireDefault$a(definePropertyExports);
var _Parser2$a = Parser$1;
var _constants$7 = constants;
var _utils$a = utils;
var Hour1to12Parser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$a.default)(Hour1to12Parser, _Parser);
    var _super = (0, _createSuper2$a.default)(Hour1to12Parser);
    function Hour1to12Parser() {
        var _this;
        (0, _classCallCheck2$a.default)(this, Hour1to12Parser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$a.default)((0, _assertThisInitialized2$a.default)(_this), "priority", 70);
        (0, _defineProperty2$a.default)((0, _assertThisInitialized2$a.default)(_this), "incompatibleTokens", ['H', 'K', 'k', 't', 'T']);
        return _this;
    }
    (0, _createClass2$a.default)(Hour1to12Parser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'h':
                        return (0, _utils$a.parseNumericPattern)(_constants$7.numericPatterns.hour12h, dateString);
                    case 'ho':
                        return match.ordinalNumber(dateString, {
                            unit: 'hour'
                        });
                    default:
                        return (0, _utils$a.parseNDigits)(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 12;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                var isPM = date.getUTCHours() >= 12;
                if (isPM && value < 12) {
                    date.setUTCHours(value + 12, 0, 0, 0);
                }
                else if (!isPM && value === 12) {
                    date.setUTCHours(0, 0, 0, 0);
                }
                else {
                    date.setUTCHours(value, 0, 0, 0);
                }
                return date;
            }
        }]);
    return Hour1to12Parser;
}(_Parser2$a.Parser);
Hour1to12Parser$1.Hour1to12Parser = Hour1to12Parser;

var Hour0to23Parser$1 = {};

var _interopRequireDefault$9 = interopRequireDefaultExports.default;
Object.defineProperty(Hour0to23Parser$1, "__esModule", {
    value: true
});
Hour0to23Parser$1.Hour0to23Parser = void 0;
var _classCallCheck2$9 = _interopRequireDefault$9(classCallCheckExports);
var _createClass2$9 = _interopRequireDefault$9(createClassExports);
var _assertThisInitialized2$9 = _interopRequireDefault$9(assertThisInitializedExports);
var _inherits2$9 = _interopRequireDefault$9(inheritsExports);
var _createSuper2$9 = _interopRequireDefault$9(createSuperExports);
var _defineProperty2$9 = _interopRequireDefault$9(definePropertyExports);
var _Parser2$9 = Parser$1;
var _constants$6 = constants;
var _utils$9 = utils;
var Hour0to23Parser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$9.default)(Hour0to23Parser, _Parser);
    var _super = (0, _createSuper2$9.default)(Hour0to23Parser);
    function Hour0to23Parser() {
        var _this;
        (0, _classCallCheck2$9.default)(this, Hour0to23Parser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$9.default)((0, _assertThisInitialized2$9.default)(_this), "priority", 70);
        (0, _defineProperty2$9.default)((0, _assertThisInitialized2$9.default)(_this), "incompatibleTokens", ['a', 'b', 'h', 'K', 'k', 't', 'T']);
        return _this;
    }
    (0, _createClass2$9.default)(Hour0to23Parser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'H':
                        return (0, _utils$9.parseNumericPattern)(_constants$6.numericPatterns.hour23h, dateString);
                    case 'Ho':
                        return match.ordinalNumber(dateString, {
                            unit: 'hour'
                        });
                    default:
                        return (0, _utils$9.parseNDigits)(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 23;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCHours(value, 0, 0, 0);
                return date;
            }
        }]);
    return Hour0to23Parser;
}(_Parser2$9.Parser);
Hour0to23Parser$1.Hour0to23Parser = Hour0to23Parser;

var Hour0To11Parser$1 = {};

var _interopRequireDefault$8 = interopRequireDefaultExports.default;
Object.defineProperty(Hour0To11Parser$1, "__esModule", {
    value: true
});
Hour0To11Parser$1.Hour0To11Parser = void 0;
var _classCallCheck2$8 = _interopRequireDefault$8(classCallCheckExports);
var _createClass2$8 = _interopRequireDefault$8(createClassExports);
var _assertThisInitialized2$8 = _interopRequireDefault$8(assertThisInitializedExports);
var _inherits2$8 = _interopRequireDefault$8(inheritsExports);
var _createSuper2$8 = _interopRequireDefault$8(createSuperExports);
var _defineProperty2$8 = _interopRequireDefault$8(definePropertyExports);
var _Parser2$8 = Parser$1;
var _constants$5 = constants;
var _utils$8 = utils;
var Hour0To11Parser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$8.default)(Hour0To11Parser, _Parser);
    var _super = (0, _createSuper2$8.default)(Hour0To11Parser);
    function Hour0To11Parser() {
        var _this;
        (0, _classCallCheck2$8.default)(this, Hour0To11Parser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$8.default)((0, _assertThisInitialized2$8.default)(_this), "priority", 70);
        (0, _defineProperty2$8.default)((0, _assertThisInitialized2$8.default)(_this), "incompatibleTokens", ['h', 'H', 'k', 't', 'T']);
        return _this;
    }
    (0, _createClass2$8.default)(Hour0To11Parser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'K':
                        return (0, _utils$8.parseNumericPattern)(_constants$5.numericPatterns.hour11h, dateString);
                    case 'Ko':
                        return match.ordinalNumber(dateString, {
                            unit: 'hour'
                        });
                    default:
                        return (0, _utils$8.parseNDigits)(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 11;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                var isPM = date.getUTCHours() >= 12;
                if (isPM && value < 12) {
                    date.setUTCHours(value + 12, 0, 0, 0);
                }
                else {
                    date.setUTCHours(value, 0, 0, 0);
                }
                return date;
            }
        }]);
    return Hour0To11Parser;
}(_Parser2$8.Parser);
Hour0To11Parser$1.Hour0To11Parser = Hour0To11Parser;

var Hour1To24Parser$1 = {};

var _interopRequireDefault$7 = interopRequireDefaultExports.default;
Object.defineProperty(Hour1To24Parser$1, "__esModule", {
    value: true
});
Hour1To24Parser$1.Hour1To24Parser = void 0;
var _classCallCheck2$7 = _interopRequireDefault$7(classCallCheckExports);
var _createClass2$7 = _interopRequireDefault$7(createClassExports);
var _assertThisInitialized2$7 = _interopRequireDefault$7(assertThisInitializedExports);
var _inherits2$7 = _interopRequireDefault$7(inheritsExports);
var _createSuper2$7 = _interopRequireDefault$7(createSuperExports);
var _defineProperty2$7 = _interopRequireDefault$7(definePropertyExports);
var _Parser2$7 = Parser$1;
var _constants$4 = constants;
var _utils$7 = utils;
var Hour1To24Parser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$7.default)(Hour1To24Parser, _Parser);
    var _super = (0, _createSuper2$7.default)(Hour1To24Parser);
    function Hour1To24Parser() {
        var _this;
        (0, _classCallCheck2$7.default)(this, Hour1To24Parser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$7.default)((0, _assertThisInitialized2$7.default)(_this), "priority", 70);
        (0, _defineProperty2$7.default)((0, _assertThisInitialized2$7.default)(_this), "incompatibleTokens", ['a', 'b', 'h', 'H', 'K', 't', 'T']);
        return _this;
    }
    (0, _createClass2$7.default)(Hour1To24Parser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'k':
                        return (0, _utils$7.parseNumericPattern)(_constants$4.numericPatterns.hour24h, dateString);
                    case 'ko':
                        return match.ordinalNumber(dateString, {
                            unit: 'hour'
                        });
                    default:
                        return (0, _utils$7.parseNDigits)(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 24;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                var hours = value <= 24 ? value % 24 : value;
                date.setUTCHours(hours, 0, 0, 0);
                return date;
            }
        }]);
    return Hour1To24Parser;
}(_Parser2$7.Parser);
Hour1To24Parser$1.Hour1To24Parser = Hour1To24Parser;

var MinuteParser$1 = {};

var _interopRequireDefault$6 = interopRequireDefaultExports.default;
Object.defineProperty(MinuteParser$1, "__esModule", {
    value: true
});
MinuteParser$1.MinuteParser = void 0;
var _classCallCheck2$6 = _interopRequireDefault$6(classCallCheckExports);
var _createClass2$6 = _interopRequireDefault$6(createClassExports);
var _assertThisInitialized2$6 = _interopRequireDefault$6(assertThisInitializedExports);
var _inherits2$6 = _interopRequireDefault$6(inheritsExports);
var _createSuper2$6 = _interopRequireDefault$6(createSuperExports);
var _defineProperty2$6 = _interopRequireDefault$6(definePropertyExports);
var _Parser2$6 = Parser$1;
var _constants$3 = constants;
var _utils$6 = utils;
var MinuteParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$6.default)(MinuteParser, _Parser);
    var _super = (0, _createSuper2$6.default)(MinuteParser);
    function MinuteParser() {
        var _this;
        (0, _classCallCheck2$6.default)(this, MinuteParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$6.default)((0, _assertThisInitialized2$6.default)(_this), "priority", 60);
        (0, _defineProperty2$6.default)((0, _assertThisInitialized2$6.default)(_this), "incompatibleTokens", ['t', 'T']);
        return _this;
    }
    (0, _createClass2$6.default)(MinuteParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'm':
                        return (0, _utils$6.parseNumericPattern)(_constants$3.numericPatterns.minute, dateString);
                    case 'mo':
                        return match.ordinalNumber(dateString, {
                            unit: 'minute'
                        });
                    default:
                        return (0, _utils$6.parseNDigits)(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 59;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMinutes(value, 0, 0);
                return date;
            }
        }]);
    return MinuteParser;
}(_Parser2$6.Parser);
MinuteParser$1.MinuteParser = MinuteParser;

var SecondParser$1 = {};

var _interopRequireDefault$5 = interopRequireDefaultExports.default;
Object.defineProperty(SecondParser$1, "__esModule", {
    value: true
});
SecondParser$1.SecondParser = void 0;
var _classCallCheck2$5 = _interopRequireDefault$5(classCallCheckExports);
var _createClass2$5 = _interopRequireDefault$5(createClassExports);
var _assertThisInitialized2$5 = _interopRequireDefault$5(assertThisInitializedExports);
var _inherits2$5 = _interopRequireDefault$5(inheritsExports);
var _createSuper2$5 = _interopRequireDefault$5(createSuperExports);
var _defineProperty2$5 = _interopRequireDefault$5(definePropertyExports);
var _Parser2$5 = Parser$1;
var _constants$2 = constants;
var _utils$5 = utils;
var SecondParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$5.default)(SecondParser, _Parser);
    var _super = (0, _createSuper2$5.default)(SecondParser);
    function SecondParser() {
        var _this;
        (0, _classCallCheck2$5.default)(this, SecondParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$5.default)((0, _assertThisInitialized2$5.default)(_this), "priority", 50);
        (0, _defineProperty2$5.default)((0, _assertThisInitialized2$5.default)(_this), "incompatibleTokens", ['t', 'T']);
        return _this;
    }
    (0, _createClass2$5.default)(SecondParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 's':
                        return (0, _utils$5.parseNumericPattern)(_constants$2.numericPatterns.second, dateString);
                    case 'so':
                        return match.ordinalNumber(dateString, {
                            unit: 'second'
                        });
                    default:
                        return (0, _utils$5.parseNDigits)(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 59;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCSeconds(value, 0);
                return date;
            }
        }]);
    return SecondParser;
}(_Parser2$5.Parser);
SecondParser$1.SecondParser = SecondParser;

var FractionOfSecondParser$1 = {};

var _interopRequireDefault$4 = interopRequireDefaultExports.default;
Object.defineProperty(FractionOfSecondParser$1, "__esModule", {
    value: true
});
FractionOfSecondParser$1.FractionOfSecondParser = void 0;
var _classCallCheck2$4 = _interopRequireDefault$4(classCallCheckExports);
var _createClass2$4 = _interopRequireDefault$4(createClassExports);
var _assertThisInitialized2$4 = _interopRequireDefault$4(assertThisInitializedExports);
var _inherits2$4 = _interopRequireDefault$4(inheritsExports);
var _createSuper2$4 = _interopRequireDefault$4(createSuperExports);
var _defineProperty2$4 = _interopRequireDefault$4(definePropertyExports);
var _Parser2$4 = Parser$1;
var _utils$4 = utils;
var FractionOfSecondParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$4.default)(FractionOfSecondParser, _Parser);
    var _super = (0, _createSuper2$4.default)(FractionOfSecondParser);
    function FractionOfSecondParser() {
        var _this;
        (0, _classCallCheck2$4.default)(this, FractionOfSecondParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$4.default)((0, _assertThisInitialized2$4.default)(_this), "priority", 30);
        (0, _defineProperty2$4.default)((0, _assertThisInitialized2$4.default)(_this), "incompatibleTokens", ['t', 'T']);
        return _this;
    }
    (0, _createClass2$4.default)(FractionOfSecondParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                var valueCallback = function valueCallback(value) {
                    return Math.floor(value * Math.pow(10, -token.length + 3));
                };
                return (0, _utils$4.mapValue)((0, _utils$4.parseNDigits)(token.length, dateString), valueCallback);
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMilliseconds(value);
                return date;
            }
        }]);
    return FractionOfSecondParser;
}(_Parser2$4.Parser);
FractionOfSecondParser$1.FractionOfSecondParser = FractionOfSecondParser;

var ISOTimezoneWithZParser$1 = {};

var _interopRequireDefault$3 = interopRequireDefaultExports.default;
Object.defineProperty(ISOTimezoneWithZParser$1, "__esModule", {
    value: true
});
ISOTimezoneWithZParser$1.ISOTimezoneWithZParser = void 0;
var _classCallCheck2$3 = _interopRequireDefault$3(classCallCheckExports);
var _createClass2$3 = _interopRequireDefault$3(createClassExports);
var _assertThisInitialized2$3 = _interopRequireDefault$3(assertThisInitializedExports);
var _inherits2$3 = _interopRequireDefault$3(inheritsExports);
var _createSuper2$3 = _interopRequireDefault$3(createSuperExports);
var _defineProperty2$3 = _interopRequireDefault$3(definePropertyExports);
var _Parser2$3 = Parser$1;
var _constants$1 = constants;
var _utils$3 = utils;
// Timezone (ISO-8601. +00:00 is `'Z'`)
var ISOTimezoneWithZParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$3.default)(ISOTimezoneWithZParser, _Parser);
    var _super = (0, _createSuper2$3.default)(ISOTimezoneWithZParser);
    function ISOTimezoneWithZParser() {
        var _this;
        (0, _classCallCheck2$3.default)(this, ISOTimezoneWithZParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$3.default)((0, _assertThisInitialized2$3.default)(_this), "priority", 10);
        (0, _defineProperty2$3.default)((0, _assertThisInitialized2$3.default)(_this), "incompatibleTokens", ['t', 'T', 'x']);
        return _this;
    }
    (0, _createClass2$3.default)(ISOTimezoneWithZParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                switch (token) {
                    case 'X':
                        return (0, _utils$3.parseTimezonePattern)(_constants$1.timezonePatterns.basicOptionalMinutes, dateString);
                    case 'XX':
                        return (0, _utils$3.parseTimezonePattern)(_constants$1.timezonePatterns.basic, dateString);
                    case 'XXXX':
                        return (0, _utils$3.parseTimezonePattern)(_constants$1.timezonePatterns.basicOptionalSeconds, dateString);
                    case 'XXXXX':
                        return (0, _utils$3.parseTimezonePattern)(_constants$1.timezonePatterns.extendedOptionalSeconds, dateString);
                    case 'XXX':
                    default:
                        return (0, _utils$3.parseTimezonePattern)(_constants$1.timezonePatterns.extended, dateString);
                }
            }
        }, {
            key: "set",
            value: function set(date, flags, value) {
                if (flags.timestampIsSet) {
                    return date;
                }
                return new Date(date.getTime() - value);
            }
        }]);
    return ISOTimezoneWithZParser;
}(_Parser2$3.Parser);
ISOTimezoneWithZParser$1.ISOTimezoneWithZParser = ISOTimezoneWithZParser;

var ISOTimezoneParser$1 = {};

var _interopRequireDefault$2 = interopRequireDefaultExports.default;
Object.defineProperty(ISOTimezoneParser$1, "__esModule", {
    value: true
});
ISOTimezoneParser$1.ISOTimezoneParser = void 0;
var _classCallCheck2$2 = _interopRequireDefault$2(classCallCheckExports);
var _createClass2$2 = _interopRequireDefault$2(createClassExports);
var _assertThisInitialized2$2 = _interopRequireDefault$2(assertThisInitializedExports);
var _inherits2$2 = _interopRequireDefault$2(inheritsExports);
var _createSuper2$2 = _interopRequireDefault$2(createSuperExports);
var _defineProperty2$2 = _interopRequireDefault$2(definePropertyExports);
var _Parser2$2 = Parser$1;
var _constants = constants;
var _utils$2 = utils;
// Timezone (ISO-8601)
var ISOTimezoneParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$2.default)(ISOTimezoneParser, _Parser);
    var _super = (0, _createSuper2$2.default)(ISOTimezoneParser);
    function ISOTimezoneParser() {
        var _this;
        (0, _classCallCheck2$2.default)(this, ISOTimezoneParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$2.default)((0, _assertThisInitialized2$2.default)(_this), "priority", 10);
        (0, _defineProperty2$2.default)((0, _assertThisInitialized2$2.default)(_this), "incompatibleTokens", ['t', 'T', 'X']);
        return _this;
    }
    (0, _createClass2$2.default)(ISOTimezoneParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                switch (token) {
                    case 'x':
                        return (0, _utils$2.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalMinutes, dateString);
                    case 'xx':
                        return (0, _utils$2.parseTimezonePattern)(_constants.timezonePatterns.basic, dateString);
                    case 'xxxx':
                        return (0, _utils$2.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalSeconds, dateString);
                    case 'xxxxx':
                        return (0, _utils$2.parseTimezonePattern)(_constants.timezonePatterns.extendedOptionalSeconds, dateString);
                    case 'xxx':
                    default:
                        return (0, _utils$2.parseTimezonePattern)(_constants.timezonePatterns.extended, dateString);
                }
            }
        }, {
            key: "set",
            value: function set(date, flags, value) {
                if (flags.timestampIsSet) {
                    return date;
                }
                return new Date(date.getTime() - value);
            }
        }]);
    return ISOTimezoneParser;
}(_Parser2$2.Parser);
ISOTimezoneParser$1.ISOTimezoneParser = ISOTimezoneParser;

var TimestampSecondsParser$1 = {};

var _interopRequireDefault$1 = interopRequireDefaultExports.default;
Object.defineProperty(TimestampSecondsParser$1, "__esModule", {
    value: true
});
TimestampSecondsParser$1.TimestampSecondsParser = void 0;
var _classCallCheck2$1 = _interopRequireDefault$1(classCallCheckExports);
var _createClass2$1 = _interopRequireDefault$1(createClassExports);
var _assertThisInitialized2$1 = _interopRequireDefault$1(assertThisInitializedExports);
var _inherits2$1 = _interopRequireDefault$1(inheritsExports);
var _createSuper2$1 = _interopRequireDefault$1(createSuperExports);
var _defineProperty2$1 = _interopRequireDefault$1(definePropertyExports);
var _Parser2$1 = Parser$1;
var _utils$1 = utils;
var TimestampSecondsParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2$1.default)(TimestampSecondsParser, _Parser);
    var _super = (0, _createSuper2$1.default)(TimestampSecondsParser);
    function TimestampSecondsParser() {
        var _this;
        (0, _classCallCheck2$1.default)(this, TimestampSecondsParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$1.default)((0, _assertThisInitialized2$1.default)(_this), "priority", 40);
        (0, _defineProperty2$1.default)((0, _assertThisInitialized2$1.default)(_this), "incompatibleTokens", '*');
        return _this;
    }
    (0, _createClass2$1.default)(TimestampSecondsParser, [{
            key: "parse",
            value: function parse(dateString) {
                return (0, _utils$1.parseAnyDigitsSigned)(dateString);
            }
        }, {
            key: "set",
            value: function set(_date, _flags, value) {
                return [new Date(value * 1000), {
                        timestampIsSet: true
                    }];
            }
        }]);
    return TimestampSecondsParser;
}(_Parser2$1.Parser);
TimestampSecondsParser$1.TimestampSecondsParser = TimestampSecondsParser;

var TimestampMillisecondsParser$1 = {};

var _interopRequireDefault = interopRequireDefaultExports.default;
Object.defineProperty(TimestampMillisecondsParser$1, "__esModule", {
    value: true
});
TimestampMillisecondsParser$1.TimestampMillisecondsParser = void 0;
var _classCallCheck2 = _interopRequireDefault(classCallCheckExports);
var _createClass2 = _interopRequireDefault(createClassExports);
var _assertThisInitialized2 = _interopRequireDefault(assertThisInitializedExports);
var _inherits2 = _interopRequireDefault(inheritsExports);
var _createSuper2 = _interopRequireDefault(createSuperExports);
var _defineProperty2 = _interopRequireDefault(definePropertyExports);
var _Parser2 = Parser$1;
var _utils = utils;
var TimestampMillisecondsParser = /*#__PURE__*/ function (_Parser) {
    (0, _inherits2.default)(TimestampMillisecondsParser, _Parser);
    var _super = (0, _createSuper2.default)(TimestampMillisecondsParser);
    function TimestampMillisecondsParser() {
        var _this;
        (0, _classCallCheck2.default)(this, TimestampMillisecondsParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 20);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", '*');
        return _this;
    }
    (0, _createClass2.default)(TimestampMillisecondsParser, [{
            key: "parse",
            value: function parse(dateString) {
                return (0, _utils.parseAnyDigitsSigned)(dateString);
            }
        }, {
            key: "set",
            value: function set(_date, _flags, value) {
                return [new Date(value), {
                        timestampIsSet: true
                    }];
            }
        }]);
    return TimestampMillisecondsParser;
}(_Parser2.Parser);
TimestampMillisecondsParser$1.TimestampMillisecondsParser = TimestampMillisecondsParser;

Object.defineProperty(parsers$1, "__esModule", {
    value: true
});
parsers$1.parsers = void 0;
var _EraParser = EraParser$1;
var _YearParser = YearParser$1;
var _LocalWeekYearParser = LocalWeekYearParser$1;
var _ISOWeekYearParser = ISOWeekYearParser$1;
var _ExtendedYearParser = ExtendedYearParser$1;
var _QuarterParser = QuarterParser$1;
var _StandAloneQuarterParser = StandAloneQuarterParser$1;
var _MonthParser = MonthParser$1;
var _StandAloneMonthParser = StandAloneMonthParser$1;
var _LocalWeekParser = LocalWeekParser$1;
var _ISOWeekParser = ISOWeekParser$1;
var _DateParser = DateParser$1;
var _DayOfYearParser = DayOfYearParser$1;
var _DayParser = DayParser$1;
var _LocalDayParser = LocalDayParser$1;
var _StandAloneLocalDayParser = StandAloneLocalDayParser$1;
var _ISODayParser = ISODayParser$1;
var _AMPMParser = AMPMParser$1;
var _AMPMMidnightParser = AMPMMidnightParser$1;
var _DayPeriodParser = DayPeriodParser$1;
var _Hour1to12Parser = Hour1to12Parser$1;
var _Hour0to23Parser = Hour0to23Parser$1;
var _Hour0To11Parser = Hour0To11Parser$1;
var _Hour1To24Parser = Hour1To24Parser$1;
var _MinuteParser = MinuteParser$1;
var _SecondParser = SecondParser$1;
var _FractionOfSecondParser = FractionOfSecondParser$1;
var _ISOTimezoneWithZParser = ISOTimezoneWithZParser$1;
var _ISOTimezoneParser = ISOTimezoneParser$1;
var _TimestampSecondsParser = TimestampSecondsParser$1;
var _TimestampMillisecondsParser = TimestampMillisecondsParser$1;
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */
var parsers = {
    G: new _EraParser.EraParser(),
    y: new _YearParser.YearParser(),
    Y: new _LocalWeekYearParser.LocalWeekYearParser(),
    R: new _ISOWeekYearParser.ISOWeekYearParser(),
    u: new _ExtendedYearParser.ExtendedYearParser(),
    Q: new _QuarterParser.QuarterParser(),
    q: new _StandAloneQuarterParser.StandAloneQuarterParser(),
    M: new _MonthParser.MonthParser(),
    L: new _StandAloneMonthParser.StandAloneMonthParser(),
    w: new _LocalWeekParser.LocalWeekParser(),
    I: new _ISOWeekParser.ISOWeekParser(),
    d: new _DateParser.DateParser(),
    D: new _DayOfYearParser.DayOfYearParser(),
    E: new _DayParser.DayParser(),
    e: new _LocalDayParser.LocalDayParser(),
    c: new _StandAloneLocalDayParser.StandAloneLocalDayParser(),
    i: new _ISODayParser.ISODayParser(),
    a: new _AMPMParser.AMPMParser(),
    b: new _AMPMMidnightParser.AMPMMidnightParser(),
    B: new _DayPeriodParser.DayPeriodParser(),
    h: new _Hour1to12Parser.Hour1to12Parser(),
    H: new _Hour0to23Parser.Hour0to23Parser(),
    K: new _Hour0To11Parser.Hour0To11Parser(),
    k: new _Hour1To24Parser.Hour1To24Parser(),
    m: new _MinuteParser.MinuteParser(),
    s: new _SecondParser.SecondParser(),
    S: new _FractionOfSecondParser.FractionOfSecondParser(),
    X: new _ISOTimezoneWithZParser.ISOTimezoneWithZParser(),
    x: new _ISOTimezoneParser.ISOTimezoneParser(),
    t: new _TimestampSecondsParser.TimestampSecondsParser(),
    T: new _TimestampMillisecondsParser.TimestampMillisecondsParser()
};
parsers$1.parsers = parsers;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = parse;
    var _typeof2 = _interopRequireDefault(_typeofExports);
    var _createForOfIteratorHelper2 = _interopRequireDefault(createForOfIteratorHelperExports);
    var _index = _interopRequireDefault(defaultLocaleExports);
    var _index2 = _interopRequireDefault(subMillisecondsExports);
    var _index3 = _interopRequireDefault(toDateExports);
    var _index4 = _interopRequireDefault(assignExports);
    var _index5 = _interopRequireDefault(longFormattersExports);
    var _index6 = _interopRequireDefault(getTimezoneOffsetInMillisecondsExports);
    var _index7 = protectedTokens;
    var _index8 = _interopRequireDefault(toIntegerExports);
    var _index9 = _interopRequireDefault(requiredArgsExports);
    var _Setter = Setter$1;
    var _index10 = parsers$1;
    var _index11 = defaultOptions$2;
    // This RegExp consists of three parts separated by `|`:
    // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
    //   (one of the certain letters followed by `o`)
    // - (\w)\1* matches any sequences of the same letter
    // - '' matches two quote characters in a row
    // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
    //   except a single quote symbol, which ends the sequence.
    //   Two quote characters do not end the sequence.
    //   If there is no matching single quote
    //   then the sequence will continue until the end of the string.
    // - . matches any single character unmatched by previous parts of the RegExps
    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
    // This RegExp catches symbols escaped by quotes, and also
    // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var notWhitespaceRegExp = /\S/;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    /**
     * @name parse
     * @category Common Helpers
     * @summary Parse the date.
     *
     * @description
     * Return the date parsed from string using the given format string.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * The characters in the format string wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     *
     * Format of the format string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 5 below the table).
     *
     * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
     * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
     *
     * ```javascript
     * parse('23 AM', 'HH a', new Date())
     * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
     * ```
     *
     * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
     *
     * Accepted format string patterns:
     * | Unit                            |Prior| Pattern | Result examples                   | Notes |
     * |---------------------------------|-----|---------|-----------------------------------|-------|
     * | Era                             | 140 | G..GGG  | AD, BC                            |       |
     * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 |     | GGGGG   | A, B                              |       |
     * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
     * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
     * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
     * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
     * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
     * |                                 |     | yyyyy   | ...                               | 2,4   |
     * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
     * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
     * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
     * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
     * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
     * |                                 |     | YYYYY   | ...                               | 2,4   |
     * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
     * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
     * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
     * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
     * |                                 |     | RRRRR   | ...                               | 2,4,5 |
     * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
     * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
     * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
     * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
     * |                                 |     | uuuuu   | ...                               | 2,4   |
     * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
     * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
     * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
     * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
     * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
     * |                                 |     | qq      | 01, 02, 03, 04                    |       |
     * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
     * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
     * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
     * |                                 |     | MM      | 01, 02, ..., 12                   |       |
     * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 |     | MMMM    | January, February, ..., December  | 2     |
     * |                                 |     | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
     * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
     * |                                 |     | LL      | 01, 02, ..., 12                   |       |
     * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 |     | LLLL    | January, February, ..., December  | 2     |
     * |                                 |     | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
     * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
     * |                                 |     | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
     * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
     * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
     * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
     * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
     * |                                 |     | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
     * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
     * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
     * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 |     | DDDD    | ...                               | 2     |
     * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
     * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
     * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
     * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
     * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
     * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
     * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
     * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
     * |                                 |     | ee      | 02, 03, ..., 01                   |       |
     * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
     * |                                 |     | cc      | 02, 03, ..., 01                   |       |
     * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
     * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
     * |                                 |     | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
     * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 |     | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
     * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
     * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
     * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
     * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
     * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
     * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
     * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
     * |                                 |     | mm      | 00, 01, ..., 59                   |       |
     * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
     * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
     * |                                 |     | ss      | 00, 01, ..., 59                   |       |
     * | Seconds timestamp               |  40 | t       | 512969520                         |       |
     * |                                 |     | tt      | ...                               | 2     |
     * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
     * |                                 |     | SS      | 00, 01, ..., 99                   |       |
     * |                                 |     | SSS     | 000, 001, ..., 999                |       |
     * |                                 |     | SSSS    | ...                               | 2     |
     * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
     * |                                 |     | TT      | ...                               | 2     |
     * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
     * |                                 |     | XX      | -0800, +0530, Z                   |       |
     * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
     * |                                 |     | xx      | -0800, +0530, +0000               |       |
     * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
     * |                                 |     | PP      | May 29, 1453                      |       |
     * |                                 |     | PPP     | May 29th, 1453                    |       |
     * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
     * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
     * |                                 |     | pp      | 12:00:00 AM                       |       |
     * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
     * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
     * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
     * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular.
     *    In `format` function, they will produce different result:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     *    `parse` will try to match both formatting and stand-alone units interchangably.
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table:
     *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
     *      as wide as the sequence
     *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
     *      These variations are marked with "2" in the last column of the table.
     *
     * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 4. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
     *
     *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
     *
     *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
     *
     *    while `uu` will just assign the year as is:
     *
     *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
     *
     *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
     *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
     *
     * 5. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
     *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
     *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
     *    on the given locale.
     *
     *    using `en-US` locale: `P` => `MM/dd/yyyy`
     *    using `en-US` locale: `p` => `hh:mm a`
     *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
     *    using `pt-BR` locale: `p` => `HH:mm`
     *
     * Values will be assigned to the date in the descending order of its unit's priority.
     * Units of an equal priority overwrite each other in the order of appearance.
     *
     * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
     * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
     *
     * `referenceDate` must be passed for correct work of the function.
     * If you're not sure which `referenceDate` to supply, create a new instance of Date:
     * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
     * In this case parsing will be done in the context of the current date.
     * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
     * then `Invalid Date` will be returned.
     *
     * The result may vary by locale.
     *
     * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
     *
     * If parsing failed, `Invalid Date` will be returned.
     * Invalid Date is a Date, whose time value is NaN.
     * Time value of Date: http://es5.github.io/#x15.9.1.1
     *
     * @param {String} dateString - the string to parse
     * @param {String} formatString - the string of tokens
     * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
     * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @returns {Date} the parsed date
     * @throws {TypeError} 3 arguments required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} `options.locale` must contain `match` property
     * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} format string contains an unescaped latin alphabet character
     *
     * @example
     * // Parse 11 February 2014 from middle-endian format:
     * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
     * //=> Tue Feb 11 2014 00:00:00
     *
     * @example
     * // Parse 28th of February in Esperanto locale in the context of 2010 year:
     * import eo from 'date-fns/locale/eo'
     * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
     *   locale: eo
     * })
     * //=> Sun Feb 28 2010 00:00:00
     */
    function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
        var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
        (0, _index9.default)(3, arguments);
        var dateString = String(dirtyDateString);
        var formatString = String(dirtyFormatString);
        var defaultOptions = (0, _index11.getDefaultOptions)();
        var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _index.default;
        if (!locale.match) {
            throw new RangeError('locale must contain match property');
        }
        var firstWeekContainsDate = (0, _index8.default)((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
        // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
        if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
            throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
        }
        var weekStartsOn = (0, _index8.default)((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
        // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
            throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
        }
        if (formatString === '') {
            if (dateString === '') {
                return (0, _index3.default)(dirtyReferenceDate);
            }
            else {
                return new Date(NaN);
            }
        }
        var subFnOptions = {
            firstWeekContainsDate: firstWeekContainsDate,
            weekStartsOn: weekStartsOn,
            locale: locale
        };
        // If timezone isn't specified, it will be set to the system timezone
        var setters = [new _Setter.DateToSystemTimezoneSetter()];
        var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {
            var firstCharacter = substring[0];
            if (firstCharacter in _index5.default) {
                var longFormatter = _index5.default[firstCharacter];
                return longFormatter(substring, locale.formatLong);
            }
            return substring;
        }).join('').match(formattingTokensRegExp);
        var usedTokens = [];
        var _iterator = (0, _createForOfIteratorHelper2.default)(tokens), _step;
        try {
            var _loop = function _loop() {
                var token = _step.value;
                if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && (0, _index7.isProtectedWeekYearToken)(token)) {
                    (0, _index7.throwProtectedError)(token, formatString, dirtyDateString);
                }
                if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && (0, _index7.isProtectedDayOfYearToken)(token)) {
                    (0, _index7.throwProtectedError)(token, formatString, dirtyDateString);
                }
                var firstCharacter = token[0];
                var parser = _index10.parsers[firstCharacter];
                if (parser) {
                    var incompatibleTokens = parser.incompatibleTokens;
                    if (Array.isArray(incompatibleTokens)) {
                        var incompatibleToken = usedTokens.find(function (usedToken) {
                            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
                        });
                        if (incompatibleToken) {
                            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
                        }
                    }
                    else if (parser.incompatibleTokens === '*' && usedTokens.length > 0) {
                        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
                    }
                    usedTokens.push({
                        token: firstCharacter,
                        fullToken: token
                    });
                    var parseResult = parser.run(dateString, token, locale.match, subFnOptions);
                    if (!parseResult) {
                        return {
                            v: new Date(NaN)
                        };
                    }
                    setters.push(parseResult.setter);
                    dateString = parseResult.rest;
                }
                else {
                    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
                        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
                    }
                    // Replace two single quote characters with one single quote character
                    if (token === "''") {
                        token = "'";
                    }
                    else if (firstCharacter === "'") {
                        token = cleanEscapedString(token);
                    }
                    // Cut token from string, or, if string doesn't match the token, return Invalid Date
                    if (dateString.indexOf(token) === 0) {
                        dateString = dateString.slice(token.length);
                    }
                    else {
                        return {
                            v: new Date(NaN)
                        };
                    }
                }
            };
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var _ret = _loop();
                if ((0, _typeof2.default)(_ret) === "object")
                    return _ret.v;
            }
            // Check if the remaining input contains something other than whitespace
        }
        catch (err) {
            _iterator.e(err);
        }
        finally {
            _iterator.f();
        }
        if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
            return new Date(NaN);
        }
        var uniquePrioritySetters = setters.map(function (setter) {
            return setter.priority;
        }).sort(function (a, b) {
            return b - a;
        }).filter(function (priority, index, array) {
            return array.indexOf(priority) === index;
        }).map(function (priority) {
            return setters.filter(function (setter) {
                return setter.priority === priority;
            }).sort(function (a, b) {
                return b.subPriority - a.subPriority;
            });
        }).map(function (setterArray) {
            return setterArray[0];
        });
        var date = (0, _index3.default)(dirtyReferenceDate);
        if (isNaN(date.getTime())) {
            return new Date(NaN);
        }
        // Convert the date in system timezone to the same date in UTC+00:00 timezone.
        var utcDate = (0, _index2.default)(date, (0, _index6.default)(date));
        var flags = {};
        var _iterator2 = (0, _createForOfIteratorHelper2.default)(uniquePrioritySetters), _step2;
        try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var setter = _step2.value;
                if (!setter.validate(utcDate, subFnOptions)) {
                    return new Date(NaN);
                }
                var result = setter.set(utcDate, flags, subFnOptions);
                // Result is tuple (date, flags)
                if (Array.isArray(result)) {
                    utcDate = result[0];
                    (0, _index4.default)(flags, result[1]);
                    // Result is date
                }
                else {
                    utcDate = result;
                }
            }
        }
        catch (err) {
            _iterator2.e(err);
        }
        finally {
            _iterator2.f();
        }
        return utcDate;
    }
    function cleanEscapedString(input) {
        return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
    }
    module.exports = exports.default;
}(parse$1, parse$1.exports));
var parseExports = parse$1.exports;
var parse = /*@__PURE__*/ getDefaultExportFromCjs(parseExports);

var parseISO$1 = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = parseISO;
    var _index = constants$1;
    var _index2 = _interopRequireDefault(requiredArgsExports);
    var _index3 = _interopRequireDefault(toIntegerExports);
    /**
     * @name parseISO
     * @category Common Helpers
     * @summary Parse ISO string
     *
     * @description
     * Parse the given string in ISO 8601 format and return an instance of Date.
     *
     * Function accepts complete ISO 8601 formats as well as partial implementations.
     * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
     *
     * If the argument isn't a string, the function cannot parse the string or
     * the values are invalid, it returns Invalid Date.
     *
     * @param {String} argument - the value to convert
     * @param {Object} [options] - an object with options.
     * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
     *
     * @example
     * // Convert string '2014-02-11T11:30:30' to date:
     * const result = parseISO('2014-02-11T11:30:30')
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert string '+02014101' to date,
     * // if the additional number of digits in the extended year format is 1:
     * const result = parseISO('+02014101', { additionalDigits: 1 })
     * //=> Fri Apr 11 2014 00:00:00
     */
    function parseISO(argument, options) {
        var _options$additionalDi;
        (0, _index2.default)(1, arguments);
        var additionalDigits = (0, _index3.default)((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
        if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
            throw new RangeError('additionalDigits must be 0, 1 or 2');
        }
        if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {
            return new Date(NaN);
        }
        var dateStrings = splitDateString(argument);
        var date;
        if (dateStrings.date) {
            var parseYearResult = parseYear(dateStrings.date, additionalDigits);
            date = parseDate(parseYearResult.restDateString, parseYearResult.year);
        }
        if (!date || isNaN(date.getTime())) {
            return new Date(NaN);
        }
        var timestamp = date.getTime();
        var time = 0;
        var offset;
        if (dateStrings.time) {
            time = parseTime(dateStrings.time);
            if (isNaN(time)) {
                return new Date(NaN);
            }
        }
        if (dateStrings.timezone) {
            offset = parseTimezone(dateStrings.timezone);
            if (isNaN(offset)) {
                return new Date(NaN);
            }
        }
        else {
            var dirtyDate = new Date(timestamp + time);
            // js parsed string assuming it's in UTC timezone
            // but we need it to be parsed in our timezone
            // so we use utc values to build date in our timezone.
            // Year values from 0 to 99 map to the years 1900 to 1999
            // so set year explicitly with setFullYear.
            var result = new Date(0);
            result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
            result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
            return result;
        }
        return new Date(timestamp + time + offset);
    }
    var patterns = {
        dateTimeDelimiter: /[T ]/,
        timeZoneDelimiter: /[Z ]/i,
        timezone: /([Z+-].*)$/
    };
    var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
    var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
    var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
    function splitDateString(dateString) {
        var dateStrings = {};
        var array = dateString.split(patterns.dateTimeDelimiter);
        var timeString;
        // The regex match should only return at maximum two array elements.
        // [date], [time], or [date, time].
        if (array.length > 2) {
            return dateStrings;
        }
        if (/:/.test(array[0])) {
            timeString = array[0];
        }
        else {
            dateStrings.date = array[0];
            timeString = array[1];
            if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
                dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
                timeString = dateString.substr(dateStrings.date.length, dateString.length);
            }
        }
        if (timeString) {
            var token = patterns.timezone.exec(timeString);
            if (token) {
                dateStrings.time = timeString.replace(token[1], '');
                dateStrings.timezone = token[1];
            }
            else {
                dateStrings.time = timeString;
            }
        }
        return dateStrings;
    }
    function parseYear(dateString, additionalDigits) {
        var regex = new RegExp('^(?:(\\d{4}|[+-]\\d{' + (4 + additionalDigits) + '})|(\\d{2}|[+-]\\d{' + (2 + additionalDigits) + '})$)');
        var captures = dateString.match(regex);
        // Invalid ISO-formatted year
        if (!captures)
            return {
                year: NaN,
                restDateString: ''
            };
        var year = captures[1] ? parseInt(captures[1]) : null;
        var century = captures[2] ? parseInt(captures[2]) : null;
        // either year or century is null, not both
        return {
            year: century === null ? year : century * 100,
            restDateString: dateString.slice((captures[1] || captures[2]).length)
        };
    }
    function parseDate(dateString, year) {
        // Invalid ISO-formatted year
        if (year === null)
            return new Date(NaN);
        var captures = dateString.match(dateRegex);
        // Invalid ISO-formatted string
        if (!captures)
            return new Date(NaN);
        var isWeekDate = !!captures[4];
        var dayOfYear = parseDateUnit(captures[1]);
        var month = parseDateUnit(captures[2]) - 1;
        var day = parseDateUnit(captures[3]);
        var week = parseDateUnit(captures[4]);
        var dayOfWeek = parseDateUnit(captures[5]) - 1;
        if (isWeekDate) {
            if (!validateWeekDate(year, week, dayOfWeek)) {
                return new Date(NaN);
            }
            return dayOfISOWeekYear(year, week, dayOfWeek);
        }
        else {
            var date = new Date(0);
            if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
                return new Date(NaN);
            }
            date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
            return date;
        }
    }
    function parseDateUnit(value) {
        return value ? parseInt(value) : 1;
    }
    function parseTime(timeString) {
        var captures = timeString.match(timeRegex);
        if (!captures)
            return NaN; // Invalid ISO-formatted time
        var hours = parseTimeUnit(captures[1]);
        var minutes = parseTimeUnit(captures[2]);
        var seconds = parseTimeUnit(captures[3]);
        if (!validateTime(hours, minutes, seconds)) {
            return NaN;
        }
        return hours * _index.millisecondsInHour + minutes * _index.millisecondsInMinute + seconds * 1000;
    }
    function parseTimeUnit(value) {
        return value && parseFloat(value.replace(',', '.')) || 0;
    }
    function parseTimezone(timezoneString) {
        if (timezoneString === 'Z')
            return 0;
        var captures = timezoneString.match(timezoneRegex);
        if (!captures)
            return 0;
        var sign = captures[1] === '+' ? -1 : 1;
        var hours = parseInt(captures[2]);
        var minutes = captures[3] && parseInt(captures[3]) || 0;
        if (!validateTimezone(hours, minutes)) {
            return NaN;
        }
        return sign * (hours * _index.millisecondsInHour + minutes * _index.millisecondsInMinute);
    }
    function dayOfISOWeekYear(isoWeekYear, week, day) {
        var date = new Date(0);
        date.setUTCFullYear(isoWeekYear, 0, 4);
        var fourthOfJanuaryDay = date.getUTCDay() || 7;
        var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
        date.setUTCDate(date.getUTCDate() + diff);
        return date;
    }
    // Validation functions
    // February is null to handle the leap year (using ||)
    var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    function isLeapYearIndex(year) {
        return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }
    function validateDate(year, month, date) {
        return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
    }
    function validateDayOfYearDate(year, dayOfYear) {
        return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
    }
    function validateWeekDate(_year, week, day) {
        return week >= 1 && week <= 53 && day >= 0 && day <= 6;
    }
    function validateTime(hours, minutes, seconds) {
        if (hours === 24) {
            return minutes === 0 && seconds === 0;
        }
        return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
    }
    function validateTimezone(_hours, minutes) {
        return minutes >= 0 && minutes <= 59;
    }
    module.exports = exports.default;
}(parseISO$1, parseISO$1.exports));
var parseISOExports = parseISO$1.exports;
var parseISO = /*@__PURE__*/ getDefaultExportFromCjs(parseISOExports);

var fi$1 = {exports: {}};

var formatDistance = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    function futureSeconds(text) {
        return text.replace(/sekuntia?/, 'sekunnin');
    }
    function futureMinutes(text) {
        return text.replace(/minuuttia?/, 'minuutin');
    }
    function futureHours(text) {
        return text.replace(/tuntia?/, 'tunnin');
    }
    function futureDays(text) {
        return text.replace(/päivää?/, 'päivän');
    }
    function futureWeeks(text) {
        return text.replace(/(viikko|viikkoa)/, 'viikon');
    }
    function futureMonths(text) {
        return text.replace(/(kuukausi|kuukautta)/, 'kuukauden');
    }
    function futureYears(text) {
        return text.replace(/(vuosi|vuotta)/, 'vuoden');
    }
    var formatDistanceLocale = {
        lessThanXSeconds: {
            one: 'alle sekunti',
            other: 'alle {{count}} sekuntia',
            futureTense: futureSeconds
        },
        xSeconds: {
            one: 'sekunti',
            other: '{{count}} sekuntia',
            futureTense: futureSeconds
        },
        halfAMinute: {
            one: 'puoli minuuttia',
            other: 'puoli minuuttia',
            futureTense: function futureTense(_text) {
                return 'puolen minuutin';
            }
        },
        lessThanXMinutes: {
            one: 'alle minuutti',
            other: 'alle {{count}} minuuttia',
            futureTense: futureMinutes
        },
        xMinutes: {
            one: 'minuutti',
            other: '{{count}} minuuttia',
            futureTense: futureMinutes
        },
        aboutXHours: {
            one: 'noin tunti',
            other: 'noin {{count}} tuntia',
            futureTense: futureHours
        },
        xHours: {
            one: 'tunti',
            other: '{{count}} tuntia',
            futureTense: futureHours
        },
        xDays: {
            one: 'päivä',
            other: '{{count}} päivää',
            futureTense: futureDays
        },
        aboutXWeeks: {
            one: 'noin viikko',
            other: 'noin {{count}} viikkoa',
            futureTense: futureWeeks
        },
        xWeeks: {
            one: 'viikko',
            other: '{{count}} viikkoa',
            futureTense: futureWeeks
        },
        aboutXMonths: {
            one: 'noin kuukausi',
            other: 'noin {{count}} kuukautta',
            futureTense: futureMonths
        },
        xMonths: {
            one: 'kuukausi',
            other: '{{count}} kuukautta',
            futureTense: futureMonths
        },
        aboutXYears: {
            one: 'noin vuosi',
            other: 'noin {{count}} vuotta',
            futureTense: futureYears
        },
        xYears: {
            one: 'vuosi',
            other: '{{count}} vuotta',
            futureTense: futureYears
        },
        overXYears: {
            one: 'yli vuosi',
            other: 'yli {{count}} vuotta',
            futureTense: futureYears
        },
        almostXYears: {
            one: 'lähes vuosi',
            other: 'lähes {{count}} vuotta',
            futureTense: futureYears
        }
    };
    var formatDistance = function formatDistance(token, count, options) {
        var tokenValue = formatDistanceLocale[token];
        var result = count === 1 ? tokenValue.one : tokenValue.other.replace('{{count}}', String(count));
        if (options !== null && options !== void 0 && options.addSuffix) {
            if (options.comparison && options.comparison > 0) {
                return tokenValue.futureTense(result) + ' kuluttua';
            }
            else {
                return result + ' sitten';
            }
        }
        return result;
    };
    var _default = formatDistance;
    exports.default = _default;
    module.exports = exports.default;
}(formatDistance, formatDistance.exports));
var formatDistanceExports = formatDistance.exports;

var formatLong = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var _index = _interopRequireDefault(buildFormatLongFnExports);
    var dateFormats = {
        full: 'eeee d. MMMM y',
        long: 'd. MMMM y',
        medium: 'd. MMM y',
        short: 'd.M.y'
    };
    var timeFormats = {
        full: 'HH.mm.ss zzzz',
        long: 'HH.mm.ss z',
        medium: 'HH.mm.ss',
        short: 'HH.mm'
    };
    var dateTimeFormats = {
        full: "{{date}} 'klo' {{time}}",
        long: "{{date}} 'klo' {{time}}",
        medium: '{{date}} {{time}}',
        short: '{{date}} {{time}}'
    };
    var formatLong = {
        date: (0, _index.default)({
            formats: dateFormats,
            defaultWidth: 'full'
        }),
        time: (0, _index.default)({
            formats: timeFormats,
            defaultWidth: 'full'
        }),
        dateTime: (0, _index.default)({
            formats: dateTimeFormats,
            defaultWidth: 'full'
        })
    };
    var _default = formatLong;
    exports.default = _default;
    module.exports = exports.default;
}(formatLong, formatLong.exports));
var formatLongExports = formatLong.exports;

var formatRelative = {exports: {}};

(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var formatRelativeLocale = {
        lastWeek: "'viime' eeee 'klo' p",
        yesterday: "'eilen klo' p",
        today: "'tänään klo' p",
        tomorrow: "'huomenna klo' p",
        nextWeek: "'ensi' eeee 'klo' p",
        other: 'P'
    };
    var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
        return formatRelativeLocale[token];
    };
    var _default = formatRelative;
    exports.default = _default;
    module.exports = exports.default;
}(formatRelative, formatRelative.exports));
var formatRelativeExports = formatRelative.exports;

var localize = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var _index = _interopRequireDefault(buildLocalizeFnExports);
    var eraValues = {
        narrow: ['eaa.', 'jaa.'],
        abbreviated: ['eaa.', 'jaa.'],
        wide: ['ennen ajanlaskun alkua', 'jälkeen ajanlaskun alun']
    };
    var quarterValues = {
        narrow: ['1', '2', '3', '4'],
        abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
        wide: ['1. kvartaali', '2. kvartaali', '3. kvartaali', '4. kvartaali']
    };
    var monthValues = {
        narrow: ['T', 'H', 'M', 'H', 'T', 'K', 'H', 'E', 'S', 'L', 'M', 'J'],
        abbreviated: ['tammi', 'helmi', 'maalis', 'huhti', 'touko', 'kesä', 'heinä', 'elo', 'syys', 'loka', 'marras', 'joulu'],
        wide: ['tammikuu', 'helmikuu', 'maaliskuu', 'huhtikuu', 'toukokuu', 'kesäkuu', 'heinäkuu', 'elokuu', 'syyskuu', 'lokakuu', 'marraskuu', 'joulukuu']
    };
    var formattingMonthValues = {
        narrow: monthValues.narrow,
        abbreviated: monthValues.abbreviated,
        wide: ['tammikuuta', 'helmikuuta', 'maaliskuuta', 'huhtikuuta', 'toukokuuta', 'kesäkuuta', 'heinäkuuta', 'elokuuta', 'syyskuuta', 'lokakuuta', 'marraskuuta', 'joulukuuta']
    };
    var dayValues = {
        narrow: ['S', 'M', 'T', 'K', 'T', 'P', 'L'],
        short: ['su', 'ma', 'ti', 'ke', 'to', 'pe', 'la'],
        abbreviated: ['sunn.', 'maan.', 'tiis.', 'kesk.', 'torst.', 'perj.', 'la'],
        wide: ['sunnuntai', 'maanantai', 'tiistai', 'keskiviikko', 'torstai', 'perjantai', 'lauantai']
    };
    var formattingDayValues = {
        narrow: dayValues.narrow,
        short: dayValues.short,
        abbreviated: dayValues.abbreviated,
        wide: ['sunnuntaina', 'maanantaina', 'tiistaina', 'keskiviikkona', 'torstaina', 'perjantaina', 'lauantaina']
    };
    var dayPeriodValues = {
        narrow: {
            am: 'ap',
            pm: 'ip',
            midnight: 'keskiyö',
            noon: 'keskipäivä',
            morning: 'ap',
            afternoon: 'ip',
            evening: 'illalla',
            night: 'yöllä'
        },
        abbreviated: {
            am: 'ap',
            pm: 'ip',
            midnight: 'keskiyö',
            noon: 'keskipäivä',
            morning: 'ap',
            afternoon: 'ip',
            evening: 'illalla',
            night: 'yöllä'
        },
        wide: {
            am: 'ap',
            pm: 'ip',
            midnight: 'keskiyöllä',
            noon: 'keskipäivällä',
            morning: 'aamupäivällä',
            afternoon: 'iltapäivällä',
            evening: 'illalla',
            night: 'yöllä'
        }
    };
    var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
        var number = Number(dirtyNumber);
        return number + '.';
    };
    var localize = {
        ordinalNumber: ordinalNumber,
        era: (0, _index.default)({
            values: eraValues,
            defaultWidth: 'wide'
        }),
        quarter: (0, _index.default)({
            values: quarterValues,
            defaultWidth: 'wide',
            argumentCallback: function argumentCallback(quarter) {
                return quarter - 1;
            }
        }),
        month: (0, _index.default)({
            values: monthValues,
            defaultWidth: 'wide',
            formattingValues: formattingMonthValues,
            defaultFormattingWidth: 'wide'
        }),
        day: (0, _index.default)({
            values: dayValues,
            defaultWidth: 'wide',
            formattingValues: formattingDayValues,
            defaultFormattingWidth: 'wide'
        }),
        dayPeriod: (0, _index.default)({
            values: dayPeriodValues,
            defaultWidth: 'wide'
        })
    };
    var _default = localize;
    exports.default = _default;
    module.exports = exports.default;
}(localize, localize.exports));
var localizeExports = localize.exports;

var match = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var _index = _interopRequireDefault(buildMatchFnExports);
    var _index2 = _interopRequireDefault(buildMatchPatternFnExports);
    var matchOrdinalNumberPattern = /^(\d+)(\.)/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
        narrow: /^(e|j)/i,
        abbreviated: /^(eaa.|jaa.)/i,
        wide: /^(ennen ajanlaskun alkua|jälkeen ajanlaskun alun)/i
    };
    var parseEraPatterns = {
        any: [/^e/i, /^j/i]
    };
    var matchQuarterPatterns = {
        narrow: /^[1234]/i,
        abbreviated: /^q[1234]/i,
        wide: /^[1234]\.? kvartaali/i
    };
    var parseQuarterPatterns = {
        any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
        narrow: /^[thmkeslj]/i,
        abbreviated: /^(tammi|helmi|maalis|huhti|touko|kesä|heinä|elo|syys|loka|marras|joulu)/i,
        wide: /^(tammikuu|helmikuu|maaliskuu|huhtikuu|toukokuu|kesäkuu|heinäkuu|elokuu|syyskuu|lokakuu|marraskuu|joulukuu)(ta)?/i
    };
    var parseMonthPatterns = {
        narrow: [/^t/i, /^h/i, /^m/i, /^h/i, /^t/i, /^k/i, /^h/i, /^e/i, /^s/i, /^l/i, /^m/i, /^j/i],
        any: [/^ta/i, /^hel/i, /^maa/i, /^hu/i, /^to/i, /^k/i, /^hei/i, /^e/i, /^s/i, /^l/i, /^mar/i, /^j/i]
    };
    var matchDayPatterns = {
        narrow: /^[smtkpl]/i,
        short: /^(su|ma|ti|ke|to|pe|la)/i,
        abbreviated: /^(sunn.|maan.|tiis.|kesk.|torst.|perj.|la)/i,
        wide: /^(sunnuntai|maanantai|tiistai|keskiviikko|torstai|perjantai|lauantai)(na)?/i
    };
    var parseDayPatterns = {
        narrow: [/^s/i, /^m/i, /^t/i, /^k/i, /^t/i, /^p/i, /^l/i],
        any: [/^s/i, /^m/i, /^ti/i, /^k/i, /^to/i, /^p/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
        narrow: /^(ap|ip|keskiyö|keskipäivä|aamupäivällä|iltapäivällä|illalla|yöllä)/i,
        any: /^(ap|ip|keskiyöllä|keskipäivällä|aamupäivällä|iltapäivällä|illalla|yöllä)/i
    };
    var parseDayPeriodPatterns = {
        any: {
            am: /^ap/i,
            pm: /^ip/i,
            midnight: /^keskiyö/i,
            noon: /^keskipäivä/i,
            morning: /aamupäivällä/i,
            afternoon: /iltapäivällä/i,
            evening: /illalla/i,
            night: /yöllä/i
        }
    };
    var match = {
        ordinalNumber: (0, _index2.default)({
            matchPattern: matchOrdinalNumberPattern,
            parsePattern: parseOrdinalNumberPattern,
            valueCallback: function valueCallback(value) {
                return parseInt(value, 10);
            }
        }),
        era: (0, _index.default)({
            matchPatterns: matchEraPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseEraPatterns,
            defaultParseWidth: 'any'
        }),
        quarter: (0, _index.default)({
            matchPatterns: matchQuarterPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseQuarterPatterns,
            defaultParseWidth: 'any',
            valueCallback: function valueCallback(index) {
                return index + 1;
            }
        }),
        month: (0, _index.default)({
            matchPatterns: matchMonthPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseMonthPatterns,
            defaultParseWidth: 'any'
        }),
        day: (0, _index.default)({
            matchPatterns: matchDayPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseDayPatterns,
            defaultParseWidth: 'any'
        }),
        dayPeriod: (0, _index.default)({
            matchPatterns: matchDayPeriodPatterns,
            defaultMatchWidth: 'any',
            parsePatterns: parseDayPeriodPatterns,
            defaultParseWidth: 'any'
        })
    };
    var _default = match;
    exports.default = _default;
    module.exports = exports.default;
}(match, match.exports));
var matchExports = match.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var _index = _interopRequireDefault(formatDistanceExports);
    var _index2 = _interopRequireDefault(formatLongExports);
    var _index3 = _interopRequireDefault(formatRelativeExports);
    var _index4 = _interopRequireDefault(localizeExports);
    var _index5 = _interopRequireDefault(matchExports);
    /**
     * @type {Locale}
     * @category Locales
     * @summary Finnish locale.
     * @language Finnish
     * @iso-639-2 fin
     * @author Pyry-Samuli Lahti [@Pyppe]{@link https://github.com/Pyppe}
     * @author Edo Rivai [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
     * @author Samu Juvonen [@sjuvonen]{@link https://github.com/sjuvonen}
     */
    var locale = {
        code: 'fi',
        formatDistance: _index.default,
        formatLong: _index2.default,
        formatRelative: _index3.default,
        localize: _index4.default,
        match: _index5.default,
        options: {
            weekStartsOn: 1 /* Monday */,
            firstWeekContainsDate: 4
        }
    };
    var _default = locale;
    exports.default = _default;
    module.exports = exports.default;
}(fi$1, fi$1.exports));
var fiExports = fi$1.exports;
var fi = /*@__PURE__*/ getDefaultExportFromCjs(fiExports);

/* eslint-disable max-lines */
const isISOValue$2 = (dateString) => /^(\d{4})-(\d{2})-(\d{2})$/.test(dateString);
const isEightDigits$1 = (dateString) => /^(\d{8})$/.test(dateString);
function getFormattedDate(dateString, displayFormat) {
    const stringValue = formatStringValue$1(dateString);
    const isValidFormat = isValidDateFormat$1(stringValue);
    const dateValue = isValidFormat ? parse(stringValue, "dd.MM.yyyy", new Date()) : undefined;
    const dateDisplayValue = isValidFormat ? format$1(dateValue, displayFormat) : undefined;
    const dateReturnValue = isValidFormat ? format$1(dateValue, "yyyy-MM-dd") : undefined;
    return {
        dateValue,
        dateDisplayValue,
        dateReturnValue,
        isValidFormat,
    };
}
function formatStringValue$1(dateString) {
    if (isEightDigits$1(dateString)) {
        return `${dateString.substring(0, 2)}.${dateString.substring(2, 4)}.${dateString.substring(4, dateString.length)}`;
    }
    if (isISOValue$2(dateString)) {
        return `${dateString.substring(8, dateString.length)}.${dateString.substring(5, 7)}.${dateString.substring(0, 4)}`;
    }
    return dateString;
}
function isValidDateFormat$1(dateValue) {
    const isFormattedWithDots = dateValue.indexOf(".") > -1;
    const yearValue = dateValue.substring(dateValue.lastIndexOf(".") + 1);
    const yearValueNotValid = isFormattedWithDots && yearValue.length !== 4;
    if (yearValueNotValid) {
        return false;
    }
    return isValidDate(parse(dateValue, "dd.MM.yyyy", new Date()));
}
function isInDateRange$1(date, rangeStartDate, rangeEndDate) {
    if (!rangeStartDate)
        return true;
    if (!rangeEndDate)
        return !isBefore(date, rangeStartDate);
    return !isBefore(date, rangeStartDate) && !isAfter(date, rangeEndDate);
}
const getLocalization = (localization) => {
    return Object.assign({ ariaLabelWeekNumber: "Viikkonumero", labelMonthDropdown: () => "Kuukausi", labelYearDropdown: () => "Vuosi", labelNext: () => "Siirry seuraavaan kuukauteen", labelPrevious: () => "Siirry edelliseen kuukauteen", labelToggleCalendar: "Valitse päivämäärä", labelCloseCalendar: "Sulje kalenteri", labelSelected: "valittu", labelGoToCurrentDay: "Siirry kuluvaan päivään", locale: fi }, localization);
};
function convertValuesToDate$1({ calendarDefaultMonth, selectedDateValue, defaultValue, defaultRangeValue, disabledDates, fromDate, toDate, selectedRangeValue, }) {
    const convertValueToDate = (value) => {
        if (!value)
            return undefined;
        if (isValidDate(value))
            return value;
        try {
            const parsedValue = parseISO(value);
            if (!isValidDate(parsedValue)) {
                throw new Error(`Unable to convert following value to a date object: ${value}`);
            }
            return parsedValue;
        }
        catch (err) {
            console.error(err);
        }
    };
    const handleDisabledItemsByType = (item) => {
        if (isValidDate(item))
            return item;
        if (typeof item === "string")
            return convertValueToDate(item);
        const valueArray = Object.entries(item).map(([key, value]) => {
            if (isDayOfWeekType({ [key]: value }))
                return { [key]: value };
            return { [key]: convertValueToDate(value) };
        });
        return Object.assign({}, ...valueArray);
    };
    const convertDisabledDates = (values) => {
        return Array.isArray(values) ? values.map(handleDisabledItemsByType) : [handleDisabledItemsByType(values)];
    };
    return {
        calendarDefaultMonth: convertValueToDate(calendarDefaultMonth),
        selectedDateValue: selectedDateValue && convertValueToDate(selectedDateValue),
        defaultValue: convertValueToDate(defaultValue),
        defaultRangeValue: defaultRangeValue && {
            from: convertValueToDate(defaultRangeValue.from),
            to: defaultRangeValue.to && convertValueToDate(defaultRangeValue.to),
        },
        disabledDates: disabledDates && convertDisabledDates(disabledDates),
        fromDate: convertValueToDate(fromDate),
        toDate: convertValueToDate(toDate),
        selectedRangeValue: selectedRangeValue && {
            from: convertValueToDate(selectedRangeValue.from),
            to: selectedRangeValue.to && convertValueToDate(selectedRangeValue.to),
        },
    };
}
function getValidityInRelationToOtherValue(from, to) {
    const { dateValue: fromDate, dateDisplayValue: fromDateString } = getFormattedDate(from, "dd.MM.yyyy");
    const { dateValue: toDate, dateDisplayValue: toDateString } = getFormattedDate(to, "dd.MM.yyyy");
    if (fromDate && toDate && fromDateString !== toDateString) {
        return isBefore(fromDate, toDate);
    }
    return true;
}
function isAllowedRangeValue$1(range, fromDate, toDate) {
    if (range.to && isBefore(range.to, range.from))
        return false;
    if (!isInDateRange$1(range.from, fromDate, toDate) || (range.to && !isInDateRange$1(range.to, fromDate, toDate))) {
        return false;
    }
    return true;
}
function handleDateRangePickerErrorText(errorData) {
    const { errorType, fromIsInvalid, toIsInvalid } = errorData;
    const messageStart = fromIsInvalid ? "Alkamispäivä virheellinen" : toIsInvalid && "Päättymispäivä virheellinen";
    switch (errorType) {
        case DateRangePickerErrorType.invalidFormat:
            return `${messageStart}. Ilmoita päivämäärä muodossa pp.kk.vvvv.`;
        case DateRangePickerErrorType.notInRange:
            return `${messageStart}. Tarkista että päivämäärä on sallitulta väliltä.`;
        case DateRangePickerErrorType.invalidRelation:
            return `${messageStart}. Tarkista että alkamispäivä edeltää päättymispäivää.`;
        case DateRangePickerErrorType.invalidRange:
            return `Virheellinen päivämääräväli, tarkista annetut päivämäärät.`;
        default:
            return `${messageStart}, tarkista päivämäärä.`;
    }
}
function handleDatePickerErrorText(errorType) {
    switch (errorType) {
        case DatePickerErrorType.invalidFormat:
            return "Virheellinen päivämäärä. Ilmoita päivämäärä muodossa pp.kk.vvvv.";
        case DatePickerErrorType.dateDisabled:
            return "Valittu päivämäärä ei ole sallittu. Valitse toinen päivämäärä.";
        case DatePickerErrorType.notInRange:
            return "Virheellinen päivämäärä. Tarkista että päivä on sallitulta väliltä.";
        default:
            return "Tarkista päivämäärä.";
    }
}
function getDateDisplayFormat$1(showLeadingZeros) {
    return showLeadingZeros ? "dd.MM.yyyy" : "d.M.yyyy";
}
const dateReturnFormat$1 = "yyyy-MM-dd";
const inputPattern$1 = "[0-9.\\-]+";
const isDateOrString = (obj) => {
    if (obj instanceof Date) {
        return format$1(obj, "yyyy-MM-dd");
    }
    else if (typeof obj === "string") {
        // Check if the string can be parsed as a valid date
        if (!isNaN(Date.parse(obj)))
            return obj;
    }
    else {
        return undefined;
    }
};

/**
 * Custom Day component for restoring the accessibility as it was in 8.4.1 version.
 * Copy from: {@link https://github.com/gpbl/react-day-picker/blob/v8.9.1/src/components/Day/Day.tsx 8.9.1}
 */
const CalendarDay = ({ date, displayMonth }) => {
    const { locale } = useDayPicker();
    const buttonRef = React.useRef(null);
    const dayRender = useDayRender(date, displayMonth, buttonRef);
    const ariaLabel = format$1(date, "do MMMM (EEEE)", { locale });
    if (dayRender.isHidden) {
        return React.createElement("div", null);
    }
    if (!dayRender.isButton) {
        return React.createElement("div", Object.assign({}, dayRender.divProps));
    }
    const buttonProps = Object.assign(Object.assign({}, dayRender.buttonProps), { role: undefined, "aria-label": ariaLabel, "aria-pressed": dayRender.buttonProps["aria-selected"] });
    delete buttonProps["aria-selected"];
    return React.createElement(Button, Object.assign({ name: "day", ref: buttonRef }, buttonProps));
};

var endOfMonth$1 = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = endOfMonth;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    /**
     * @name endOfMonth
     * @category Month Helpers
     * @summary Return the end of a month for the given date.
     *
     * @description
     * Return the end of a month for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of a month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of a month for 2 September 2014 11:55:00:
     * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Sep 30 2014 23:59:59.999
     */
    function endOfMonth(dirtyDate) {
        (0, _index2.default)(1, arguments);
        var date = (0, _index.default)(dirtyDate);
        var month = date.getMonth();
        date.setFullYear(date.getFullYear(), month + 1, 0);
        date.setHours(23, 59, 59, 999);
        return date;
    }
    module.exports = exports.default;
}(endOfMonth$1, endOfMonth$1.exports));
var endOfMonthExports = endOfMonth$1.exports;
var endOfMonth = /*@__PURE__*/ getDefaultExportFromCjs(endOfMonthExports);

function CalendarNavigation$1({ showDropdowns, captionId, }) {
    const { classNames, disabled, fromDate, labels: { labelPrevious, labelNext }, locale, onMonthChange, styles, toDate, } = useDayPicker();
    const { previousMonth, nextMonth, goToMonth, currentMonth: currentDisplayMonth } = useNavigation();
    const showNavDropdowns = showDropdowns && !!fromDate && !!toDate;
    const disabledDates = Array.isArray(disabled) ? disabled : [disabled];
    const disabledBefore = disabledDates.find((obj) => isDateBeforeType(obj));
    const disabledAfter = disabledDates.find((obj) => isDateAfterType(obj));
    const shouldDisablePrevious = !previousMonth || (disabledBefore && isBefore(endOfMonth(previousMonth), disabledBefore.before));
    const shouldDisableNext = !nextMonth || (disabledAfter && isAfter(nextMonth, disabledAfter.after));
    const previousLabel = labelPrevious(previousMonth, { locale });
    const nextLabel = labelNext(nextMonth, { locale });
    const previousClassName = [classNames.nav_button, classNames.nav_button_previous].join(" ");
    const nextClassName = [classNames.nav_button, classNames.nav_button_next].join(" ");
    const handleMonthChange = (month) => {
        goToMonth(month);
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(month);
    };
    return (React.createElement("div", { className: classNames.caption, style: styles.caption },
        showNavDropdowns ? (React.createElement(CaptionDropdowns, { displayMonth: currentDisplayMonth, id: captionId })) : (React.createElement(CaptionLabel, { displayMonth: currentDisplayMonth })),
        React.createElement("div", { className: classNames.nav, style: styles.nav },
            React.createElement(Button, { "aria-disabled": shouldDisablePrevious, "aria-label": previousLabel, className: previousClassName, disabled: shouldDisablePrevious, onClick: () => handleMonthChange(previousMonth) },
                React.createElement(IconLeft, { className: clsx("kds-date-picker-v2__nav-icon", classNames.nav_icon), style: styles.nav_icon })),
            React.createElement(Button, { "aria-disabled": shouldDisableNext, "aria-label": nextLabel, className: nextClassName, disabled: shouldDisableNext, onClick: () => handleMonthChange(nextMonth) },
                React.createElement(IconRight, { className: clsx("kds-date-picker-v2__nav-icon", classNames.nav_icon), style: styles.nav_icon })))));
}

function CalendarGoToCurrentDayButton({ label }) {
    const { onMonthChange } = useDayPicker();
    const { goToMonth } = useNavigation();
    const { focus } = useFocusContext();
    const currentDate = new Date();
    return (React.createElement(Button$1, { onClick: () => {
            goToMonth(currentDate);
            onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(currentDate);
            focus(currentDate);
        }, small: true, className: "kds-ml-1 kds-mt-3", appearance: "ghost" }, label));
}

var getUnixTime$1 = {exports: {}};

var getTime = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = getTime;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    /**
     * @name getTime
     * @category Timestamp Helpers
     * @summary Get the milliseconds timestamp of the given date.
     *
     * @description
     * Get the milliseconds timestamp of the given date.
     *
     * @param {Date|Number} date - the given date
     * @returns {Number} the timestamp
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Get the timestamp of 29 February 2012 11:45:05.123:
     * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))
     * //=> 1330515905123
     */
    function getTime(dirtyDate) {
        (0, _index2.default)(1, arguments);
        var date = (0, _index.default)(dirtyDate);
        var timestamp = date.getTime();
        return timestamp;
    }
    module.exports = exports.default;
}(getTime, getTime.exports));
var getTimeExports = getTime.exports;

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = getUnixTime;
    var _index = _interopRequireDefault(getTimeExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    /**
     * @name getUnixTime
     * @category Timestamp Helpers
     * @summary Get the seconds timestamp of the given date.
     *
     * @description
     * Get the seconds timestamp of the given date.
     *
     * @param {Date|Number} date - the given date
     * @returns {Number} the timestamp
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Get the timestamp of 29 February 2012 11:45:05 CET:
     * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))
     * //=> 1330512305
     */
    function getUnixTime(dirtyDate) {
        (0, _index2.default)(1, arguments);
        return Math.floor((0, _index.default)(dirtyDate) / 1000);
    }
    module.exports = exports.default;
}(getUnixTime$1, getUnixTime$1.exports));
var getUnixTimeExports = getUnixTime$1.exports;
var getUnixTime = /*@__PURE__*/ getDefaultExportFromCjs(getUnixTimeExports);

/**
 * Custom Row component for restoring the accessibility as it was in 8.4.1 version.
 * Copy from: {@link https://github.com/gpbl/react-day-picker/blob/v8.9.1/src/components/Row/Row.tsx 8.9.1}
 */
function CalendarRow(props) {
    var _a, _b;
    const { styles, classNames, showWeekNumber, components } = useDayPicker();
    const DayComponent = (_a = components === null || components === void 0 ? void 0 : components.Day) !== null && _a !== void 0 ? _a : Day;
    const WeeknumberComponent = (_b = components === null || components === void 0 ? void 0 : components.WeekNumber) !== null && _b !== void 0 ? _b : WeekNumber;
    let weekNumberCell;
    if (showWeekNumber) {
        weekNumberCell = (React.createElement("td", { className: classNames.cell, style: styles.cell },
            React.createElement(WeeknumberComponent, { number: props.weekNumber, dates: props.dates })));
    }
    return (React.createElement("tr", { className: classNames.row, style: styles.row },
        weekNumberCell,
        props.dates.map((date) => (React.createElement("td", { className: classNames.cell, style: styles.cell, key: getUnixTime(date) },
            React.createElement(DayComponent, { displayMonth: props.displayMonth, date: date }))))));
}

const DatePickerInput$1 = React.forwardRef(function DatePickerInput({ calendarDefaultMonth, defaultValue, descriptionIds, disabled, disabledDates, fixedCalendarHeight, fromDate, id, inputRef, invalid, localization, onBlur, onChange, onErrorStateChange, placeholder, required, showDropdownNavigation = true, showLeadingZeros, showWeekNumbers, shouldSetMaxWidth, size = "md", toDate, inputTestId, }, ref) {
    const inputElementRef = React.useRef(null);
    const calendarContainerRef = React.useRef();
    const dateDisplayFormat = getDateDisplayFormat$1(showLeadingZeros);
    const defaultDateValue = defaultValue && isInDateRange$1(defaultValue, fromDate, toDate) && defaultValue;
    const [isOpen, setIsOpen] = React.useState(false);
    const [isInvalidDate, setIsInvalidDate] = React.useState(false);
    const [inputValue, setInputValue] = React.useState(defaultDateValue ? format$1(defaultDateValue, dateDisplayFormat) : "");
    const [returnValue, setReturnValue] = React.useState(defaultDateValue ? format$1(defaultDateValue, dateReturnFormat$1) : "");
    const [selectedValue, setSelectedValue] = React.useState(defaultDateValue);
    const defaultMonth = calendarDefaultMonth || selectedValue || undefined;
    const _a = getLocalization(localization), { ariaLabelWeekNumber, labelCloseCalendar, labelToggleCalendar, labelSelected, labelGoToCurrentDay, locale } = _a, labels = __rest$1(_a, ["ariaLabelWeekNumber", "labelCloseCalendar", "labelToggleCalendar", "labelSelected", "labelGoToCurrentDay", "locale"]);
    const selectionDescription = selectedValue && inputValue ? `, ${labelSelected} ${inputValue}` : "";
    const calendarButtonAriaLabel = `${labelToggleCalendar}${selectionDescription}`;
    const { x, y, refs, strategy, context } = useFloating({
        open: isOpen,
        onOpenChange: setIsOpen,
        whileElementsMounted: autoUpdate,
        middleware: [offset(10), flip(), shift({ padding: 8 })],
    });
    function handleErrorType(isValidFormat, isDisabledDate, isInAllowedRange) {
        if (!isValidFormat) {
            return DatePickerErrorType.invalidFormat;
        }
        else if (isDisabledDate) {
            return DatePickerErrorType.dateDisabled;
        }
        else if (!isInAllowedRange) {
            return DatePickerErrorType.notInRange;
        }
        return DatePickerErrorType.defaultError;
    }
    const updateInvalidState = React.useCallback((isInvalid, errorType, inputValue, callOnError = true) => {
        setIsInvalidDate(isInvalid);
        onErrorStateChange(isInvalid, errorType, inputValue, callOnError);
    }, [onErrorStateChange]);
    const handleCalendarDateSelect = React.useCallback((value) => {
        if (isInvalidDate)
            updateInvalidState(false, undefined, undefined);
        const onSelectReturnValue = value ? format$1(value, dateReturnFormat$1) : undefined;
        setReturnValue(onSelectReturnValue);
        onChange && onChange(onSelectReturnValue);
        if (!value) {
            setInputValue("");
            return setSelectedValue(undefined);
        }
        if (disabledDates && isMatch(value, disabledDates))
            return;
        if ((fromDate && isBefore(value, fromDate)) || (toDate && isAfter(value, toDate)))
            return;
        if (isInvalidDate)
            setIsInvalidDate(false);
        setSelectedValue(value);
        setInputValue(format$1(value, dateDisplayFormat));
        setIsOpen(false);
    }, [dateDisplayFormat, disabledDates, fromDate, isInvalidDate, onChange, updateInvalidState, toDate]);
    function handleValue(value) {
        const { dateValue, dateDisplayValue, dateReturnValue, isValidFormat } = getFormattedDate(value, dateDisplayFormat);
        const newReturnValue = dateReturnValue;
        const newInputValue = dateDisplayValue || value;
        const valueHasNotChanged = newReturnValue === returnValue;
        setReturnValue(newReturnValue);
        setInputValue(newInputValue);
        const isInAllowedRange = dateValue && isInDateRange$1(dateValue, fromDate, toDate);
        const isDisabledDate = dateValue && disabledDates && isMatch(dateValue, disabledDates);
        const isInvalidValue = value && (!isValidFormat || !isInAllowedRange || isDisabledDate);
        setSelectedValue(isInvalidValue ? undefined : dateValue);
        if (isInvalidValue) {
            const newErrorType = handleErrorType(isValidFormat, isDisabledDate, isInAllowedRange);
            updateInvalidState(true, newErrorType, value);
        }
        // Do not return same value again
        if (valueHasNotChanged) {
            return;
        }
        onChange && onChange(isInvalidValue ? undefined : newReturnValue);
        if (!newReturnValue) {
            return setSelectedValue(undefined);
        }
    }
    React.useEffect(() => {
        if (invalid) {
            updateInvalidState(true, DatePickerErrorType.defaultError, undefined, false);
        }
        else {
            updateInvalidState(false, undefined, undefined, false);
        }
    }, [invalid, updateInvalidState]);
    React.useImperativeHandle(ref, () => ({
        reset: () => {
            if (isInvalidDate)
                updateInvalidState(false, undefined, undefined);
            setInputValue("");
            setReturnValue(undefined);
            setSelectedValue(undefined);
            onChange && onChange(undefined);
        },
        setValue: (value) => {
            if (isInvalidDate)
                updateInvalidState(false, undefined, undefined);
            const { dateValue, isValidFormat } = getFormattedDate(value, dateDisplayFormat);
            isValidFormat && handleCalendarDateSelect(dateValue);
        },
    }), [dateDisplayFormat, handleCalendarDateSelect, isInvalidDate, onChange, updateInvalidState]);
    function handleInputRef(element) {
        inputElementRef.current = element;
        if (typeof inputRef === "function") {
            inputRef(element);
        }
        else if (inputRef) {
            inputRef.current = element;
        }
    }
    useOnClickOutside(calendarContainerRef, (e) => {
        const toggleRef = refs.reference;
        if (!isOpen || (toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current.contains(e.target)))
            return;
        return setIsOpen(false);
    });
    function handleKeyDown(e) {
        if (isEnter(e)) {
            e.preventDefault();
            return handleValue(e.target.value);
        }
    }
    const inputCSSClass = clsx("kds-date-picker__input", { "kds-date-picker__input--confined": shouldSetMaxWidth });
    return (React.createElement("div", { className: "kds-date-picker__input-wrapper" },
        React.createElement(Input, { addonAfter: React.createElement(Button$1, { appearance: "outline", "aria-label": calendarButtonAriaLabel, disabled: disabled, onClick: () => setIsOpen(!isOpen), ref: refs.setReference, type: "button", className: "kds-date-picker__calendar-toggle" },
                React.createElement(SvgIconCalendar, null)), "aria-describedby": descriptionIds, disabled: disabled, id: id, size: size, invalid: isInvalidDate, onBlur: (e) => {
                onBlur && onBlur(e);
                handleValue(e.target.value);
            }, onChange: (e) => {
                if (e.target.validity.patternMismatch)
                    return;
                if (isInvalidDate) {
                    updateInvalidState(false, undefined, undefined);
                }
                setInputValue(e.target.value);
            }, onKeyDown: handleKeyDown, pattern: inputPattern$1, placeholder: placeholder, ref: handleInputRef, required: required, type: "text", className: inputCSSClass, value: inputValue, "data-testid": inputTestId }),
        React.createElement("div", { className: "kds-date-picker__calendar-container", ref: calendarContainerRef, style: { display: isOpen ? "block" : "none" } }, isOpen && (React.createElement(FloatingFocusManager, { context: context },
            React.createElement("div", { className: "kds-date-picker__calendar", onKeyUp: (e) => {
                    if (isEsc(e)) {
                        return setIsOpen(false);
                    }
                }, ref: refs.setFloating, style: {
                    position: strategy,
                    top: y !== null && y !== void 0 ? y : 0,
                    left: x !== null && x !== void 0 ? x : 0,
                } },
                React.createElement(DayPicker, { components: {
                        Caption: ({ id }) => React.createElement(CalendarNavigation$1, { showDropdowns: showDropdownNavigation, captionId: id }),
                        Day: (props) => React.createElement(CalendarDay, Object.assign({}, props)),
                        Row: (props) => React.createElement(CalendarRow, Object.assign({}, props)),
                        WeekNumber: ({ number }) => (React.createElement(React.Fragment, null,
                            React.createElement("span", { className: "kds-sr-only" }, ariaLabelWeekNumber),
                            React.createElement("span", { className: "rdp-weeknumber" }, number))),
                    }, defaultMonth: defaultMonth, disabled: disabledDates, fixedWeeks: fixedCalendarHeight, footer: React.createElement(CalendarGoToCurrentDayButton, { label: labelGoToCurrentDay }), fromDate: fromDate, initialFocus: true, labels: labels, locale: locale, mode: "single", onSelect: handleCalendarDateSelect, selected: selectedValue, showOutsideDays: true, showWeekNumber: showWeekNumbers, toDate: toDate }),
                React.createElement("button", { "aria-label": labelCloseCalendar, className: "kds-date-picker__calendar-close", onClick: () => setIsOpen(false), type: "button" },
                    React.createElement(SvgIconClose, null))))))));
});

/* eslint-disable max-lines-per-function */
/**
 * Ref-objekti palauttaa funktio-kutsut päivämääräarvon tyhjentämiseen ja päivittämiseen komponentin ulkopuolelta käsin.
 */
const DatePicker = React.forwardRef(function DatePicker({ calendarDefaultMonth, defaultValue, disabled, disablePast, disabledDates, errorText, fixedCalendarHeight = true, fromDate, helpText, id, infoText, inputRef, requiredLabel, inputWidth, invalid = false, labelText, leftCol, localization, onBlur, onChange, onError, placeholder = "pp.kk.vvvv", required = false, showDropdownNavigation, showLeadingZeros = true, showWeekNumbers, size = "md", testId, inputTestId, toDate, util, className, }, ref) {
    const generatedId = React.useId();
    const inputId = id || generatedId;
    const componentCSSClass = clsx("kds-date-picker", util || className);
    const errorTextId = `${generatedId}-error-text`;
    const helpTextId = `${generatedId}-help-text`;
    const infoTextId = `${generatedId}-info-text`;
    const allowDatesFrom = isDateOrString(fromDate) || (disablePast ? format$1(new Date(), "yyyy-MM-dd") : undefined) || "1900-01-01";
    const [showErrorText, setShowErrorText] = React.useState(invalid);
    const [errorType, setErrorType] = React.useState(DatePickerErrorType.defaultError);
    const handleErrorStateChange = React.useCallback((isInvalid, typeOfError, value, callOnError) => {
        const shouldCallOnError = isInvalid && callOnError;
        setShowErrorText(isInvalid);
        setErrorType(typeOfError);
        shouldCallOnError && onError && onError(isInvalid, typeOfError, value);
    }, [onError]);
    const getDescriptionIds = () => {
        if (helpText || infoText || (errorText && showErrorText)) {
            return clsx({
                [helpTextId]: helpText,
                [errorTextId]: showErrorText,
                [infoTextId]: infoText,
            });
        }
        return undefined;
    };
    const { calendarDefaultMonth: datePickerDefaultMonth, defaultValue: datePickerDefaultValue, disabledDates: datePickerDisabledDates, fromDate: datePickerFromDate, toDate: datePickerToDate, } = convertValuesToDate$1({
        calendarDefaultMonth,
        defaultValue,
        disabledDates,
        fromDate: allowDatesFrom,
        toDate,
    });
    const valueProps = {
        calendarDefaultMonth: datePickerDefaultMonth,
        defaultValue: datePickerDefaultValue,
        disabledDates: datePickerDisabledDates,
        fromDate: datePickerFromDate,
        toDate: datePickerToDate,
    };
    const datePickerInputProps = Object.assign({ descriptionIds: getDescriptionIds(), disabled,
        fixedCalendarHeight, id: inputId, inputRef,
        invalid,
        localization,
        onBlur,
        onChange, onErrorStateChange: handleErrorStateChange, placeholder,
        required,
        ref,
        showDropdownNavigation,
        showLeadingZeros,
        showWeekNumbers, shouldSetMaxWidth: !inputWidth, size,
        inputTestId }, valueProps);
    const labelAndHelpText = (React.createElement(React.Fragment, null,
        labelText && (React.createElement(InputLabel, { center: !!leftCol, required: required, requiredLabel: requiredLabel, htmlFor: inputId }, labelText)),
        helpText && React.createElement(InputText, { id: helpTextId }, helpText)));
    const mainContent = (React.createElement(React.Fragment, null,
        showErrorText && errorText !== null && (React.createElement(InputText, { error: true, id: errorTextId }, errorText && errorText[errorType] ? errorText[errorType] : handleDatePickerErrorText(errorType))),
        inputWidth ? (React.createElement(Row$1, { gx: 2 }, inputWidth(React.createElement(DatePickerInput$1, Object.assign({}, datePickerInputProps))))) : (React.createElement(DatePickerInput$1, Object.assign({}, datePickerInputProps))),
        infoText && (React.createElement(InputText, { id: infoTextId, info: true, className: "kds-mt-2" }, infoText))));
    return (React.createElement(InputGroup, { "data-testid": testId, as: "div", row: !!leftCol, className: componentCSSClass }, leftCol ? (React.createElement(React.Fragment, null,
        leftCol(labelAndHelpText),
        React.createElement(Column, null, mainContent))) : (React.createElement(React.Fragment, null,
        labelAndHelpText,
        mainContent))));
});

const DateRangePickerInput$1 = React.forwardRef(function DateRangePickerInput({ calendarDefaultMonth, defaultValue, descriptionIds, disabled, errorTextId, fixedCalendarHeight, fromDate, renderInputs, invalid, localization, onChange, onErrorStateChange, placeholder, required, showDropdownNavigation = true, showLeadingZeros, showWeekNumbers, shouldSetMaxWidth, size = "md", toDate, fromInputTestId, toInputTestId, }, ref) {
    const generatedId = React.useId();
    const fromInputId = `${generatedId}-from`;
    const toInputId = `${generatedId}-to`;
    const calendarContainerRef = React.useRef();
    const [isOpen, setIsOpen] = React.useState(false);
    const dateDisplayFormat = showLeadingZeros ? "dd.MM.yyyy" : "d.M.yyyy";
    const dateReturnFormat = "yyyy-MM-dd";
    const defaultRangeValue = defaultValue && isAllowedRangeValue$1(defaultValue, fromDate, toDate) && defaultValue;
    const initialFromInputValue = defaultRangeValue ? format$1(defaultRangeValue.from, dateDisplayFormat) : "";
    const initialToInputValue = (defaultRangeValue === null || defaultRangeValue === void 0 ? void 0 : defaultRangeValue.to) ? format$1(defaultRangeValue.to, dateDisplayFormat) : "";
    const initialFromReturnValue = defaultRangeValue ? format$1(defaultRangeValue.from, dateReturnFormat) : undefined;
    const initialToReturnValue = (defaultRangeValue === null || defaultRangeValue === void 0 ? void 0 : defaultRangeValue.to) ? format$1(defaultRangeValue.to, dateReturnFormat) : undefined;
    const [fromValue, setFromValue] = React.useState(initialFromInputValue);
    const [toValue, setToValue] = React.useState(initialToInputValue);
    const [returnValue, setReturnValue] = React.useState({
        from: initialFromReturnValue,
        to: initialToReturnValue,
    });
    const [fromIsInvalid, setFromIsInvalid] = React.useState(!!(invalid === null || invalid === void 0 ? void 0 : invalid.from));
    const [toIsInvalid, setToIsInvalid] = React.useState(!!(invalid === null || invalid === void 0 ? void 0 : invalid.to));
    const [defaultMonth, setDefaultMonth] = React.useState(calendarDefaultMonth);
    const [selectedRange, setSelectedRange] = React.useState(defaultRangeValue);
    const [errorType, setErrorType] = React.useState(DateRangePickerErrorType.defaultError);
    const _a = getLocalization(localization), { ariaLabelRangeFrom, ariaLabelRangeTo, ariaLabelWeekNumber, labelCloseCalendar, labelToggleCalendar, labelSelected, labelGoToCurrentDay, locale } = _a, labels = __rest$1(_a, ["ariaLabelRangeFrom", "ariaLabelRangeTo", "ariaLabelWeekNumber", "labelCloseCalendar", "labelToggleCalendar", "labelSelected", "labelGoToCurrentDay", "locale"]);
    const fromSelectionDescription = (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.from) && fromValue ? fromValue : "";
    const toSelectionDescription = (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.to) && toValue ? ` - ${toValue}` : "";
    const selectionDescription = (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.from)
        ? `, ${labelSelected} ${fromSelectionDescription}${toSelectionDescription}`
        : "";
    const calendarButtonAriaLabel = `${labelToggleCalendar}${selectionDescription}`;
    const { x, y, refs, strategy, context } = useFloating({
        open: isOpen,
        onOpenChange: setIsOpen,
        whileElementsMounted: autoUpdate,
        middleware: [offset(10), flip(), shift({ padding: 8 })],
    });
    const updateInvalidState = React.useCallback((fromIsInvalid, toIsInvalid, errorType, inputValues, callOnError = true) => {
        setFromIsInvalid(fromIsInvalid);
        setToIsInvalid(toIsInvalid);
        onErrorStateChange(fromIsInvalid, toIsInvalid, errorType, inputValues, callOnError);
    }, [onErrorStateChange]);
    React.useEffect(() => {
        const inputIsInvalid = (invalid === null || invalid === void 0 ? void 0 : invalid.from) || (invalid === null || invalid === void 0 ? void 0 : invalid.to);
        if (inputIsInvalid) {
            updateInvalidState(invalid.from, invalid.to, DateRangePickerErrorType.defaultError, undefined, false);
        }
        else {
            updateInvalidState(false, false, undefined, undefined, false);
        }
    }, [invalid, updateInvalidState]);
    const updateInputValue = (value, type) => {
        if (type === "from") {
            return setFromValue(value);
        }
        else {
            return setToValue(value);
        }
    };
    const handleCalendarRangeSelect = React.useCallback((range) => {
        if (fromIsInvalid || toIsInvalid) {
            updateInvalidState(false, false, undefined, undefined, false);
        }
        const newReturnValue = {
            from: range ? format$1(range.from, dateReturnFormat) : undefined,
            to: (range === null || range === void 0 ? void 0 : range.to) ? format$1(range.to, dateReturnFormat) : undefined,
        };
        setReturnValue(newReturnValue);
        onChange === null || onChange === void 0 ? void 0 : onChange(newReturnValue);
        if (!range) {
            setFromValue("");
            setToValue("");
            return setSelectedRange(undefined);
        }
        const selectTargetIsDisabled = (fromDate && isBefore(range.from, fromDate)) || (toDate && isAfter(range.to, toDate));
        if (selectTargetIsDisabled)
            return;
        if (fromIsInvalid) {
            setFromValue("");
            setFromIsInvalid(false);
        }
        if (toIsInvalid) {
            setToValue("");
            setToIsInvalid(false);
        }
        const fromInputValue = format$1(range.from, dateDisplayFormat);
        const toInputValue = range.to ? format$1(range.to, dateDisplayFormat) : "";
        setFromValue(fromInputValue);
        setToValue(toInputValue);
        setSelectedRange(range);
    }, [fromIsInvalid, toIsInvalid, onChange, fromDate, toDate, dateDisplayFormat, updateInvalidState]);
    // Expose reset and setValue functions through ref
    React.useImperativeHandle(ref, () => ({
        reset: () => {
            if (fromIsInvalid || toIsInvalid) {
                updateInvalidState(false, false, undefined, undefined);
            }
            setFromValue("");
            setToValue("");
            setSelectedRange(undefined);
            onChange === null || onChange === void 0 ? void 0 : onChange({ from: undefined, to: undefined });
        },
        setValue: (value) => {
            const { selectedRangeValue: newRange } = convertValuesToDate$1({ selectedRangeValue: value });
            handleCalendarRangeSelect(newRange);
        },
    }), [handleCalendarRangeSelect, fromIsInvalid, toIsInvalid, updateInvalidState, onChange]);
    useOnClickOutside(calendarContainerRef, (e) => {
        const toggleRef = refs.reference;
        if (!isOpen || (toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current.contains(e.target)))
            return;
        return setIsOpen(false);
    });
    function handleDateRangeErrorType(isValidFormat, isInAllowedRange, bothValuesInvalid, isValidInRelationToOtherValue) {
        if (bothValuesInvalid) {
            return DateRangePickerErrorType.invalidRange;
        }
        else if (!isValidFormat) {
            return DateRangePickerErrorType.invalidFormat;
        }
        else if (!isInAllowedRange) {
            return DateRangePickerErrorType.notInRange;
        }
        else if (!isValidInRelationToOtherValue) {
            return DateRangePickerErrorType.invalidRelation;
        }
        return DateRangePickerErrorType.defaultError;
    }
    function handleValue(value, type) {
        const { dateValue, dateDisplayValue, dateReturnValue, isValidFormat } = getFormattedDate(value, dateDisplayFormat);
        const isFrom = type === "from";
        const isTo = type === "to";
        const typeOfOtherInput = isFrom ? "to" : "from";
        const valueOfOtherInput = isFrom ? toValue : fromValue;
        const isInAllowedRange = dateValue && isInDateRange$1(dateValue, fromDate, toDate);
        const isValidInRelationToOtherValue = dateValue && getValidityInRelationToOtherValue(fromValue, toValue);
        const isInvalidValue = value && (!isValidFormat || !isInAllowedRange || !isValidInRelationToOtherValue);
        const dateRangeValue = isInvalidValue ? undefined : dateValue;
        const bothValuesInvalid = isInvalidValue && (isFrom ? toIsInvalid : fromIsInvalid);
        const newCurrentInputReturnValue = isInvalidValue ? undefined : dateReturnValue;
        const newCurrentInputValue = dateDisplayValue || value;
        const newReturnValue = {
            from: isFrom ? newCurrentInputReturnValue : returnValue.from,
            to: isTo ? newCurrentInputReturnValue : returnValue.to,
        };
        const onErrorReturnValue = {
            from: isFrom ? value : fromValue,
            to: isTo ? value : toValue,
        };
        const newSelectedRange = {
            from: isFrom ? dateRangeValue : selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.from,
            to: isTo ? dateRangeValue : selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.to,
        };
        const valueHasNotChanged = newReturnValue[type] === returnValue[type];
        if (valueOfOtherInput !== "" && !returnValue[typeOfOtherInput]) {
            const { dateValue, dateReturnValue } = getFormattedDate(valueOfOtherInput, dateDisplayFormat);
            newReturnValue[typeOfOtherInput] = dateReturnValue;
            newSelectedRange[typeOfOtherInput] = dateValue;
        }
        updateInputValue(newCurrentInputValue, type);
        setReturnValue(newReturnValue);
        if (isInvalidValue) {
            const newErrorType = handleDateRangeErrorType(isValidFormat, isInAllowedRange, bothValuesInvalid, isValidInRelationToOtherValue);
            setErrorType(newErrorType);
            updateInvalidState(isFrom ? true : fromIsInvalid, isTo ? true : toIsInvalid, newErrorType, onErrorReturnValue);
        }
        if (valueHasNotChanged) {
            return;
        }
        onChange === null || onChange === void 0 ? void 0 : onChange(newReturnValue);
        setSelectedRange(newSelectedRange);
    }
    function handleKeyDown(e, type) {
        if (isEnter(e)) {
            e.preventDefault();
            handleValue(e.target.value, type);
        }
    }
    const getInputPropsByType = (type) => {
        const isFrom = type === "from";
        const inputCSSClass = clsx(`kds-date-picker__input kds-date-picker__input--range kds-date-picker__input--${type}`, {
            "kds-date-picker__input--confined": shouldSetMaxWidth,
        });
        const isInvalid = isFrom ? fromIsInvalid : toIsInvalid;
        const testId = isFrom ? fromInputTestId : toInputTestId;
        const typeOfOtherInput = isFrom ? "to" : "from";
        const otherInputIsInvalid = isFrom ? toIsInvalid : fromIsInvalid;
        const otherInputValue = isFrom ? toValue : fromValue;
        const { isValidFormat: otherInputValueIsValidFormat } = getFormattedDate(otherInputValue, dateDisplayFormat);
        return {
            "aria-describedby": descriptionIds,
            "aria-label": isFrom ? ariaLabelRangeFrom : ariaLabelRangeTo,
            invalid: isInvalid,
            disabled,
            onBlur: (e) => !isInvalid && handleValue(e.target.value, type),
            onChange: (e) => {
                if (e.target.validity.patternMismatch)
                    return;
                if (otherInputIsInvalid && !otherInputValueIsValidFormat) {
                    setSelectedRange(undefined);
                    updateInputValue("", typeOfOtherInput);
                }
                if (fromIsInvalid || toIsInvalid) {
                    updateInvalidState(false, false, undefined, undefined);
                }
                updateInputValue(e.target.value, type);
            },
            onKeyDown: (e) => handleKeyDown(e, type),
            pattern: inputPattern$1,
            placeholder,
            required,
            size,
            type: "text",
            className: inputCSSClass,
            value: isFrom ? fromValue : toValue,
            "data-testid": testId,
        };
    };
    const inputWrapperCSSClass = clsx("kds-date-picker__input-wrapper kds-date-picker__input-wrapper--range", {
        "kds-date-picker__input-wrapper--range-default": !renderInputs,
    });
    const calendarCSSClass = clsx("kds-date-picker__calendar", {
        [`kds-date-picker__calendar--range-start-selected`]: selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.from,
        [`kds-date-picker__calendar--range-end-selected`]: selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.to,
    });
    const calendarToggleCSSClass = clsx("kds-date-picker__calendar-toggle", {
        [`kds-date-picker__calendar-toggle--${size}`]: size && size !== "md",
    });
    const calendarButton = (React.createElement(Button$1, { appearance: "outline", "aria-label": calendarButtonAriaLabel, disabled: disabled, onClick: () => {
            setDefaultMonth((selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.from) || (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.to) || calendarDefaultMonth);
            setIsOpen(!isOpen);
        }, ref: refs.setReference, type: "button", className: calendarToggleCSSClass },
        React.createElement(SvgIconCalendar, null)));
    return (React.createElement("div", { className: inputWrapperCSSClass },
        typeof renderInputs === "function" ? (renderInputs(Input, Input, getInputPropsByType("from"), getInputPropsByType("to"), calendarButton, errorTextId, handleDateRangePickerErrorText({ fromIsInvalid, toIsInvalid, errorType }))) : (React.createElement(React.Fragment, null,
            React.createElement(Input, Object.assign({ id: fromInputId }, getInputPropsByType("from"), { "data-testid": fromInputTestId })),
            React.createElement("span", { className: "kds-date-picker__input-separator" }, "-"),
            React.createElement(Input, Object.assign({ id: toInputId }, getInputPropsByType("to"), { "data-testid": toInputTestId })),
            calendarButton)),
        React.createElement("div", { className: "kds-date-picker__calendar-container", ref: calendarContainerRef }, isOpen && (React.createElement(FloatingFocusManager, { context: context },
            React.createElement("div", { className: calendarCSSClass, onKeyUp: (e) => {
                    if (isEsc(e)) {
                        return setIsOpen(false);
                    }
                }, ref: refs.setFloating, style: {
                    position: strategy,
                    top: y !== null && y !== void 0 ? y : 0,
                    left: x !== null && x !== void 0 ? x : 0,
                } },
                React.createElement(DayPicker, { components: {
                        Caption: ({ id }) => React.createElement(CalendarNavigation$1, { showDropdowns: showDropdownNavigation, captionId: id }),
                        Day: (props) => React.createElement(CalendarDay, Object.assign({}, props)),
                        Row: (props) => React.createElement(CalendarRow, Object.assign({}, props)),
                        WeekNumber: ({ number }) => (React.createElement(React.Fragment, null,
                            React.createElement("span", { className: "kds-sr-only" }, ariaLabelWeekNumber),
                            React.createElement("span", { className: "rdp-weeknumber" }, number))),
                    }, defaultMonth: defaultMonth, fixedWeeks: fixedCalendarHeight, fromDate: fromDate, footer: React.createElement(CalendarGoToCurrentDayButton, { label: labelGoToCurrentDay }), initialFocus: true, labels: labels, locale: locale, mode: "range", onSelect: handleCalendarRangeSelect, selected: selectedRange, showOutsideDays: true, showWeekNumber: showWeekNumbers, toDate: toDate }),
                React.createElement("button", { "aria-label": labelCloseCalendar, className: "kds-date-picker__calendar-close", onClick: () => setIsOpen(false), type: "button" },
                    React.createElement(SvgIconClose, null))))))));
});

/* eslint-disable max-lines-per-function */
/**
 * Ref-objekti palauttaa funktio-kutsut päivämääräarvon tyhjentämiseen ja päivittämiseen komponentin ulkopuolelta käsin.
 */
const DateRangePicker = React.forwardRef(function DateRangePicker({ calendarDefaultMonth, defaultValue, disabled, disablePast, errorText, fixedCalendarHeight = true, fromDate, helpText, infoText, invalid, labelText, leftCol, localization, onChange, onError, placeholder = "pp.kk.vvvv", renderInputs, requiredLabel, required = false, showDropdownNavigation, showLeadingZeros = true, showWeekNumbers, size = "md", testId, fromInputTestId, toInputTestId, toDate, util, className, }, ref) {
    const componentCSSClass = clsx("kds-date-picker", util || className);
    const baseId = React.useId();
    const errorTextId = `${baseId}-kds-date-picker-error`;
    const helpTextId = `${baseId}-kds-date-picker-helpText`;
    const infoTextId = `${baseId}-kds-date-picker-info`;
    const allowDatesFrom = isDateOrString(fromDate) || (disablePast ? format$1(new Date(), "yyyy-MM-dd") : undefined) || "1900-01-01";
    const [showErrorText, setShowErrorText] = React.useState();
    const [errorData, setErrorData] = React.useState();
    const handleErrorStateChange = React.useCallback((fromIsInvalid, toIsInvalid, errorType, inputValues, callOnError) => {
        const showError = fromIsInvalid || toIsInvalid;
        const shouldCallOnError = showError && callOnError;
        setShowErrorText(showError);
        setErrorData({ errorType, fromIsInvalid, toIsInvalid });
        shouldCallOnError && onError && onError(fromIsInvalid, toIsInvalid, errorType, inputValues);
    }, [onError]);
    const getDescriptionIds = () => {
        if (helpText || infoText || (errorText && showErrorText)) {
            return clsx({
                [helpTextId]: helpText,
                [errorTextId]: showErrorText,
                [infoTextId]: infoText,
            });
        }
        return undefined;
    };
    const { calendarDefaultMonth: datePickerDefaultMonth, defaultRangeValue: datePickerDefaultRangeValue, fromDate: datePickerFromDate, toDate: datePickerToDate, } = convertValuesToDate$1({
        calendarDefaultMonth,
        defaultRangeValue: defaultValue,
        fromDate: allowDatesFrom,
        toDate,
    });
    const valueProps = {
        calendarDefaultMonth: datePickerDefaultMonth,
        defaultValue: datePickerDefaultRangeValue,
        fromDate: datePickerFromDate,
        toDate: datePickerToDate,
    };
    const dateRangePickerInputProps = Object.assign({ descriptionIds: getDescriptionIds(), disabled,
        errorTextId,
        fixedCalendarHeight,
        invalid,
        localization, onChange: onChange, onErrorStateChange: handleErrorStateChange, placeholder,
        renderInputs,
        ref,
        required,
        requiredLabel,
        showDropdownNavigation,
        showLeadingZeros,
        showWeekNumbers, shouldSetMaxWidth: !renderInputs, size: size, fromInputTestId,
        toInputTestId }, valueProps);
    const labelAndHelpText = (React.createElement(React.Fragment, null,
        labelText && (React.createElement(InputLabel, { as: "legend", center: !!leftCol, required: required, requiredLabel: requiredLabel }, labelText)),
        helpText && React.createElement(InputText, { id: helpTextId }, helpText)));
    const errorTextFromProps = errorData && typeof errorText === "function" && errorText(errorData.fromIsInvalid ? "from" : "to");
    const mainContent = (React.createElement(React.Fragment, null,
        showErrorText && errorText !== null && (React.createElement(InputText, { error: true, id: errorTextId }, errorTextFromProps[errorData.errorType] || handleDateRangePickerErrorText(errorData))),
        React.createElement(DateRangePickerInput$1, Object.assign({}, dateRangePickerInputProps)),
        infoText && (React.createElement(InputText, { id: infoTextId, info: true, className: "kds-mt-2" }, infoText))));
    return (React.createElement(InputGroup, { "data-testid": testId, as: "fieldset", row: !!leftCol, className: componentCSSClass }, leftCol ? (React.createElement(React.Fragment, null,
        leftCol(labelAndHelpText),
        React.createElement(Column, null, mainContent))) : (React.createElement(React.Fragment, null,
        labelAndHelpText,
        mainContent))));
});

var startOfDay$1 = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = startOfDay;
    var _index = _interopRequireDefault(toDateExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    /**
     * @name startOfDay
     * @category Day Helpers
     * @summary Return the start of a day for the given date.
     *
     * @description
     * Return the start of a day for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of a day
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of a day for 2 September 2014 11:55:00:
     * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Sep 02 2014 00:00:00
     */
    function startOfDay(dirtyDate) {
        (0, _index2.default)(1, arguments);
        var date = (0, _index.default)(dirtyDate);
        date.setHours(0, 0, 0, 0);
        return date;
    }
    module.exports = exports.default;
}(startOfDay$1, startOfDay$1.exports));
var startOfDayExports = startOfDay$1.exports;
var startOfDay = /*@__PURE__*/ getDefaultExportFromCjs(startOfDayExports);

var addDays$1 = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = addDays;
    var _index = _interopRequireDefault(toIntegerExports);
    var _index2 = _interopRequireDefault(toDateExports);
    var _index3 = _interopRequireDefault(requiredArgsExports);
    /**
     * @name addDays
     * @category Day Helpers
     * @summary Add the specified number of days to the given date.
     *
     * @description
     * Add the specified number of days to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} - the new date with the days added
     * @throws {TypeError} - 2 arguments required
     *
     * @example
     * // Add 10 days to 1 September 2014:
     * const result = addDays(new Date(2014, 8, 1), 10)
     * //=> Thu Sep 11 2014 00:00:00
     */
    function addDays(dirtyDate, dirtyAmount) {
        (0, _index3.default)(2, arguments);
        var date = (0, _index2.default)(dirtyDate);
        var amount = (0, _index.default)(dirtyAmount);
        if (isNaN(amount)) {
            return new Date(NaN);
        }
        if (!amount) {
            // If 0 days, no-op to avoid changing times in the hour before end of DST
            return date;
        }
        date.setDate(date.getDate() + amount);
        return date;
    }
    module.exports = exports.default;
}(addDays$1, addDays$1.exports));
var addDaysExports = addDays$1.exports;
var addDays = /*@__PURE__*/ getDefaultExportFromCjs(addDaysExports);

var subDays$1 = {exports: {}};

(function (module, exports) {
    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = subDays;
    var _index = _interopRequireDefault(addDaysExports);
    var _index2 = _interopRequireDefault(requiredArgsExports);
    var _index3 = _interopRequireDefault(toIntegerExports);
    /**
     * @name subDays
     * @category Day Helpers
     * @summary Subtract the specified number of days from the given date.
     *
     * @description
     * Subtract the specified number of days from the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the days subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 10 days from 1 September 2014:
     * const result = subDays(new Date(2014, 8, 1), 10)
     * //=> Fri Aug 22 2014 00:00:00
     */
    function subDays(dirtyDate, dirtyAmount) {
        (0, _index2.default)(2, arguments);
        var amount = (0, _index3.default)(dirtyAmount);
        return (0, _index.default)(dirtyDate, -amount);
    }
    module.exports = exports.default;
}(subDays$1, subDays$1.exports));
var subDaysExports = subDays$1.exports;
var subDays = /*@__PURE__*/ getDefaultExportFromCjs(subDaysExports);

var DatePickerV2ErrorType;
(function (DatePickerV2ErrorType) {
    DatePickerV2ErrorType["invalidFormat"] = "invalidFormat";
    DatePickerV2ErrorType["dateDisabled"] = "dateDisabled";
    DatePickerV2ErrorType["notInRangeFrom"] = "notInRangeFrom";
    DatePickerV2ErrorType["notInRangeTo"] = "notInRangeTo";
    DatePickerV2ErrorType["required"] = "required";
})(DatePickerV2ErrorType || (DatePickerV2ErrorType = {}));

var DateRangePickerV2InputType;
(function (DateRangePickerV2InputType) {
    DateRangePickerV2InputType["to"] = "to";
    DateRangePickerV2InputType["from"] = "from";
})(DateRangePickerV2InputType || (DateRangePickerV2InputType = {}));
var DateRangePickerV2ErrorType;
(function (DateRangePickerV2ErrorType) {
    DateRangePickerV2ErrorType["dateDisabled"] = "dateDisabled";
    DateRangePickerV2ErrorType["invalidFormat"] = "invalidFormat";
    DateRangePickerV2ErrorType["invalidRelation"] = "invalidRelation";
    DateRangePickerV2ErrorType["invalidRange"] = "invalidRange";
    DateRangePickerV2ErrorType["notInRangeFrom"] = "notInRangeFrom";
    DateRangePickerV2ErrorType["notInRangeTo"] = "notInRangeTo";
    DateRangePickerV2ErrorType["required"] = "required";
})(DateRangePickerV2ErrorType || (DateRangePickerV2ErrorType = {}));

/* eslint-disable max-lines */
const dateReturnFormat = "yyyy-MM-dd";
const inputPattern = "[0-9.\\-]+";
const minDate = "1900-01-01";
const isISOValue$1 = (dateString) => /^(\d{4})-(\d{2})-(\d{2})$/.test(dateString);
const isEightDigits = (dateString) => /^(\d{8})$/.test(dateString);
function formatStringValue(dateString) {
    if (isEightDigits(dateString)) {
        return `${dateString.substring(0, 2)}.${dateString.substring(2, 4)}.${dateString.substring(4, dateString.length)}`;
    }
    if (isISOValue$1(dateString)) {
        return `${dateString.substring(8, dateString.length)}.${dateString.substring(5, 7)}.${dateString.substring(0, 4)}`;
    }
    return dateString;
}
function isValidDateFormat(dateValue) {
    const isFormattedWithDots = dateValue.indexOf(".") > -1;
    const yearValue = dateValue.substring(dateValue.lastIndexOf(".") + 1);
    const yearValueNotValid = isFormattedWithDots && yearValue.length !== 4;
    if (yearValueNotValid) {
        return false;
    }
    return isValidDate(parse(dateValue, "dd.MM.yyyy", new Date()));
}
function isInDateRange(date, rangeStartDate, rangeEndDate) {
    if (!rangeStartDate)
        return true;
    if (!rangeEndDate)
        return !isBefore(date, rangeStartDate);
    return !isBefore(date, rangeStartDate) && !isAfter(date, rangeEndDate);
}
const getBaseLocalization = () => {
    return {
        ariaLabelWeekNumber: "Viikkonumero",
        labelMonthDropdown: () => "Kuukausi",
        labelYearDropdown: () => "Vuosi",
        labelNext: () => "Siirry seuraavaan kuukauteen",
        labelPrevious: () => "Siirry edelliseen kuukauteen",
        ariaStatusClearDate: "Valittu päivämäärä poistettu",
        labelClearDate: "Tyhjennä",
        labelToggleCalendar: "Valitse päivämäärä",
        labelCloseCalendar: "Sulje kalenteri",
        labelSelected: "valittu",
        labelGoToCurrentDay: "Siirry kuluvaan päivään",
        locale: fi,
    };
};
const getDatePickerLocalization = (localization) => {
    return Object.assign(Object.assign(Object.assign({}, getBaseLocalization()), localization), { errorTexts: Object.assign({ [DatePickerV2ErrorType.dateDisabled]: "Valittu päivämäärä ei ole sallittu. Valitse toinen päivämäärä.", [DatePickerV2ErrorType.invalidFormat]: "Virheellinen päivämäärä. Ilmoita päivämäärä muodossa pp.kk.vvvv.", [DatePickerV2ErrorType.notInRangeFrom]: "Virheellinen päivämäärä. Tarkista, että päivä on sallitulta väliltä.", [DatePickerV2ErrorType.notInRangeTo]: "Virheellinen päivämäärä. Tarkista, että päivä on sallitulta väliltä.", [DatePickerV2ErrorType.required]: "Päivämäärä on pakollinen tieto. Ilmoita päivämäärä muodossa pp.kk.vvvv." }, localization === null || localization === void 0 ? void 0 : localization.errorTexts) });
};
const getDateRangePickerLocalization = (localization) => {
    return Object.assign(Object.assign(Object.assign(Object.assign({}, getBaseLocalization()), { ariaLabelRangeFrom: "Alkamispäivä", ariaLabelRangeTo: "Päättymispäivä", ariaStatusClearDate: "Valittu ajanjakso poistettu", labelToggleCalendar: "Valitse ajanjakso" }), localization), { rangeErrorTexts: Object.assign({ [DateRangePickerV2ErrorType.invalidRange]: "Virheellinen ajanjakso. Tarkista annetut päivämäärät." }, localization === null || localization === void 0 ? void 0 : localization.rangeErrorTexts), fromErrorTexts: Object.assign({ [DateRangePickerV2ErrorType.dateDisabled]: "Alkamispäivä ei ole sallitulla ajanjaksolla. Valitse toinen päivämäärä.", [DateRangePickerV2ErrorType.invalidRelation]: "Alkamispäivä on virheellinen. Tarkista, että alkamispäivä edeltää päättymispäivää.", [DateRangePickerV2ErrorType.invalidFormat]: "Alkamispäivä on virheellinen. Ilmoita päivämäärä muodossa pp.kk.vvvv.", [DateRangePickerV2ErrorType.notInRangeFrom]: "Alkamispäivä on virheellinen. Tarkista, että päivämäärä on sallitulta väliltä.", [DateRangePickerV2ErrorType.notInRangeTo]: "Alkamispäivä on virheellinen. Tarkista, että päivämäärä on sallitulta väliltä.", [DateRangePickerV2ErrorType.required]: "Alkamispäivä on pakollinen tieto. Ilmoita päivämäärä muodossa pp.kk.vvvv." }, localization === null || localization === void 0 ? void 0 : localization.fromErrorTexts), toErrorTexts: Object.assign({ [DateRangePickerV2ErrorType.dateDisabled]: "Päättymispäivä ei ole sallitulla ajanjaksolla. Valitse toinen päivämäärä.", [DateRangePickerV2ErrorType.invalidRelation]: "Päättymispäivä on virheellinen. Tarkista, että alkamispäivä edeltää päättymispäivää.", [DateRangePickerV2ErrorType.invalidFormat]: "Päättymispäivä on virheellinen. Ilmoita päivämäärä muodossa pp.kk.vvvv.", [DateRangePickerV2ErrorType.notInRangeFrom]: "Päättymispäivä on virheellinen. Tarkista, että päivämäärä on sallitulta väliltä.", [DateRangePickerV2ErrorType.notInRangeTo]: "Päättymispäivä on virheellinen. Tarkista, että päivämäärä on sallitulta väliltä.", [DateRangePickerV2ErrorType.required]: "Päättymispäivä on pakollinen tieto. Ilmoita päivämäärä muodossa pp.kk.vvvv." }, localization === null || localization === void 0 ? void 0 : localization.toErrorTexts) });
};
function convertValuesToDate({ calendarDefaultMonth, selectedDateValue, defaultValue, defaultRangeValue, disabledDates, fromDate, toDate, selectedRangeValue, }) {
    const convertValueToDate = (value) => {
        if (!value)
            return undefined;
        if (isValidDate(value))
            return startOfDay(value);
        try {
            let parsedValue = parseISO(value);
            if (!isValidDate(parsedValue)) {
                parsedValue = getValueAsDate(value);
            }
            if (!isValidDate(parsedValue)) {
                throw new Error(`Unable to convert following value to a date object: ${value}`);
            }
            return parsedValue;
        }
        catch (err) {
            console.error(err);
        }
    };
    const handleDisabledItemsByType = (item) => {
        if (isValidDate(item))
            return item;
        if (typeof item === "string")
            return convertValueToDate(item);
        const valueArray = Object.entries(item).map(([key, value]) => {
            if (isDayOfWeekType({ [key]: value }))
                return { [key]: value };
            return { [key]: convertValueToDate(value) };
        });
        return Object.assign({}, ...valueArray);
    };
    const convertDisabledDates = (values) => {
        return Array.isArray(values) ? values.map(handleDisabledItemsByType) : [handleDisabledItemsByType(values)];
    };
    return {
        calendarDefaultMonth: convertValueToDate(calendarDefaultMonth),
        selectedDateValue: selectedDateValue && convertValueToDate(selectedDateValue),
        defaultValue: convertValueToDate(defaultValue),
        defaultRangeValue: defaultRangeValue && {
            from: convertValueToDate(defaultRangeValue.from),
            to: defaultRangeValue.to && convertValueToDate(defaultRangeValue.to),
        },
        disabledDates: disabledDates && convertDisabledDates(disabledDates),
        fromDate: convertValueToDate(fromDate),
        toDate: convertValueToDate(toDate),
        selectedRangeValue: selectedRangeValue && {
            from: convertValueToDate(selectedRangeValue.from),
            to: selectedRangeValue.to && convertValueToDate(selectedRangeValue.to),
        },
    };
}
function isRelationValid(fromDate, toDate) {
    const fromDateString = format$1(fromDate, dateReturnFormat);
    const toDateString = format$1(toDate, dateReturnFormat);
    if (fromDate && toDate && fromDateString !== toDateString) {
        return isBefore(fromDate, toDate);
    }
    return true;
}
function isAllowedRangeValue(range, fromDate, toDate) {
    if (range.to && isBefore(range.to, range.from))
        return false;
    if (!isInDateRange(range.from, fromDate, toDate) || (range.to && !isInDateRange(range.to, fromDate, toDate))) {
        return false;
    }
    return true;
}
function getDateDisplayFormat(showLeadingZeros) {
    return showLeadingZeros ? "dd.MM.yyyy" : "d.M.yyyy";
}
const getValueAsDate = (value) => {
    if (value instanceof Date && isValidDate(value)) {
        return startOfDay(value);
    }
    if (typeof value === "string") {
        const stringValue = formatStringValue(value);
        const isValidFormat = isValidDateFormat(stringValue);
        return isValidFormat ? parse(stringValue, "dd.MM.yyyy", startOfDay(new Date())) : undefined;
    }
    return undefined;
};
const getInitialSelectedValue = (defaultValue, value) => {
    try {
        const defaultValueAsDate = defaultValue && getValueAsDate(defaultValue);
        if (defaultValueAsDate) {
            return defaultValueAsDate;
        }
        const valueAsDate = value && getValueAsDate(value);
        if (valueAsDate) {
            return valueAsDate;
        }
    }
    catch (error) {
        return undefined;
    }
    return undefined;
};
const getDescriptionIds = ({ helpText, helpTextId, infoText, infoTextId, errorText, errorTextId, invalid, }) => {
    if (helpText || infoText || (errorText && invalid)) {
        return clsx({
            [helpTextId]: helpText,
            [errorTextId]: errorText && invalid,
            [infoTextId]: infoText,
        });
    }
    return undefined;
};
const getEarliestDateByDay = (date, disabledDays) => {
    let previousDate = subDays(date, 1);
    while (!disabledDays.includes(previousDate.getDay())) {
        previousDate = subDays(previousDate, 1);
    }
    return previousDate;
};
const getLatestDateByDay = (date, disabledDays) => {
    let nextDate = addDays(date, 1);
    while (!disabledDays.includes(nextDate.getDay())) {
        nextDate = addDays(nextDate, 1);
    }
    return nextDate;
};
const getAllowedMaxDate = (date, disabled) => {
    const disabledDates = disabled
        .map((disabledDate) => {
        if (disabledDate instanceof Date) {
            return subDays(disabledDate, 1);
        }
        if (isDateRange(disabledDate) && disabledDate.from) {
            return subDays(disabledDate.from, 1);
        }
        if (isDateAfterType(disabledDate) && disabledDate.after) {
            return disabledDate.after;
        }
        if (isDayOfWeekType(disabledDate) && disabledDate.dayOfWeek) {
            return subDays(getLatestDateByDay(date, disabledDate.dayOfWeek), 1);
        }
    })
        .filter((date) => date instanceof Date && isValidDate(date));
    if (!disabledDates.length) {
        return null;
    }
    const maxDateAsTime = Math.min(...disabledDates
        .filter((disabledDate) => disabledDate.getTime() >= date.getTime())
        .map((disabledDate) => disabledDate.getTime()));
    return maxDateAsTime && isValidDate(maxDateAsTime) ? new Date(maxDateAsTime) : null;
};
const getAllowedMinDate = (date, disabled) => {
    const disabledDates = disabled
        .map((disabledDate) => {
        if (disabledDate instanceof Date) {
            return addDays(disabledDate, 1);
        }
        if (isDateRange(disabledDate) && disabledDate.to) {
            return addDays(disabledDate.to, 1);
        }
        if (isDateBeforeType(disabledDate) && disabledDate.before) {
            return disabledDate.before;
        }
        if (isDayOfWeekType(disabledDate) && disabledDate.dayOfWeek) {
            return addDays(getEarliestDateByDay(date, disabledDate.dayOfWeek), 1);
        }
    })
        .filter((date) => date instanceof Date && isValidDate(date));
    if (!disabledDates.length) {
        return null;
    }
    const minDateAsTime = Math.max(...disabledDates
        .filter((disabledDate) => disabledDate.getTime() <= date.getTime())
        .map((disabledDate) => disabledDate.getTime()));
    return minDateAsTime && isValidDate(minDateAsTime) ? new Date(minDateAsTime) : null;
};

const getErrorText$2 = (type, errorTexts) => (errorTexts === null || errorTexts === void 0 ? void 0 : errorTexts[type]) || "";
const getResult$2 = ({ isValid, valueAsDate, errorType = null, errorTexts, }) => {
    const isDate = isValidDate(valueAsDate);
    return {
        isValid,
        error: {
            type: errorType,
            message: getErrorText$2(errorType, errorTexts),
        },
        valueAsDate: isDate ? valueAsDate : null,
        valueAsISO: isDate ? format$1(valueAsDate, dateReturnFormat) : null,
    };
};
const getDefaultFromDate$1 = ({ fromDate, disablePast }) => fromDate || (disablePast ? startOfDay(new Date()) : undefined) || new Date(minDate);
const getDateValidator = ({ disabledDates, fromDate, toDate, disablePast, required, errorTexts, } = {}) => {
    const { errorTexts: defaultErrorTexts } = getDatePickerLocalization({ errorTexts });
    const allowDatesFrom = getDefaultFromDate$1({ fromDate, disablePast });
    const { disabledDates: datePickerDisabledDates, fromDate: datePickerFromDate, toDate: datePickerToDate, } = convertValuesToDate({
        disabledDates,
        fromDate: allowDatesFrom,
        toDate,
    });
    const validate = (value) => {
        const valueAsDate = getValueAsDate(value);
        if (!value && required) {
            return getResult$2({ isValid: false, errorType: DatePickerV2ErrorType.required, errorTexts: defaultErrorTexts });
        }
        if (value && !valueAsDate) {
            return getResult$2({
                isValid: false,
                errorType: DatePickerV2ErrorType.invalidFormat,
                errorTexts: defaultErrorTexts,
            });
        }
        if (valueAsDate && (datePickerDisabledDates === null || datePickerDisabledDates === void 0 ? void 0 : datePickerDisabledDates.length) && isMatch(valueAsDate, datePickerDisabledDates)) {
            return getResult$2({
                isValid: false,
                errorType: DatePickerV2ErrorType.dateDisabled,
                errorTexts: defaultErrorTexts,
                valueAsDate,
            });
        }
        if (valueAsDate && allowDatesFrom && isBefore(valueAsDate, datePickerFromDate)) {
            return getResult$2({
                isValid: false,
                errorType: DatePickerV2ErrorType.notInRangeFrom,
                errorTexts: defaultErrorTexts,
                valueAsDate,
            });
        }
        if (valueAsDate && toDate && isAfter(valueAsDate, datePickerToDate)) {
            return getResult$2({
                isValid: false,
                errorType: DatePickerV2ErrorType.notInRangeTo,
                errorTexts: defaultErrorTexts,
                valueAsDate,
            });
        }
        return getResult$2({ isValid: true, valueAsDate });
    };
    const isValid = (value) => validate(value).isValid;
    return {
        isValid,
        validate,
    };
};

function CalendarNavigation({ showDropdowns, captionId, }) {
    const { classNames, disabled, fromDate, labels: { labelPrevious, labelNext }, locale, onMonthChange, styles, toDate, } = useDayPicker();
    const { previousMonth, nextMonth, goToMonth, currentMonth: currentDisplayMonth } = useNavigation();
    const showNavDropdowns = showDropdowns && !!fromDate && !!toDate;
    const disabledDates = Array.isArray(disabled) ? disabled : [disabled];
    const disabledBefore = disabledDates.find((obj) => isDateBeforeType(obj));
    const disabledAfter = disabledDates.find((obj) => isDateAfterType(obj));
    const shouldDisablePrevious = !previousMonth || (disabledBefore && isBefore(endOfMonth(previousMonth), disabledBefore.before));
    const shouldDisableNext = !nextMonth || (disabledAfter && isAfter(nextMonth, disabledAfter.after));
    const previousLabel = labelPrevious(previousMonth, { locale });
    const nextLabel = labelNext(nextMonth, { locale });
    const previousClassName = [classNames.nav_button, classNames.nav_button_previous].join(" ");
    const nextClassName = [classNames.nav_button, classNames.nav_button_next].join(" ");
    const handleMonthChange = (month) => {
        goToMonth(month);
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(month);
    };
    return (React.createElement("div", { className: classNames.caption, style: styles.caption },
        showNavDropdowns ? (React.createElement(CaptionDropdowns, { displayMonth: currentDisplayMonth, id: captionId })) : (React.createElement(CaptionLabel, { displayMonth: currentDisplayMonth, id: captionId })),
        React.createElement("div", { className: classNames.nav, style: styles.nav },
            React.createElement(Button, { "aria-disabled": shouldDisablePrevious, "aria-label": previousLabel, className: previousClassName, disabled: shouldDisablePrevious, onClick: () => handleMonthChange(previousMonth) },
                React.createElement(IconLeft, { className: clsx("kds-date-picker-v2__nav-icon", classNames.nav_icon), style: styles.nav_icon })),
            React.createElement(Button, { "aria-disabled": shouldDisableNext, "aria-label": nextLabel, className: nextClassName, disabled: shouldDisableNext, onClick: () => handleMonthChange(nextMonth) },
                React.createElement(IconRight, { className: clsx("kds-date-picker-v2__nav-icon", classNames.nav_icon), style: styles.nav_icon })))));
}

function CalendarFooter({ labelCurrentDate, labelClearDate, ariaStatusClearDate, }) {
    const { onMonthChange, onSelect } = useDayPicker();
    const { goToMonth } = useNavigation();
    const { focus } = useFocusContext();
    const currentDate = new Date();
    const liveArea = React.useRef();
    const liveAreaTimeout = 500;
    const handleOnClear = () => {
        onSelect(undefined, undefined, undefined, undefined);
        if (labelClearDate && liveArea.current) {
            liveArea.current.textContent = ariaStatusClearDate;
        }
        if (labelClearDate) {
            setTimeout(() => {
                if (liveArea.current) {
                    liveArea.current.textContent = "";
                }
            }, liveAreaTimeout);
        }
    };
    return (React.createElement("div", { className: "kds-flex kds-justify-between" },
        React.createElement(Button$1, { onClick: () => {
                goToMonth(currentDate);
                onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(currentDate);
                focus(currentDate);
            }, small: true, className: "kds-mt-3", appearance: "ghost" }, labelCurrentDate),
        labelClearDate && (React.createElement(React.Fragment, null,
            React.createElement(Button$1, { onClick: handleOnClear, small: true, className: "kds-mt-3", appearance: "ghost" }, labelClearDate),
            React.createElement("div", { "aria-live": "polite", className: "kds-sr-only", ref: liveArea, role: "status" })))));
}

const getRangeProps = ({ fromDateFromProps, toDateFromProps, disabled, selected, mode }) => {
    let fromDate = fromDateFromProps;
    let toDate = toDateFromProps;
    if (mode === "range" && disabled) {
        const { from, to } = selected;
        fromDate = from || to ? getAllowedMinDate(from || to, disabled) : fromDateFromProps;
        toDate = from || to ? getAllowedMaxDate(to || from, disabled) : toDateFromProps;
    }
    return { fromDate, toDate };
};
const Calendar = React.forwardRef(({ ariaLabelWeekNumber, calendarClassName, ariaStatusClearDate, context, defaultMonth, disabled, fixedCalendarHeight, fromDate: fromDateFromProps, isOpen, labelClearDate, labelCloseCalendar, labelGoToCurrentDay, labels, locale, mode, onSelect, onToggle, refs, selected, showDropdownNavigation, showWeekNumbers, strategy, toDate: toDateFromProps, x, y, }, ref) => {
    const singleProps = {
        onSelect: onSelect,
        selected: selected,
        mode: "single",
    };
    const rangeProps = {
        onSelect: onSelect,
        selected: selected,
        mode: "range",
    };
    const showDropdowns = showDropdownNavigation && !!(fromDateFromProps && toDateFromProps);
    const { fromDate, toDate } = getRangeProps({ fromDateFromProps, toDateFromProps, disabled, selected, mode });
    return (React.createElement("div", { className: clsx("kds-date-picker-v2__calendar-container", { "kds-block": isOpen, "kds-hidden": !isOpen }), ref: ref }, isOpen && (React.createElement(FloatingFocusManager, { context: context },
        React.createElement("div", { className: clsx("kds-date-picker-v2__calendar", calendarClassName), onKeyUp: (e) => {
                if (isEsc(e)) {
                    return onToggle(false);
                }
            }, ref: refs.setFloating, style: {
                position: strategy,
                top: y !== null && y !== void 0 ? y : 0,
                left: x !== null && x !== void 0 ? x : 0,
            } },
            React.createElement(DayPicker, Object.assign({ components: {
                    Caption: ({ id }) => React.createElement(CalendarNavigation, { showDropdowns: showDropdowns, captionId: id }),
                    Day: (props) => React.createElement(CalendarDay, Object.assign({}, props)),
                    Row: (props) => React.createElement(CalendarRow, Object.assign({}, props)),
                    WeekNumber: ({ number }) => (React.createElement(React.Fragment, null,
                        React.createElement("span", { className: "kds-sr-only" }, ariaLabelWeekNumber),
                        React.createElement("span", { className: "rdp-weeknumber" }, number))),
                }, defaultMonth: defaultMonth, disabled: disabled, fixedWeeks: fixedCalendarHeight, footer: React.createElement(CalendarFooter, { labelCurrentDate: labelGoToCurrentDay, labelClearDate: labelClearDate, ariaStatusClearDate: ariaStatusClearDate }), fromDate: fromDate, initialFocus: true, labels: labels, locale: locale, showOutsideDays: true, showWeekNumber: showWeekNumbers, toDate: toDate }, (mode === "range" ? rangeProps : singleProps))),
            React.createElement("button", { "aria-label": labelCloseCalendar, className: "kds-date-picker-v2__calendar-close", onClick: () => onToggle(false), type: "button" },
                React.createElement(SvgIconClose, null)))))));
});
Calendar.displayName = "Calendar";

const CalendarButton = React.forwardRef(({ ariaLabel, className, disabled, onClick }, ref) => {
    return (React.createElement(Button$1, { appearance: "outline", "aria-label": ariaLabel, disabled: disabled, onClick: onClick, ref: ref, type: "button", className: clsx("kds-date-picker-v2__calendar-toggle", className) },
        React.createElement(SvgIconCalendar, null)));
});
CalendarButton.displayName = "CalendarButton";

const DatePickerInput = React.forwardRef(function DatePickerInput({ calendarDefaultMonth, defaultValue, descriptionIds, disabled, disabledDates, fixedCalendarHeight, fromDate, id, invalid, localization, onBlur, onChange, onError, onSelect, placeholder, required, showDropdownNavigation = true, showLeadingZeros, showWeekNumbers, shouldSetMaxWidth, size = "md", toDate, inputTestId, value: valueFromProps, }, ref) {
    const initialSelectedValue = getInitialSelectedValue(defaultValue, valueFromProps);
    const calendarContainerRef = React.useRef();
    const dateDisplayFormat = getDateDisplayFormat(showLeadingZeros);
    const previousValue = React.useRef(valueFromProps);
    const [isOpen, setIsOpen] = React.useState(false);
    const [inputValue, setInputValue] = React.useState(defaultValue ? format$1(defaultValue, dateDisplayFormat) : "");
    const [selectedValue, setSelectedValue] = React.useState(initialSelectedValue);
    const defaultMonth = calendarDefaultMonth || selectedValue || undefined;
    const isFirstRender = useIsFirstRender();
    const value = valueFromProps || inputValue;
    const _a = getDatePickerLocalization(localization), { ariaLabelWeekNumber, ariaStatusClearDate, errorTexts, labelClearDate, labelCloseCalendar, labelToggleCalendar, labelSelected, labelGoToCurrentDay, locale } = _a, labels = __rest$1(_a, ["ariaLabelWeekNumber", "ariaStatusClearDate", "errorTexts", "labelClearDate", "labelCloseCalendar", "labelToggleCalendar", "labelSelected", "labelGoToCurrentDay", "locale"]);
    const selectionDescription = selectedValue && !invalid ? `, ${labelSelected} ${format$1(selectedValue, dateDisplayFormat)}` : "";
    const calendarButtonAriaLabel = `${labelToggleCalendar}${selectionDescription}`;
    const { disabledDates: datePickerDisabledDates } = convertValuesToDate({ disabledDates });
    const { validate } = getDateValidator({
        disabledDates,
        fromDate,
        toDate,
        required,
        errorTexts,
    });
    const { x, y, refs, strategy, context } = useFloating({
        open: isOpen,
        onOpenChange: setIsOpen,
        whileElementsMounted: autoUpdate,
        middleware: [offset(10), flip(), shift({ padding: 8 })],
    });
    useOnClickOutside(calendarContainerRef, (e) => {
        const toggleRef = refs.reference;
        if (!isOpen || (toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current.contains(e.target)))
            return;
        return setIsOpen(false);
    });
    React.useEffect(() => {
        if (isFirstRender || previousValue.current === valueFromProps)
            return;
        const validationResult = validate(valueFromProps);
        setSelectedValue(validationResult.isValid ? validationResult.valueAsDate : undefined);
        setInputValue(valueFromProps);
        onChange === null || onChange === void 0 ? void 0 : onChange(valueFromProps, validationResult);
        previousValue.current = valueFromProps;
        if (!validationResult.isValid) {
            onError === null || onError === void 0 ? void 0 : onError(valueFromProps, validationResult);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [isFirstRender, valueFromProps]);
    function handleRef(element) {
        if (typeof ref === "function") {
            ref(element);
        }
        else if (ref) {
            ref.current = element;
        }
    }
    function handleCalendarDateSelect(value) {
        const validationResult = validate(value);
        const displayValue = validationResult.isValid && validationResult.valueAsDate
            ? format$1(validationResult.valueAsDate, dateDisplayFormat)
            : "";
        setSelectedValue(validationResult.valueAsDate);
        setInputValue(displayValue);
        onSelect === null || onSelect === void 0 ? void 0 : onSelect(displayValue, validationResult);
        onChange === null || onChange === void 0 ? void 0 : onChange(displayValue, validationResult);
        previousValue.current = displayValue;
        if (value) {
            setIsOpen(false);
        }
    }
    function handleCalendarToggle() {
        setIsOpen(!isOpen);
    }
    function updateValidDateValue(value) {
        const validationResult = validate(value);
        const displayValue = validationResult.valueAsDate ? format$1(validationResult.valueAsDate, dateDisplayFormat) : "";
        if (validationResult.valueAsDate && previousValue.current !== displayValue) {
            previousValue.current = displayValue;
            setInputValue(displayValue);
            onChange === null || onChange === void 0 ? void 0 : onChange(displayValue, validationResult);
        }
        if (!validationResult.isValid) {
            onError === null || onError === void 0 ? void 0 : onError(value, validationResult);
        }
    }
    function handleKeyDown(e) {
        if (isEnter(e)) {
            e.preventDefault();
            updateValidDateValue(e.target.value);
        }
    }
    function handleOnBlur(e) {
        updateValidDateValue(e.target.value);
        onBlur === null || onBlur === void 0 ? void 0 : onBlur(e, validate(e.target.value));
    }
    function handleOnChange(e) {
        if (e.target.validity.patternMismatch)
            return;
        const validationResult = validate(e.target.value);
        setSelectedValue(validationResult.isValid ? validationResult.valueAsDate : undefined);
        setInputValue(e.target.value);
        onChange === null || onChange === void 0 ? void 0 : onChange(e.target.value, validationResult);
        previousValue.current = e.target.value;
        if (!validationResult.isValid) {
            onError === null || onError === void 0 ? void 0 : onError(e.target.value, validationResult);
        }
    }
    return (React.createElement("div", { className: "kds-date-picker-v2__input-wrapper" },
        React.createElement(Input, { addonAfter: React.createElement(CalendarButton, { ariaLabel: calendarButtonAriaLabel, disabled: disabled, onClick: handleCalendarToggle, ref: refs.setReference }), "aria-describedby": descriptionIds, disabled: disabled, id: id, size: size, invalid: invalid, onBlur: handleOnBlur, onChange: handleOnChange, onKeyDown: handleKeyDown, pattern: inputPattern, placeholder: placeholder, maxLength: 10, ref: handleRef, required: required, type: "text", className: clsx("kds-date-picker-v2__input", { "kds-date-picker-v2__input--confined": shouldSetMaxWidth }), value: value, "data-testid": inputTestId }),
        React.createElement(Calendar, { ariaLabelWeekNumber: ariaLabelWeekNumber, ariaStatusClearDate: ariaStatusClearDate, context: context, defaultMonth: defaultMonth, disabled: datePickerDisabledDates, fixedCalendarHeight: fixedCalendarHeight, fromDate: fromDate, isOpen: isOpen, labelClearDate: labelClearDate, labelCloseCalendar: labelCloseCalendar, labelGoToCurrentDay: labelGoToCurrentDay, labels: labels, locale: locale, mode: "single", onSelect: handleCalendarDateSelect, onToggle: handleCalendarToggle, ref: calendarContainerRef, refs: refs, selected: selectedValue, showDropdownNavigation: showDropdownNavigation, showWeekNumbers: showWeekNumbers, strategy: strategy, toDate: toDate, x: x, y: y })));
});

/* eslint-disable max-lines-per-function */
/**
 * Ref-prop välitetään komponentin input-elementille.
 */
const DatePickerV2 = React.forwardRef(function DatePickerV2({ calendarDefaultMonth, className, defaultValue, disabled, disabledDates, disablePast, errorText, fixedCalendarHeight = true, fromDate, helpText, id, infoText, inputTestId, inputWidth, invalid = false, labelText, leftCol, localization, onBlur, onChange, onError, onSelect, placeholder = "pp.kk.vvvv", required = false, requiredLabel, showDropdownNavigation, showLeadingZeros = true, showWeekNumbers, size = "md", testId, toDate, value, }, ref) {
    const generatedId = React.useId();
    const inputId = id || generatedId;
    const errorTextId = `${inputId}-error-text`;
    const helpTextId = `${inputId}-help-text`;
    const infoTextId = `${inputId}-info-text`;
    const allowDatesFrom = fromDate || (disablePast ? startOfDay(new Date()) : undefined) || new Date(minDate);
    const { calendarDefaultMonth: datePickerDefaultMonth, defaultValue: datePickerDefaultValue, fromDate: datePickerFromDate, toDate: datePickerToDate, } = convertValuesToDate({
        calendarDefaultMonth,
        defaultValue,
        fromDate: allowDatesFrom,
        toDate,
    });
    const valueProps = {
        calendarDefaultMonth: datePickerDefaultMonth,
        defaultValue: datePickerDefaultValue,
        fromDate: datePickerFromDate,
        toDate: datePickerToDate,
        disabledDates,
        value,
    };
    const datePickerInputProps = Object.assign({ descriptionIds: getDescriptionIds({
            helpText,
            helpTextId,
            infoText,
            infoTextId,
            errorText,
            errorTextId,
            invalid,
        }), disabled,
        fixedCalendarHeight, id: inputId, invalid,
        localization,
        onBlur,
        onChange,
        onError,
        onSelect,
        placeholder,
        required,
        ref,
        showDropdownNavigation,
        showLeadingZeros,
        showWeekNumbers, shouldSetMaxWidth: !inputWidth, size,
        inputTestId }, valueProps);
    const labelAndHelpText = (React.createElement(React.Fragment, null,
        labelText && (React.createElement(InputLabel, { center: !!leftCol, required: required, requiredLabel: requiredLabel, htmlFor: inputId }, labelText)),
        helpText && React.createElement(InputText, { id: helpTextId }, helpText)));
    const mainContent = (React.createElement(React.Fragment, null,
        errorText && invalid && (React.createElement(InputText, { error: true, id: errorTextId }, errorText)),
        inputWidth ? (React.createElement(Row$1, { gx: 2 }, inputWidth(React.createElement(DatePickerInput, Object.assign({}, datePickerInputProps))))) : (React.createElement(DatePickerInput, Object.assign({}, datePickerInputProps))),
        infoText && (React.createElement(InputText, { id: infoTextId, info: true, className: "kds-mt-2" }, infoText))));
    return (React.createElement(InputGroup, { "data-testid": testId, as: "div", row: !!leftCol, className: clsx("kds-date-picker-v2", className) }, leftCol ? (React.createElement(React.Fragment, null,
        leftCol(labelAndHelpText),
        React.createElement(Column, null, mainContent))) : (React.createElement(React.Fragment, null,
        labelAndHelpText,
        mainContent))));
});

/* eslint-disable max-lines-per-function */
/* eslint-disable max-lines */
const getErrorText$1 = ({ errorType, type, fromErrorTexts, toErrorTexts, }) => {
    const errorTextsByType = type === DateRangePickerV2InputType.from ? fromErrorTexts : toErrorTexts;
    return (errorTextsByType === null || errorTextsByType === void 0 ? void 0 : errorTextsByType[errorType]) || "";
};
const getDefaultFromDate = ({ fromDate, disablePast }) => fromDate || (disablePast ? startOfDay(new Date()) : undefined) || new Date(minDate);
const getRangeResult = ({ isValid, rangeErrorTexts, }) => {
    return {
        isValid: isValid,
        error: {
            type: isValid ? null : DateRangePickerV2ErrorType.invalidRange,
            message: isValid ? "" : rangeErrorTexts.invalidRange,
        },
    };
};
const getResult$1 = ({ isValid, errorType = null, type, valueAsDate, fromErrorTexts, toErrorTexts, }) => {
    const isDate = isValidDate(valueAsDate);
    return {
        isValid,
        error: {
            type: errorType,
            message: getErrorText$1({
                errorType,
                type,
                fromErrorTexts,
                toErrorTexts,
            }),
        },
        valueAsDate: isDate ? valueAsDate : null,
        valueAsISO: isDate ? format$1(valueAsDate, dateReturnFormat) : null,
    };
};
const getRequired = ({ from, to, required, fromRequired, fromErrorTexts, toErrorTexts, }) => {
    let fromResult, toResult;
    if ((!from && required) || (!from && fromRequired)) {
        fromResult = getResult$1({
            isValid: false,
            errorType: DateRangePickerV2ErrorType.required,
            type: DateRangePickerV2InputType.from,
            fromErrorTexts,
            toErrorTexts,
        });
    }
    if (!to && required) {
        toResult = getResult$1({
            isValid: false,
            errorType: DateRangePickerV2ErrorType.required,
            type: DateRangePickerV2InputType.to,
            fromErrorTexts,
            toErrorTexts,
        });
    }
    return { fromResult, toResult };
};
const getInvalidRelation = ({ fromValueAsDate, toValueAsDate, fromErrorTexts, toErrorTexts, }) => {
    let fromResult, toResult;
    if (fromValueAsDate && toValueAsDate && !isRelationValid(fromValueAsDate, toValueAsDate)) {
        fromResult = getResult$1({
            isValid: false,
            errorType: DateRangePickerV2ErrorType.invalidRelation,
            type: DateRangePickerV2InputType.from,
            fromErrorTexts,
            toErrorTexts,
            valueAsDate: fromValueAsDate,
        });
        toResult = getResult$1({
            isValid: false,
            errorType: DateRangePickerV2ErrorType.invalidRelation,
            type: DateRangePickerV2InputType.to,
            fromErrorTexts,
            toErrorTexts,
            valueAsDate: toValueAsDate,
        });
    }
    return { fromResult, toResult };
};
const getDateDisabled = ({ fromValueAsDate, toValueAsDate, disabledDates, fromErrorTexts, toErrorTexts, type, }) => {
    let result;
    const valueAsDate = type === DateRangePickerV2InputType.from ? fromValueAsDate : toValueAsDate;
    const hasValueAndRules = valueAsDate && disabledDates && disabledDates.length;
    if (hasValueAndRules && isMatch(valueAsDate, disabledDates)) {
        return getResult$1({
            isValid: false,
            errorType: DateRangePickerV2ErrorType.dateDisabled,
            fromErrorTexts,
            toErrorTexts,
            valueAsDate,
            type,
        });
    }
    if (hasValueAndRules) {
        const allowedMaxDate = fromValueAsDate && getAllowedMaxDate(fromValueAsDate, disabledDates);
        const allowedMinDate = toValueAsDate && getAllowedMinDate(toValueAsDate, disabledDates);
        if ((allowedMaxDate && toValueAsDate && toValueAsDate.getTime() > allowedMaxDate.getTime()) ||
            (allowedMinDate && fromValueAsDate && fromValueAsDate.getTime() < allowedMinDate.getTime())) {
            return getResult$1({
                isValid: false,
                errorType: DateRangePickerV2ErrorType.dateDisabled,
                fromErrorTexts,
                toErrorTexts,
                valueAsDate,
                type,
            });
        }
    }
    return result;
};
const getNotInRange = ({ valueAsDate, fromDate, toDate, fromErrorTexts, toErrorTexts, type, }) => {
    let result;
    if (valueAsDate && fromDate && isBefore(valueAsDate, fromDate)) {
        result = getResult$1({
            isValid: false,
            type,
            errorType: DateRangePickerV2ErrorType.notInRangeFrom,
            fromErrorTexts,
            toErrorTexts,
            valueAsDate,
        });
    }
    if (!result && valueAsDate && toDate && isAfter(valueAsDate, toDate)) {
        result = getResult$1({
            isValid: false,
            type,
            errorType: DateRangePickerV2ErrorType.notInRangeTo,
            fromErrorTexts,
            toErrorTexts,
            valueAsDate,
        });
    }
    return result;
};
const getDateRangeValidator = ({ disabledDates, fromDate, toDate, required, fromRequired, disablePast, rangeErrorTexts, fromErrorTexts, toErrorTexts, } = {}) => {
    const { rangeErrorTexts: defaultRangeErrorTexts, fromErrorTexts: defaultFromErrorTexts, toErrorTexts: defaultToErrorTexts, } = getDateRangePickerLocalization({ rangeErrorTexts, fromErrorTexts, toErrorTexts });
    const allowDatesFrom = getDefaultFromDate({ fromDate, disablePast });
    const { disabledDates: datePickerDisabledDates, fromDate: datePickerFromDate, toDate: datePickerToDate, } = convertValuesToDate({
        disabledDates,
        fromDate: allowDatesFrom,
        toDate,
    });
    const validate = ({ from, to }, field) => {
        const fromValueAsDate = getValueAsDate(from);
        const toValueAsDate = getValueAsDate(to);
        let toResult;
        let fromResult;
        // required
        ({ fromResult, toResult } = getRequired({
            from,
            to,
            required,
            fromRequired,
            fromErrorTexts: defaultFromErrorTexts,
            toErrorTexts: defaultToErrorTexts,
        }));
        // invalid format
        if (!fromResult && from && !fromValueAsDate) {
            fromResult = getResult$1({
                isValid: false,
                errorType: DateRangePickerV2ErrorType.invalidFormat,
                type: DateRangePickerV2InputType.from,
                fromErrorTexts: defaultFromErrorTexts,
                toErrorTexts: defaultToErrorTexts,
            });
        }
        if (!toResult && to && !toValueAsDate) {
            toResult = getResult$1({
                isValid: false,
                errorType: DateRangePickerV2ErrorType.invalidFormat,
                type: DateRangePickerV2InputType.to,
                fromErrorTexts: defaultFromErrorTexts,
                toErrorTexts: defaultToErrorTexts,
            });
        }
        // from date not in range
        if (!fromResult) {
            fromResult = getNotInRange({
                valueAsDate: fromValueAsDate,
                fromDate: datePickerFromDate,
                toDate: datePickerToDate,
                type: DateRangePickerV2InputType.from,
                fromErrorTexts: defaultFromErrorTexts,
                toErrorTexts: defaultToErrorTexts,
            });
        }
        // to date not in range
        if (!toResult) {
            toResult = getNotInRange({
                valueAsDate: toValueAsDate,
                fromDate: datePickerFromDate,
                toDate: datePickerToDate,
                type: DateRangePickerV2InputType.to,
                fromErrorTexts: defaultFromErrorTexts,
                toErrorTexts: defaultToErrorTexts,
            });
        }
        // disabled dates
        if (!fromResult) {
            fromResult = getDateDisabled({
                fromErrorTexts: defaultFromErrorTexts,
                toErrorTexts: defaultToErrorTexts,
                disabledDates: datePickerDisabledDates,
                type: DateRangePickerV2InputType.from,
                fromValueAsDate,
                toValueAsDate,
            });
        }
        if (!toResult) {
            toResult = getDateDisabled({
                fromErrorTexts: defaultFromErrorTexts,
                toErrorTexts: defaultToErrorTexts,
                disabledDates: datePickerDisabledDates,
                type: DateRangePickerV2InputType.to,
                fromValueAsDate,
                toValueAsDate,
            });
        }
        // invalid relation
        if (!fromResult && !toResult) {
            ({ toResult, fromResult } = getInvalidRelation({
                fromValueAsDate,
                toValueAsDate,
                fromErrorTexts: defaultFromErrorTexts,
                toErrorTexts: defaultToErrorTexts,
            }));
        }
        if (!fromResult) {
            fromResult = getResult$1({
                isValid: true,
                type: DateRangePickerV2InputType.from,
                valueAsDate: fromValueAsDate,
            });
        }
        if (!toResult) {
            toResult = getResult$1({
                isValid: true,
                type: DateRangePickerV2InputType.to,
                valueAsDate: toValueAsDate,
            });
        }
        return {
            range: getRangeResult({
                isValid: fromResult.isValid && toResult.isValid,
                rangeErrorTexts: defaultRangeErrorTexts,
            }),
            from: fromResult,
            to: toResult,
            field,
        };
    };
    const isValid = (value) => {
        const validationResult = validate(value);
        return validationResult.from.isValid && validationResult.to.isValid;
    };
    return {
        isValid,
        validate,
    };
};

const DateRangePickerInput = ({ calendarDefaultMonth, defaultValue, descriptionIds, disabled, disabledDates, fixedCalendarHeight, fromDate, renderInputs, id, invalid, localization, onBlur, onCalendarClose, onChange, onError, onSelect, placeholder, required, fromRequired, showDropdownNavigation = true, showLeadingZeros, showWeekNumbers, shouldSetMaxWidth, size = "md", toDate, fromInputTestId, fromRef, toInputTestId, toRef, value: valueFromProps, }) => {
    const fromInputId = `${id}-from`;
    const toInputId = `${id}-to`;
    const calendarContainerRef = React.useRef();
    const dateDisplayFormat = getDateDisplayFormat(showLeadingZeros);
    const previousValue = React.useRef(valueFromProps);
    const defaultRangeValue = defaultValue && isAllowedRangeValue(defaultValue, fromDate, toDate) && defaultValue;
    const initialSelectedRangeValue = {
        from: getInitialSelectedValue(defaultRangeValue === null || defaultRangeValue === void 0 ? void 0 : defaultRangeValue.from, valueFromProps === null || valueFromProps === void 0 ? void 0 : valueFromProps.from),
        to: getInitialSelectedValue(defaultRangeValue === null || defaultRangeValue === void 0 ? void 0 : defaultRangeValue.to, valueFromProps === null || valueFromProps === void 0 ? void 0 : valueFromProps.to),
    };
    const initialFromInputValue = (defaultRangeValue === null || defaultRangeValue === void 0 ? void 0 : defaultRangeValue.from) ? format$1(defaultRangeValue.from, dateDisplayFormat) : "";
    const initialToInputValue = (defaultRangeValue === null || defaultRangeValue === void 0 ? void 0 : defaultRangeValue.to) ? format$1(defaultRangeValue.to, dateDisplayFormat) : "";
    const [isOpen, setIsOpen] = React.useState(false);
    const [fromValue, setFromValue] = React.useState(initialFromInputValue);
    const [toValue, setToValue] = React.useState(initialToInputValue);
    const [selectedRange, setSelectedRange] = React.useState(initialSelectedRangeValue);
    const defaultMonth = calendarDefaultMonth || (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.from) || (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.to) || undefined;
    const isFirstRender = useIsFirstRender();
    const fromInputValue = (valueFromProps === null || valueFromProps === void 0 ? void 0 : valueFromProps.from) || fromValue;
    const toInputValue = (valueFromProps === null || valueFromProps === void 0 ? void 0 : valueFromProps.to) || toValue;
    const _a = getDateRangePickerLocalization(localization), { ariaLabelRangeFrom, ariaLabelRangeTo, ariaLabelWeekNumber, ariaStatusClearDate, rangeErrorTexts, fromErrorTexts, toErrorTexts, labelClearDate, labelCloseCalendar, labelToggleCalendar, labelSelected, labelGoToCurrentDay, locale } = _a, labels = __rest$1(_a, ["ariaLabelRangeFrom", "ariaLabelRangeTo", "ariaLabelWeekNumber", "ariaStatusClearDate", "rangeErrorTexts", "fromErrorTexts", "toErrorTexts", "labelClearDate", "labelCloseCalendar", "labelToggleCalendar", "labelSelected", "labelGoToCurrentDay", "locale"]);
    const fromSelectionDescription = (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.from) && !(invalid === null || invalid === void 0 ? void 0 : invalid.from) ? format$1(selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.from, dateDisplayFormat) : "";
    const toSelectionDescription = (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.to) && !(invalid === null || invalid === void 0 ? void 0 : invalid.to) ? ` - ${format$1(selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.to, dateDisplayFormat)}` : "";
    const selectionDescription = (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.from)
        ? `, ${labelSelected} ${fromSelectionDescription}${toSelectionDescription}`
        : "";
    const calendarButtonAriaLabel = `${labelToggleCalendar}${selectionDescription}`;
    const { disabledDates: datePickerDisabledDates } = convertValuesToDate({ disabledDates });
    const { validate } = getDateRangeValidator({
        disabledDates,
        fromDate,
        toDate,
        fromRequired,
        required,
        rangeErrorTexts,
        fromErrorTexts,
        toErrorTexts,
    });
    const { x, y, refs, strategy, context } = useFloating({
        open: isOpen,
        onOpenChange: setIsOpen,
        whileElementsMounted: autoUpdate,
        middleware: [offset(10), flip(), shift({ padding: 8 })],
    });
    useOnClickOutside(calendarContainerRef, (e) => {
        const toggleRef = refs.reference;
        if (!isOpen || (toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current.contains(e.target)))
            return;
        handleOnCalendarClose();
        return setIsOpen(false);
    });
    function isSameAsPrevious(value) {
        var _a, _b;
        return ((_a = previousValue.current) === null || _a === void 0 ? void 0 : _a.from) === value.from && ((_b = previousValue.current) === null || _b === void 0 ? void 0 : _b.to) === value.to;
    }
    React.useEffect(() => {
        if (isFirstRender || isSameAsPrevious({ from: valueFromProps === null || valueFromProps === void 0 ? void 0 : valueFromProps.from, to: valueFromProps === null || valueFromProps === void 0 ? void 0 : valueFromProps.to }))
            return;
        const validationResult = validate(valueFromProps);
        setSelectedRange({
            from: validationResult.from.isValid ? validationResult.from.valueAsDate : undefined,
            to: validationResult.to.isValid ? validationResult.to.valueAsDate : undefined,
        });
        setFromValue(valueFromProps.from);
        setToValue(valueFromProps.to);
        onChange === null || onChange === void 0 ? void 0 : onChange(valueFromProps, validationResult);
        previousValue.current = valueFromProps;
        if (!validationResult.range.isValid) {
            onError === null || onError === void 0 ? void 0 : onError(valueFromProps, validationResult);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [isFirstRender, valueFromProps]);
    function handleCalendarDateSelect(range) {
        const selectedRange = range || { from: undefined, to: undefined };
        const validationResult = validate(selectedRange);
        const onSelectValue = {
            from: (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.from) ? format$1(selectedRange.from, dateDisplayFormat) : "",
            to: (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.to) ? format$1(selectedRange.to, dateDisplayFormat) : "",
        };
        setSelectedRange(selectedRange);
        setFromValue(onSelectValue.from);
        setToValue(onSelectValue.to);
        onSelect === null || onSelect === void 0 ? void 0 : onSelect(onSelectValue, validationResult);
        onChange === null || onChange === void 0 ? void 0 : onChange(onSelectValue, validationResult);
        previousValue.current = onSelectValue;
    }
    function handleCalendarToggle() {
        if (isOpen) {
            handleOnCalendarClose();
        }
        setIsOpen(!isOpen);
    }
    function handleOnCalendarClose() {
        onCalendarClose === null || onCalendarClose === void 0 ? void 0 : onCalendarClose({ from: fromInputValue, to: toInputValue }, validate({ from: fromInputValue, to: toInputValue }));
    }
    function updateValidDateValue(range, type) {
        const validationResult = validate(range, type);
        const fromDisplayValue = validationResult.from.valueAsDate
            ? format$1(validationResult.from.valueAsDate, dateDisplayFormat)
            : range.from;
        const toDisplayValue = validationResult.to.valueAsDate
            ? format$1(validationResult.to.valueAsDate, dateDisplayFormat)
            : range.to;
        if ((validationResult.from.valueAsDate || validationResult.to.valueAsDate) &&
            !isSameAsPrevious({ from: fromDisplayValue, to: toDisplayValue })) {
            previousValue.current = {
                from: fromDisplayValue,
                to: toDisplayValue,
            };
            setFromValue(fromDisplayValue);
            setToValue(toDisplayValue);
            onChange === null || onChange === void 0 ? void 0 : onChange({
                from: fromDisplayValue,
                to: toDisplayValue,
            }, validationResult);
        }
        if (!validationResult.range.isValid) {
            onError === null || onError === void 0 ? void 0 : onError(range, validationResult);
        }
    }
    function getValueByType(value, type) {
        return type === DateRangePickerV2InputType.from
            ? {
                from: value,
                to: toInputValue,
            }
            : {
                from: fromInputValue,
                to: value,
            };
    }
    function handleKeyDown(e, type) {
        if (isEnter(e)) {
            e.preventDefault();
            updateValidDateValue(getValueByType(e.target.value, type), type);
        }
    }
    function handleOnBlur(e, type) {
        const valueByType = getValueByType(e.target.value, type);
        updateValidDateValue(valueByType, type);
        onBlur === null || onBlur === void 0 ? void 0 : onBlur(e, validate(valueByType, type));
    }
    function handleOnChange(e, type) {
        if (e.target.validity.patternMismatch)
            return;
        const valueByType = getValueByType(e.target.value, type);
        const validationResult = validate(valueByType, type);
        setSelectedRange({
            from: validationResult.from.isValid ? validationResult.from.valueAsDate : undefined,
            to: validationResult.to.isValid ? validationResult.to.valueAsDate : undefined,
        });
        if (type === DateRangePickerV2InputType.from) {
            setFromValue(e.target.value);
        }
        if (type === DateRangePickerV2InputType.to) {
            setToValue(e.target.value);
        }
        onChange === null || onChange === void 0 ? void 0 : onChange(valueByType, validationResult);
        previousValue.current = valueByType;
        if (!validationResult.range.isValid) {
            onError === null || onError === void 0 ? void 0 : onError(valueByType, validationResult);
        }
    }
    function handleFromRef(element) {
        if (typeof fromRef === "function") {
            fromRef(element);
        }
        else if (fromRef) {
            fromRef.current = element;
        }
    }
    function handleToRef(element) {
        if (typeof toRef === "function") {
            toRef(element);
        }
        else if (toRef) {
            toRef.current = element;
        }
    }
    const getInputPropsByType = (type) => {
        const isFrom = type === DateRangePickerV2InputType.from;
        const inputCSSClass = clsx(`kds-date-picker-v2__input kds-date-picker-v2__input--range kds-date-picker-v2__input--${type}`, {
            "kds-date-picker-v2__input--confined": shouldSetMaxWidth,
        });
        return {
            "aria-describedby": descriptionIds,
            "aria-label": isFrom ? ariaLabelRangeFrom : ariaLabelRangeTo,
            className: inputCSSClass,
            disabled,
            id: isFrom ? fromInputId : toInputId,
            invalid: invalid === null || invalid === void 0 ? void 0 : invalid[type],
            maxLength: 10,
            onBlur: (e) => handleOnBlur(e, type),
            onChange: (e) => handleOnChange(e, type),
            onKeyDown: (e) => handleKeyDown(e, type),
            pattern: inputPattern,
            placeholder,
            ref: isFrom ? handleFromRef : handleToRef,
            required: required || (isFrom && fromRequired),
            size,
            testId: isFrom ? fromInputTestId : toInputTestId,
            type: "text",
            value: isFrom ? fromInputValue : toInputValue,
        };
    };
    const inputWrapperCSSClass = clsx("kds-date-picker-v2__input-wrapper kds-date-picker-v2__input-wrapper--range", {
        "kds-date-picker-v2__input-wrapper--range-default": !renderInputs,
    });
    const calendarCSSClass = clsx("kds-date-picker-v2__calendar", {
        [`kds-date-picker-v2__calendar--range-start-selected`]: selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.from,
        [`kds-date-picker-v2__calendar--range-end-selected`]: selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.to,
    });
    const calendarToggleCSSClass = clsx({
        [`kds-date-picker-v2__calendar-toggle--${size}`]: size && size !== "md",
    });
    const calendarButton = (React.createElement(CalendarButton, { ariaLabel: calendarButtonAriaLabel, disabled: disabled, onClick: handleCalendarToggle, ref: refs.setReference, className: calendarToggleCSSClass }));
    return (React.createElement("div", { className: inputWrapperCSSClass },
        typeof renderInputs === "function" ? (renderInputs({
            ToInput: Input,
            FromInput: Input,
            fromInputProps: getInputPropsByType(DateRangePickerV2InputType.from),
            toInputProps: getInputPropsByType(DateRangePickerV2InputType.to),
            calendarButton,
        })) : (React.createElement(React.Fragment, null,
            React.createElement("span", { className: "kds-date-picker-v2__input-block" },
                React.createElement(Input, Object.assign({}, getInputPropsByType(DateRangePickerV2InputType.from))),
                React.createElement("span", { className: "kds-date-picker-v2__input-separator" }, "-")),
            React.createElement("span", { className: "kds-date-picker-v2__input-block" },
                React.createElement(Input, Object.assign({}, getInputPropsByType(DateRangePickerV2InputType.to))),
                calendarButton))),
        React.createElement(Calendar, { ariaStatusClearDate: ariaStatusClearDate, ariaLabelWeekNumber: ariaLabelWeekNumber, calendarClassName: calendarCSSClass, context: context, defaultMonth: defaultMonth, disabled: datePickerDisabledDates, fixedCalendarHeight: fixedCalendarHeight, fromDate: fromDate, isOpen: isOpen, labelClearDate: labelClearDate, labelCloseCalendar: labelCloseCalendar, labelGoToCurrentDay: labelGoToCurrentDay, labels: labels, locale: locale, mode: "range", onSelect: handleCalendarDateSelect, onToggle: handleCalendarToggle, ref: calendarContainerRef, refs: refs, selected: selectedRange, showDropdownNavigation: showDropdownNavigation, showWeekNumbers: showWeekNumbers, strategy: strategy, toDate: toDate, x: x, y: y })));
};

/* eslint-disable max-lines-per-function */
/**
 * fromRef ja toRef -propit välitetään komponentin input-elementeille.
 */
const DateRangePickerV2 = ({ calendarDefaultMonth, className, defaultValue, disabled, disabledDates, disablePast, errorText, fixedCalendarHeight = true, fromDate, fromInputTestId, fromRef, helpText, infoText, id, invalid, labelText, leftCol, localization, onBlur, onCalendarClose, onChange, onError, onSelect, placeholder = "pp.kk.vvvv", renderInputs, required = false, fromRequired = false, requiredLabel, showDropdownNavigation, showLeadingZeros = true, showWeekNumbers, size = "md", testId, toDate, toInputTestId, toRef, value, }) => {
    const generatedId = React.useId();
    const inputId = id || generatedId;
    const errorTextId = `${inputId}-error-text`;
    const helpTextId = `${inputId}-help-text`;
    const infoTextId = `${inputId}-info-text`;
    const allowDatesFrom = fromDate || (disablePast ? startOfDay(new Date()) : undefined) || new Date(minDate);
    const { calendarDefaultMonth: datePickerDefaultMonth, defaultRangeValue: datePickerDefaultRangeValue, fromDate: datePickerFromDate, toDate: datePickerToDate, } = convertValuesToDate({
        calendarDefaultMonth,
        defaultRangeValue: defaultValue,
        fromDate: allowDatesFrom,
        toDate,
    });
    const valueProps = {
        calendarDefaultMonth: datePickerDefaultMonth,
        defaultValue: datePickerDefaultRangeValue,
        fromDate: datePickerFromDate,
        toDate: datePickerToDate,
        disabledDates,
        value,
    };
    const dateRangePickerInputProps = Object.assign({ descriptionIds: getDescriptionIds({
            helpText,
            helpTextId,
            infoText,
            infoTextId,
            errorText,
            errorTextId,
            invalid: invalid && (invalid.from || invalid.to),
        }), disabled,
        errorTextId,
        fixedCalendarHeight, id: inputId, invalid,
        localization,
        onBlur,
        onChange,
        onError,
        onSelect,
        onCalendarClose,
        placeholder,
        renderInputs,
        required,
        requiredLabel,
        fromRequired,
        showDropdownNavigation,
        showLeadingZeros,
        showWeekNumbers, shouldSetMaxWidth: !renderInputs, size: size, fromInputTestId,
        fromRef,
        toInputTestId,
        toRef }, valueProps);
    const labelAndHelpText = (React.createElement(React.Fragment, null,
        labelText && (React.createElement(InputLabel, { as: "legend", center: !!leftCol, required: required || fromRequired, requiredLabel: requiredLabel }, labelText)),
        helpText && React.createElement(InputText, { id: helpTextId }, helpText)));
    const mainContent = (React.createElement(React.Fragment, null,
        errorText && invalid && (React.createElement(InputText, { error: true, id: errorTextId }, errorText)),
        React.createElement(DateRangePickerInput, Object.assign({}, dateRangePickerInputProps)),
        infoText && (React.createElement(InputText, { id: infoTextId, info: true, className: "kds-mt-2" }, infoText))));
    return (React.createElement(InputGroup, { "data-testid": testId, as: "fieldset", row: !!leftCol, className: clsx("kds-date-picker-v2", className) }, leftCol ? (React.createElement(React.Fragment, null,
        leftCol(labelAndHelpText),
        React.createElement(Column, null, mainContent))) : (React.createElement(React.Fragment, null,
        labelAndHelpText,
        mainContent))));
};

function DescriptionListItem({ children, className, label, testId }) {
    const cssClass = clsx("kds-description-list__item", className);
    return (React.createElement(Row$1, { as: "li", className: cssClass, testId: testId },
        React.createElement("div", { className: "kds-description-list__item-dt" }, label),
        React.createElement("div", { className: "kds-description-list__item-dd" }, children)));
}

function DescriptionList(_a) {
    var { children, className, columns, labelWidth = "s", items, stack, testId } = _a, attrs = __rest$1(_a, ["children", "className", "columns", "labelWidth", "items", "stack", "testId"]);
    const listId = React.useId();
    const cssClass = clsx("kds-description-list", className, {
        [`kds-description-list--columns-${columns}`]: columns,
        [`kds-description-list--label-${labelWidth}`]: !stack && labelWidth,
        ["kds-description-list--stack"]: stack,
    });
    return (React.createElement("ul", Object.assign({ className: cssClass, "data-testid": testId }, attrs), items
        ? items.map(({ label, value }) => (React.createElement(DescriptionListItem, { key: `${listId}_${label}`, label: label }, value)))
        : children));
}

var DropdownContext = /*#__PURE__*/ React.createContext();

const defaultElement$x = "div";
function Dropdown(_a) {
    var { as, isOpen, onClick, usePortal, children, util, className, testId, placement, useLegacyMenu = false } = _a, attrs = __rest$1(_a, ["as", "isOpen", "onClick", "usePortal", "children", "util", "className", "testId", "placement", "useLegacyMenu"]);
    const dropdownRef = React.useRef(null);
    const Tag = as || defaultElement$x;
    const contextValues = React.useMemo(() => ({
        isOpen,
        usePortal,
        onClick,
        toggleElRef: null,
        menuElRef: null,
        useLegacyMenu,
    }), [isOpen, usePortal, onClick, useLegacyMenu]);
    useIsomorphicLayoutEffect$1(() => {
        const triggerRef = contextValues.toggleElRef.current;
        const floatingRef = contextValues.menuElRef.current;
        if (!isOpen || !triggerRef || !floatingRef)
            return;
        autoUpdate(triggerRef, floatingRef, () => computePosition(triggerRef, floatingRef, {
            placement: placement,
            strategy: "absolute",
            middleware: [flip(), shift()],
        }).then(({ x: xPos, y: yPos }) => Object.assign(floatingRef.style, {
            left: `${xPos}px`,
            top: `${yPos}px`,
        })));
    }, [isOpen, contextValues.toggleElRef, contextValues.menuElRef, placement]);
    const handleKeyDown = (e) => {
        var _a, _b, _c;
        const { activeElement } = document;
        if (!isOpen) {
            // Open menu on down-key
            isDown(e) && onClick(e);
            return;
        }
        const focusableChildren = usePortal
            ? [...getFocusableChildren(dropdownRef === null || dropdownRef === void 0 ? void 0 : dropdownRef.current), ...getFocusableChildren((_a = contextValues === null || contextValues === void 0 ? void 0 : contextValues.menuElRef) === null || _a === void 0 ? void 0 : _a.current)]
            : [...getFocusableChildren(dropdownRef === null || dropdownRef === void 0 ? void 0 : dropdownRef.current)];
        const currentIndex = focusableChildren.indexOf(activeElement);
        // Select first item in menu
        // OR select next menu item, if possible
        if ((isTabForward(e) && activeElement === focusableChildren[0]) ||
            (isDown(e) && currentIndex >= 0 && currentIndex !== focusableChildren.length - 1)) {
            e.preventDefault();
            (_b = focusableChildren[currentIndex + 1]) === null || _b === void 0 ? void 0 : _b.focus();
        }
        // Select previous menu item, if possible
        else if (isUp(e) && currentIndex > 1) {
            const prevNode = focusableChildren[currentIndex - 1];
            prevNode === null || prevNode === void 0 ? void 0 : prevNode.focus();
        }
        // Close menu & return focus to toggle button
        else if ((isTabForward(e) && activeElement === focusableChildren[focusableChildren.length - 1]) ||
            (isTabBackward(e) && activeElement === focusableChildren[1]) ||
            isEsc(e)) {
            e.preventDefault();
            (_c = focusableChildren[0]) === null || _c === void 0 ? void 0 : _c.focus();
            onClick(e);
        }
    };
    const classNames = clsx("kds-dropdown", util || className, {
        "kds-dropdown--open": isOpen,
    });
    return (React.createElement(DropdownContext.Provider, { value: contextValues },
        React.createElement(Tag, Object.assign({ "data-testid": testId, className: classNames, ref: dropdownRef, onKeyDown: (e) => {
                if (isEsc(e) || isUp(e) || isDown(e)) {
                    e.preventDefault();
                    e.stopPropagation();
                }
                handleKeyDown(e);
            } }, attrs), children)));
}
Dropdown.defaultProps = {
    as: defaultElement$x,
    placement: "bottom-start",
};

/**
 * @deprecated Will be removed in upcoming releases
 */
const LegacyDropdownMenuContent = ({ items }) => (React.createElement(React.Fragment, null, React.Children.count(items) < 3 ? (React.createElement(React.Fragment, null, items)) : (React.createElement("ul", { className: "kds-dropdown__list" }, React.Children.map(items, (item) => (React.createElement("li", null, item)))))));
function DropdownMenu(_a) {
    var { children, allowFullWidth, testId, util, className } = _a, attrs = __rest$1(_a, ["children", "allowFullWidth", "testId", "util", "className"]);
    const menuRef = React.useRef(null);
    const context = React.useContext(DropdownContext);
    const { isOpen, onClick, usePortal, useLegacyMenu } = context;
    const classNames = clsx("kds-dropdown__menu", util || className, {
        "kds-dropdown__menu--show": isOpen,
        "kds-dropdown__menu--full-width": allowFullWidth,
    });
    // Save current menu ref to context for floating ui
    useIsomorphicLayoutEffect$1(() => {
        context.menuElRef = menuRef;
    }, [isOpen, context]);
    useOnClickOutside(menuRef, (e) => {
        var _a;
        const toggleElement = (_a = context.toggleElRef) === null || _a === void 0 ? void 0 : _a.current;
        if (toggleElement === e.target || toggleElement.contains(e.target)) {
            return;
        }
        isOpen && onClick(e);
    });
    if (!isOpen)
        return null;
    const menuContent = (React.createElement("div", Object.assign({ "data-testid": testId, ref: menuRef, className: classNames }, attrs), useLegacyMenu ? React.createElement(LegacyDropdownMenuContent, { items: children }) : children));
    return usePortal ? React.createElement(Portal, null, menuContent) : menuContent;
}

const defaultElement$w = "a";
function DropdownMenuItem(_a) {
    var { as, active, disabled, heading, divider, iconBefore, iconAfter, util, className, testId, children, href } = _a, attrs = __rest$1(_a, ["as", "active", "disabled", "heading", "divider", "iconBefore", "iconAfter", "util", "className", "testId", "children", "href"]);
    const Tag = as || defaultElement$w;
    if (divider) {
        const dividerClasses = clsx("kds-dropdown__divider", util || className);
        return React.createElement("div", Object.assign({ className: dividerClasses }, attrs));
    }
    if (heading) {
        const headingAs = as !== defaultElement$w ? as : "p";
        const headingClasses = clsx("kds-dropdown__heading", util || className);
        return (React.createElement(Heading, Object.assign({ as: headingAs, size: "category", className: headingClasses }, attrs), children));
    }
    const classNames = clsx(util || className, "kds-dropdown__item", {
        [`kds-dropdown__item--active`]: active,
        [`kds-dropdown__item--disabled`]: disabled && Tag === "a",
    });
    const iconBeforeClassNames = clsx("kds-dropdown__item-icon", { "kds-mr-2": iconBefore });
    const iconAfterClassNames = clsx("kds-dropdown__item-icon", { "kds-ml-2": iconAfter });
    return (React.createElement(Tag, Object.assign({ "data-testid": testId, className: classNames, disabled: Tag === "button" && disabled ? true : undefined, href: Tag === "a" && disabled ? undefined : href }, attrs),
        iconBefore && React.createElement("span", { className: iconBeforeClassNames }, iconBefore),
        React.createElement("span", { className: "kds-dropdown__item-children" }, children),
        iconAfter && React.createElement("span", { className: iconAfterClassNames }, iconAfter)));
}
DropdownMenuItem.defaultProps = {
    as: defaultElement$w,
    active: false,
    disabled: false,
    heading: false,
    divider: false,
};

const SvgLogoKela = (props) => (React__namespace.createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", xmlSpace: "preserve", viewBox: "0 0 272.6 132" }, props),
    React__namespace.createElement("circle", { cx: 242.9, cy: 29.8, r: 29.1, fill: "#fdb913" }),
    React__namespace.createElement("path", { fill: "#fff", d: "M226.8 7.8h5.8v2.6h7.2V7.8h6v2.7h7.2V7.8h5.7l3.8 41.3h-12.6s-.9-10-.9-9.6c.1.3-.9-5.6-6.5-5.2-5.9 0-6.2 5.8-6.2 5.8l-.8 9H223l3.8-41.3z" }),
    React__namespace.createElement("circle", { cx: 242.7, cy: 22.4, r: 6.2, fill: "#fdb913" }),
    React__namespace.createElement("path", { fill: "#004895", d: "m43.8 130.1-26-44.6v44.6H.2V44.6h17.6v39l24.4-39h21.2L36 84.2l30.4 45.9zm40.4-28.3v.5c0 9.7 4.8 15.3 13.3 15.3 5.7 0 10.9-2.1 16-6.3l6.4 9.8c-7.3 5.9-14.9 8.7-23.7 8.7-18.1 0-29.8-12.8-29.8-32.6 0-11.3 2.3-18.8 7.9-25 5.2-5.8 11.4-8.5 19.8-8.5 7.3 0 14.1 2.5 18.2 6.6 5.8 5.9 8.4 14.4 8.4 27.6v3.8H84.2zM103.6 89c0-4.7-.5-7.1-2-9.5-1.6-2.5-3.9-3.7-7.3-3.7-6.3 0-9.8 4.9-9.8 13.7v.2h19.1zm44.9 40.6c-7 0-12.7-3.3-14.6-8.6-1.2-3.2-1.5-5.2-1.5-14.1v-47c0-8.2-.2-13.3-.9-18.9l16.9-3.8c.6 3.4.9 7.5.9 16.4v49.1c0 10.8.1 12.3 1.1 14 .6 1.1 2 1.7 3.3 1.7.6 0 1 0 1.8-.2l2.8 9.8c-2.8.9-6.3 1.6-9.8 1.6m59.6 2.3c-3.8-1.6-6.9-5-8.5-8.2-1.2 1.2-2.6 2.5-3.8 3.3-3.1 2.2-7.5 3.4-12.7 3.4-14 0-21.6-7.1-21.6-19.7 0-14.8 10.2-21.6 30.3-21.6 1.2 0 2.3 0 3.7.1v-2.6c0-7-1.4-9.3-7.4-9.3-5.3 0-11.4 2.6-18.2 7.1l-7-11.8c3.3-2.1 5.8-3.3 10.2-5.2 6.1-2.6 11.4-3.7 17.2-3.7 10.6 0 17.8 3.9 20.3 10.9.9 2.6 1.2 4.6 1.1 11.3l-.4 21.2c-.1 6.9.4 9.8 5.9 14zm-13.6-31.4c-11.4 0-15.4 2.1-15.4 9.6 0 4.9 3.1 8.2 7.3 8.2 3.1 0 6.2-1.6 8.6-4.3l.2-13.5z" })));

const defaultElement$v = "div";
function TitleBar(_a) {
    var { as, children, fluid, logo, title, util, className, testId } = _a, rest = __rest$1(_a, ["as", "children", "fluid", "logo", "title", "util", "className", "testId"]);
    const Tag = as || defaultElement$v;
    const titleBarClassNames = clsx("kds-title-bar", util || className);
    return (React.createElement(Tag, Object.assign({ className: titleBarClassNames, "data-testid": testId }, rest),
        React.createElement(Container, { className: "kds-title-bar__content", fluid: fluid },
            React.createElement("div", { className: "kds-title-bar__branding" },
                logo || React.createElement(SvgLogoKela, { height: "48", width: "83" }),
                title && React.createElement("p", { className: "kds-mt-2 kds-mb-0 kds-font-bold" }, title)),
            children && React.createElement("div", { className: "kds-title-bar__actions" }, children))));
}
TitleBar.defaultProps = {
    as: defaultElement$v,
    util: "",
};

const defaultElement$u = "button";
/**
 * Ref-prop välitetään komponentin renderöimän painikkeen HTML-elementille.
 */
const TitleBarAction = React.forwardRef((_a, ref) => {
    var { as, icon, testId, labelUtil, children, util, className, caret, caretUp } = _a, attrs = __rest$1(_a, ["as", "icon", "testId", "labelUtil", "children", "util", "className", "caret", "caretUp"]);
    const Tag = as || defaultElement$u;
    const isButton = Tag === "button";
    const actionClassNames = clsx("kds-title-bar__action", util || className, {
        "kds-btn--toggle": caret || caretUp,
        "kds-btn--toggle-open": caretUp,
    });
    const labelClassNames = clsx("kds-title-bar__action-label", labelUtil);
    return (React.createElement(Tag, Object.assign({ ref: ref, className: actionClassNames, "data-testid": testId, type: isButton ? "button" : undefined }, attrs),
        icon && React.cloneElement(icon, { size: "s" }),
        children && React.createElement("span", { className: labelClassNames }, children)));
});
TitleBarAction.displayName = "TitleBarAction";
TitleBarAction.defaultProps = {
    as: defaultElement$u,
    util: "",
};

const defaultElement$t = "header";
function MainBarContainer(_a) {
    var { as, children, className, testId } = _a, attrs = __rest$1(_a, ["as", "children", "className", "testId"]);
    const Tag = as || defaultElement$t;
    const mainBarClassNames = clsx("kds-mainbar-container", className);
    return (React.createElement(Tag, Object.assign({ className: mainBarClassNames, "data-testid": testId }, attrs), children));
}

const defaultElement$s = "header";
function MainBar(_a) {
    var { as, children, util, className, testId, stackOnMobile = false, shadow = true } = _a, attrs = __rest$1(_a, ["as", "children", "util", "className", "testId", "stackOnMobile", "shadow"]);
    const Tag = as || defaultElement$s;
    const mainBarClassNames = clsx("kds-mainbar", { "kds-mainbar--stack": stackOnMobile, "kds-mainbar--shadow": shadow }, util || className);
    return (React.createElement(Tag, Object.assign({ className: mainBarClassNames, "data-testid": testId }, attrs), children));
}
MainBar.defaultProps = {
    as: defaultElement$s,
    util: "",
};

const defaultElement$r = "button";
/**
 * Ref-prop välitetään komponentin renderöimän painikkeen HTML-elementille.
 */
const MainBarAction = React.forwardRef((_a, ref) => {
    var { as, icon, testId, labelUtil, children, util, className, caret, caretUp, vAlign } = _a, attrs = __rest$1(_a, ["as", "icon", "testId", "labelUtil", "children", "util", "className", "caret", "caretUp", "vAlign"]);
    const Tag = as || defaultElement$r;
    const isButton = Tag === "button";
    const isMiddle = vAlign === "middle";
    const actionClassNames = clsx("kds-mainbar__action", util || className, {
        "kds-mainbar__action--with-icon": icon,
        "kds-mainbar__action--middle": isMiddle,
        "kds-btn--toggle": caret || caretUp,
        "kds-btn--toggle-open": caretUp,
    });
    const labelClassNames = clsx("kds-mainbar__action-label", labelUtil);
    return (React.createElement(Tag, Object.assign({ ref: ref, className: actionClassNames, "data-testid": testId, type: isButton ? "button" : undefined }, attrs),
        icon &&
            React.cloneElement(icon, {
                size: "s",
                className: clsx("kds-mainbar__action-icon", { "kds-mainbar__action-icon--middle": isMiddle }),
            }),
        children && React.createElement("span", { className: labelClassNames }, children)));
});
MainBarAction.displayName = "MainBarAction";
MainBarAction.defaultProps = {
    as: defaultElement$r,
    util: "",
};

function MainBarActionGroupItem({ children, testId, className, }) {
    return (React.createElement("li", { "data-testid": testId, className: clsx("kds-mainbar__action-group-item", className) }, children));
}

function MainBarActionGroup(_a) {
    var { children, align, testId, util, className, useGroupItems = false } = _a, attrs = __rest$1(_a, ["children", "align", "testId", "util", "className", "useGroupItems"]);
    const groupClassNames = clsx("kds-mainbar__action-group", util || className, {
        "kds-mr-auto": align === "left",
        "kds-ml-auto": align === "right",
        "kds-m-auto": align === "center",
    });
    return (React.createElement("ul", Object.assign({ className: groupClassNames, "data-testid": testId }, attrs),
        !useGroupItems &&
            React.Children.map(children, (child) => React.createElement(MainBarActionGroupItem, null, child)),
        useGroupItems && children));
}
MainBarActionGroup.defaultProps = {
    align: "right",
    util: "",
};

const breakpointMap = {
    xs: parseInt(BREAKPOINT_XS, 10),
    sm: parseInt(BREAKPOINT_SM, 10),
    md: parseInt(BREAKPOINT_MD, 10),
    lg: parseInt(BREAKPOINT_LG, 10),
    xl: parseInt(BREAKPOINT_XL, 10),
    "2xl": parseInt(BREAKPOINT_2XL, 10),
    "3xl": parseInt(BREAKPOINT_3XL, 10),
};
const findBreakpoints = () => {
    const width = window.innerWidth;
    const breakpoints = [];
    for (const breakpoint of Object.keys(breakpointMap)) {
        if (width >= breakpointMap[breakpoint]) {
            breakpoints.push(breakpoint);
        }
    }
    return breakpoints;
};
const useBreakpoints = () => {
    const [activeBreakpoints, setActiveBreakpoints] = React.useState([]);
    React.useEffect(() => {
        const handleResize = () => {
            const breakpoints = findBreakpoints();
            setActiveBreakpoints(breakpoints);
        };
        // Set initial state
        handleResize();
        window.addEventListener("resize", handleResize);
        return () => {
            window.removeEventListener("resize", handleResize);
        };
    }, [setActiveBreakpoints]);
    return activeBreakpoints;
};

/**
 * @deprecated MainBarSearch-komponentti poistuu käytöstä versiossa 15.0.0. Siirry käyttämään yksinkertaisempaa MainBarSearchV2:sta.
 */
function MainBarSearch(_a) {
    var { search, closeLabel, labelUtil, breakpoint, util, className, testId, children } = _a, attrs = __rest$1(_a, ["search", "closeLabel", "labelUtil", "breakpoint", "util", "className", "testId", "children"]);
    const containerRef = React.useRef(null);
    const inputRef = React.useRef(null);
    const toggleRef = React.useRef(null);
    const initialRender = React.useRef(true);
    const focusToElement = React.useRef(false);
    const openAtBreakpoint = React.useRef(true);
    const activeBreakpoint = useBreakpoints();
    const [isOpen, setIsOpen] = React.useState(false);
    const [autoOpen, setAutoOpen] = React.useState(true);
    const [fullWidth, setFullWidth] = React.useState(false);
    useOnClickOutside(containerRef, () => {
        if (!breakpoint)
            handleClose();
        focusToElement.current = false;
    });
    React.useEffect(() => {
        // check if search bar should open.
        handleResize();
    });
    React.useEffect(() => {
        if (initialRender.current) {
            initialRender.current = false;
            return;
        }
        if (isOpen && inputRef.current && (focusToElement.current || !breakpoint)) {
            // Move focus from toggle to input on open
            if (document.activeElement === toggleRef.current) {
                inputRef.current.focus();
            }
        }
        else if (initialRender.current === false && toggleRef.current && focusToElement.current) {
            // Move focus back to toggle on close
            toggleRef.current.focus();
            focusToElement.current = false;
        }
        // If input gets too narrow (e.g. when used with a large font size),
        // set the search to open in full width
        if (inputRef.current.clientWidth > 0 && inputRef.current.clientWidth < 200) {
            if (breakpoint && openAtBreakpoint.current && autoOpen) {
                setIsOpen(false);
                openAtBreakpoint.current = false;
            }
            else {
                setFullWidth(true);
            }
        }
    }, [isOpen, activeBreakpoint, breakpoint, autoOpen]);
    const searchClassNames = clsx("kds-mainbar__search", util || className, {
        "kds-mainbar__search--open": isOpen,
        "kds-mainbar__search--full-width": fullWidth,
    });
    const labelClassNames = clsx("kds-mainbar__action-label", labelUtil);
    const inputClassNames = "kds-mainbar__search-input";
    const btnUtilClasses = "kds-ml-2";
    const closeBtnClassNames = clsx("kds-mainbar__search-close-btn", { "kds-none": !fullWidth });
    const handleClose = () => {
        setIsOpen(false);
        setFullWidth(false);
        focusToElement.current = true;
        openAtBreakpoint.current = false;
    };
    const handleOpen = () => {
        setIsOpen(!isOpen);
        setFullWidth(false);
        focusToElement.current = true;
        if (isOpen)
            openAtBreakpoint.current = false;
        setAutoOpen(isOpen);
    };
    const handleResize = () => {
        if (openAtBreakpoint.current && breakpoint && autoOpen) {
            setIsOpen(activeBreakpoint.includes(breakpoint));
            focusToElement.current = false;
        }
    };
    const handleKeyDown = (e) => {
        if (isEsc(e)) {
            handleClose();
        }
    };
    return (React.createElement("div", { className: searchClassNames, onKeyDown: (e) => handleKeyDown(e), role: "search", ref: containerRef, "data-testid": testId },
        React.createElement("button", Object.assign({ ref: toggleRef, className: "kds-mainbar__action kds-mainbar__search-btn kds-mainbar__action--with-icon", onClick: () => handleOpen(), "aria-haspopup": "true", "aria-expanded": isOpen, type: "button" }, attrs),
            React.createElement(SvgIconMagnifyingGlass, { size: "s", className: "kds-mainbar__action-icon" }),
            children ? React.createElement("span", { className: labelClassNames }, children) : null),
        React.createElement("div", { className: `${isOpen ? "kds-flex kds-w-full kds-items-center" : "kds-hidden"}` },
            search(inputRef, inputClassNames, btnUtilClasses),
            React.createElement("button", { type: "button", className: closeBtnClassNames, onClick: () => handleClose(), "aria-label": closeLabel },
                React.createElement(SvgIconClose, { size: "s" })))));
}
MainBarSearch.defaultProps = {
    labelUtil: "",
    util: "",
};

function MainBarSearchV2({ search, testId, className }) {
    const searchClassName = "kds-mainbar-search-v2__search";
    const inputClassName = "kds-mainbar-search-v2__input";
    const btnClassName = "kds-mainbar-search-v2__btn";
    const iconClassName = "kds-mainbar-search-v2__icon";
    return (React.createElement("div", { className: clsx("kds-mainbar-search-v2", className), role: "search", "data-testid": testId }, search({ searchClassName, inputClassName, btnClassName, iconClassName })));
}

const MainBarMenuButtonIcon = ({ isOpen, className }) => {
    return (React.createElement("span", { className: clsx("kds-mainbar-menu-btn__icon", { "kds-mainbar-menu-btn__icon--open": isOpen }, className) },
        React.createElement("span", null),
        React.createElement("span", null),
        React.createElement("span", null)));
};
/**
 * Ref-prop välitetään button-elementille.
 */
const MainBarMenuButton = React.forwardRef((_a, ref) => {
    var { children, onClick, className, testId, isOpen, vAlign } = _a, attrs = __rest$1(_a, ["children", "onClick", "className", "testId", "isOpen", "vAlign"]);
    const classNames = clsx("kds-mainbar-menu-btn", className, {
        "kds-mainbar-menu-btn--open": isOpen,
    });
    return (React.createElement(MainBarAction, Object.assign({ ref: ref, as: "button", className: classNames, "data-testid": testId, onClick: onClick, vAlign: vAlign, icon: React.createElement(MainBarMenuButtonIcon, { isOpen: isOpen }) }, attrs), children));
});
MainBarMenuButton.displayName = "MainBarMenuButton";

const defaultElement$q = Button$1;
function DropdownToggle(_a) {
    var { as, util, className, children, testId } = _a, attrs = __rest$1(_a, ["as", "util", "className", "children", "testId"]);
    const buttonRef = React.useRef();
    const context = React.useContext(DropdownContext);
    const { isOpen, onClick } = context;
    useIsomorphicLayoutEffect$1(() => {
        context.toggleElRef = buttonRef;
    });
    const Tag = as || defaultElement$q;
    const elementAttrs = Object.assign({}, attrs);
    if (Tag === Button$1 || Tag === TitleBarAction || Tag === MainBarAction) {
        elementAttrs.caret = !isOpen;
        elementAttrs.caretUp = isOpen;
    }
    return (React.createElement(Tag, Object.assign({ "data-testid": testId, "aria-haspopup": "true", "aria-expanded": isOpen, onClick: onClick, ref: buttonRef, className: className || util }, elementAttrs), children));
}
DropdownToggle.defaultProps = {};

const defaultElement$p = "h3";
function DropdownMenuGroupHeading(_a) {
    var { as, children, testId, util, className } = _a, attrs = __rest$1(_a, ["as", "children", "testId", "util", "className"]);
    const headingAs = as || defaultElement$p;
    const classNames = clsx("kds-dropdown__heading", util || className);
    return (React.createElement(Heading, Object.assign({ as: headingAs, size: "category", className: classNames, "data-testid": testId }, attrs), children));
}
DropdownMenuGroupHeading.defaultProps = {
    as: defaultElement$p,
    util: "",
};

var reactIs = {exports: {}};

var reactIs_development = {};

/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_development;
function requireReactIs_development() {
    if (hasRequiredReactIs_development)
        return reactIs_development;
    hasRequiredReactIs_development = 1;
    if (process.env.NODE_ENV !== "production") {
        (function () {
            // ATTENTION
            // When adding new symbols to this file,
            // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
            // The Symbol used to tag the ReactElement-like types.
            var REACT_ELEMENT_TYPE = Symbol.for('react.element');
            var REACT_PORTAL_TYPE = Symbol.for('react.portal');
            var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
            var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
            var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
            var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
            var REACT_CONTEXT_TYPE = Symbol.for('react.context');
            var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
            var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
            var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
            var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
            var REACT_MEMO_TYPE = Symbol.for('react.memo');
            var REACT_LAZY_TYPE = Symbol.for('react.lazy');
            var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
            // -----------------------------------------------------------------------------
            var enableScopeAPI = false; // Experimental Create Event Handle API.
            var enableCacheElement = false;
            var enableTransitionTracing = false; // No known bugs, but needs performance testing
            var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
            // stuff. Intended to enable React core members to more easily debug scheduling
            // issues in DEV builds.
            var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
            var REACT_MODULE_REFERENCE;
            {
                REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
            }
            function isValidElementType(type) {
                if (typeof type === 'string' || typeof type === 'function') {
                    return true;
                } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
                if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
                    return true;
                }
                if (typeof type === 'object' && type !== null) {
                    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
                        // types supported by any Flight configuration anywhere since
                        // we don't know which Flight build this will end up being used
                        // with.
                        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
                        return true;
                    }
                }
                return false;
            }
            function typeOf(object) {
                if (typeof object === 'object' && object !== null) {
                    var $$typeof = object.$$typeof;
                    switch ($$typeof) {
                        case REACT_ELEMENT_TYPE:
                            var type = object.type;
                            switch (type) {
                                case REACT_FRAGMENT_TYPE:
                                case REACT_PROFILER_TYPE:
                                case REACT_STRICT_MODE_TYPE:
                                case REACT_SUSPENSE_TYPE:
                                case REACT_SUSPENSE_LIST_TYPE:
                                    return type;
                                default:
                                    var $$typeofType = type && type.$$typeof;
                                    switch ($$typeofType) {
                                        case REACT_SERVER_CONTEXT_TYPE:
                                        case REACT_CONTEXT_TYPE:
                                        case REACT_FORWARD_REF_TYPE:
                                        case REACT_LAZY_TYPE:
                                        case REACT_MEMO_TYPE:
                                        case REACT_PROVIDER_TYPE:
                                            return $$typeofType;
                                        default:
                                            return $$typeof;
                                    }
                            }
                        case REACT_PORTAL_TYPE:
                            return $$typeof;
                    }
                }
                return undefined;
            }
            var ContextConsumer = REACT_CONTEXT_TYPE;
            var ContextProvider = REACT_PROVIDER_TYPE;
            var Element = REACT_ELEMENT_TYPE;
            var ForwardRef = REACT_FORWARD_REF_TYPE;
            var Fragment = REACT_FRAGMENT_TYPE;
            var Lazy = REACT_LAZY_TYPE;
            var Memo = REACT_MEMO_TYPE;
            var Portal = REACT_PORTAL_TYPE;
            var Profiler = REACT_PROFILER_TYPE;
            var StrictMode = REACT_STRICT_MODE_TYPE;
            var Suspense = REACT_SUSPENSE_TYPE;
            var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
            var hasWarnedAboutDeprecatedIsAsyncMode = false;
            var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated
            function isAsyncMode(object) {
                {
                    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                        hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
                        console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
                    }
                }
                return false;
            }
            function isConcurrentMode(object) {
                {
                    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                        hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint
                        console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
                    }
                }
                return false;
            }
            function isContextConsumer(object) {
                return typeOf(object) === REACT_CONTEXT_TYPE;
            }
            function isContextProvider(object) {
                return typeOf(object) === REACT_PROVIDER_TYPE;
            }
            function isElement(object) {
                return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
            function isForwardRef(object) {
                return typeOf(object) === REACT_FORWARD_REF_TYPE;
            }
            function isFragment(object) {
                return typeOf(object) === REACT_FRAGMENT_TYPE;
            }
            function isLazy(object) {
                return typeOf(object) === REACT_LAZY_TYPE;
            }
            function isMemo(object) {
                return typeOf(object) === REACT_MEMO_TYPE;
            }
            function isPortal(object) {
                return typeOf(object) === REACT_PORTAL_TYPE;
            }
            function isProfiler(object) {
                return typeOf(object) === REACT_PROFILER_TYPE;
            }
            function isStrictMode(object) {
                return typeOf(object) === REACT_STRICT_MODE_TYPE;
            }
            function isSuspense(object) {
                return typeOf(object) === REACT_SUSPENSE_TYPE;
            }
            function isSuspenseList(object) {
                return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
            }
            reactIs_development.ContextConsumer = ContextConsumer;
            reactIs_development.ContextProvider = ContextProvider;
            reactIs_development.Element = Element;
            reactIs_development.ForwardRef = ForwardRef;
            reactIs_development.Fragment = Fragment;
            reactIs_development.Lazy = Lazy;
            reactIs_development.Memo = Memo;
            reactIs_development.Portal = Portal;
            reactIs_development.Profiler = Profiler;
            reactIs_development.StrictMode = StrictMode;
            reactIs_development.Suspense = Suspense;
            reactIs_development.SuspenseList = SuspenseList;
            reactIs_development.isAsyncMode = isAsyncMode;
            reactIs_development.isConcurrentMode = isConcurrentMode;
            reactIs_development.isContextConsumer = isContextConsumer;
            reactIs_development.isContextProvider = isContextProvider;
            reactIs_development.isElement = isElement;
            reactIs_development.isForwardRef = isForwardRef;
            reactIs_development.isFragment = isFragment;
            reactIs_development.isLazy = isLazy;
            reactIs_development.isMemo = isMemo;
            reactIs_development.isPortal = isPortal;
            reactIs_development.isProfiler = isProfiler;
            reactIs_development.isStrictMode = isStrictMode;
            reactIs_development.isSuspense = isSuspense;
            reactIs_development.isSuspenseList = isSuspenseList;
            reactIs_development.isValidElementType = isValidElementType;
            reactIs_development.typeOf = typeOf;
        })();
    }
    return reactIs_development;
}

var reactIs_production_min = {};

/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_production_min;
function requireReactIs_production_min() {
    if (hasRequiredReactIs_production_min)
        return reactIs_production_min;
    hasRequiredReactIs_production_min = 1;
    var b = Symbol.for("react.element"), c = Symbol.for("react.portal"), d = Symbol.for("react.fragment"), e = Symbol.for("react.strict_mode"), f = Symbol.for("react.profiler"), g = Symbol.for("react.provider"), h = Symbol.for("react.context"), k = Symbol.for("react.server_context"), l = Symbol.for("react.forward_ref"), m = Symbol.for("react.suspense"), n = Symbol.for("react.suspense_list"), p = Symbol.for("react.memo"), q = Symbol.for("react.lazy"), t = Symbol.for("react.offscreen"), u;
    u = Symbol.for("react.module.reference");
    function v(a) { if ("object" === typeof a && null !== a) {
        var r = a.$$typeof;
        switch (r) {
            case b: switch (a = a.type, a) {
                case d:
                case f:
                case e:
                case m:
                case n: return a;
                default: switch (a = a && a.$$typeof, a) {
                    case k:
                    case h:
                    case l:
                    case q:
                    case p:
                    case g: return a;
                    default: return r;
                }
            }
            case c: return r;
        }
    } }
    reactIs_production_min.ContextConsumer = h;
    reactIs_production_min.ContextProvider = g;
    reactIs_production_min.Element = b;
    reactIs_production_min.ForwardRef = l;
    reactIs_production_min.Fragment = d;
    reactIs_production_min.Lazy = q;
    reactIs_production_min.Memo = p;
    reactIs_production_min.Portal = c;
    reactIs_production_min.Profiler = f;
    reactIs_production_min.StrictMode = e;
    reactIs_production_min.Suspense = m;
    reactIs_production_min.SuspenseList = n;
    reactIs_production_min.isAsyncMode = function () { return !1; };
    reactIs_production_min.isConcurrentMode = function () { return !1; };
    reactIs_production_min.isContextConsumer = function (a) { return v(a) === h; };
    reactIs_production_min.isContextProvider = function (a) { return v(a) === g; };
    reactIs_production_min.isElement = function (a) { return "object" === typeof a && null !== a && a.$$typeof === b; };
    reactIs_production_min.isForwardRef = function (a) { return v(a) === l; };
    reactIs_production_min.isFragment = function (a) { return v(a) === d; };
    reactIs_production_min.isLazy = function (a) { return v(a) === q; };
    reactIs_production_min.isMemo = function (a) { return v(a) === p; };
    reactIs_production_min.isPortal = function (a) { return v(a) === c; };
    reactIs_production_min.isProfiler = function (a) { return v(a) === f; };
    reactIs_production_min.isStrictMode = function (a) { return v(a) === e; };
    reactIs_production_min.isSuspense = function (a) { return v(a) === m; };
    reactIs_production_min.isSuspenseList = function (a) { return v(a) === n; };
    reactIs_production_min.isValidElementType = function (a) { return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || "object" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? !0 : !1; };
    reactIs_production_min.typeOf = v;
    return reactIs_production_min;
}

if (process.env.NODE_ENV === 'production') {
    reactIs.exports = requireReactIs_production_min();
}
else {
    reactIs.exports = requireReactIs_development();
}
var reactIsExports = reactIs.exports;

const DropdownMenuGroupItems = ({ items }) => (React.createElement(React.Fragment, null, React.Children.map(items, (item) => reactIsExports.isFragment(item) ? React.Children.map(item.props.children, (subItem) => React.createElement("li", null, subItem)) : React.createElement("li", null, item))));
function DropdownMenuGroup(_a) {
    var { util, className, testId, children } = _a, attrs = __rest$1(_a, ["util", "className", "testId", "children"]);
    const classNames = clsx("kds-dropdown__list", util || className);
    return (React.createElement("ul", Object.assign({ className: classNames, "data-testid": testId }, attrs),
        React.createElement(DropdownMenuGroupItems, { items: children })));
}

const FileInputWithButton = React.forwardRef((_a, ref) => {
    var { btnLabelText, disabled, id, inputDescribedBy, invalid, multiple } = _a, rest = __rest$1(_a, ["btnLabelText", "disabled", "id", "inputDescribedBy", "invalid", "multiple"]);
    const fileInputRef = React.useRef();
    const isTestEnv = process.env.NODE_ENV === "test";
    const handleFileInputClick = () => fileInputRef.current.click();
    return (React.createElement(React.Fragment, null,
        React.createElement(Button$1, { appearance: "outline", variant: invalid ? "danger" : "primary", type: "button", disabled: disabled, onClick: handleFileInputClick, "aria-describedby": inputDescribedBy },
            React.createElement(SvgIconPlus, { className: "kds-mr-2", "aria-hidden": "true" }),
            btnLabelText),
        React.createElement("input", Object.assign({ hidden: true, type: "file", id: id, ref: (element) => {
                fileInputRef.current = element;
                if (typeof ref === "function") {
                    ref(element);
                }
                else if (ref) {
                    ref.current = element;
                }
            }, multiple: multiple, disabled: disabled, "data-testid": isTestEnv ? "kds-file-input-element" : undefined }, rest))));
});
FileInputWithButton.displayName = "FileInputWithButton";

/**
 * Ref-prop välitetään komponentin input-elementille.
 */
const FileInput = React.forwardRef((_a, ref) => {
    var { id, labelText, helpText, errorText, testId, infoText, btnLabelText, multiple = false, requiredLabel, invalid = false, disabled = false, leftCol, util, className } = _a, rest = __rest$1(_a, ["id", "labelText", "helpText", "errorText", "testId", "infoText", "btnLabelText", "multiple", "requiredLabel", "invalid", "disabled", "leftCol", "util", "className"]);
    const generatedId = React.useId();
    const elementId = id || generatedId;
    const labelTextId = `${elementId}-label`;
    const helpTextId = `${elementId}-help`;
    const errorTextId = `${elementId}-error`;
    const infoTextId = `${elementId}-info`;
    const textIds = clsx({
        [labelTextId]: labelText,
        [helpTextId]: helpText,
        [errorTextId]: errorText && invalid,
        [infoTextId]: infoText,
    });
    const inputDescribedBy = textIds.length ? textIds : undefined;
    const inputWithButtonProps = Object.assign({ btnLabelText,
        disabled, id: elementId, inputDescribedBy,
        invalid,
        multiple,
        ref }, rest);
    const labelAndHelpText = (React.createElement(React.Fragment, null,
        labelText && (React.createElement(InputLabel, { as: "span", center: !!leftCol, id: labelTextId, requiredLabel: requiredLabel }, labelText)),
        helpText && React.createElement(InputText, { id: helpTextId }, helpText)));
    const mainContent = (React.createElement(React.Fragment, null,
        errorText && invalid && !disabled && (React.createElement(InputText, { error: true, id: errorTextId }, errorText)),
        React.createElement(FileInputWithButton, Object.assign({}, inputWithButtonProps)),
        infoText && (React.createElement(InputText, { info: true, id: infoTextId, className: "kds-mt-2" }, infoText))));
    const classNames = clsx("kds-file-input", util || className);
    return (React.createElement(InputGroup, { "data-testid": testId, row: !!leftCol, className: classNames },
        leftCol ? leftCol(labelAndHelpText) : labelAndHelpText,
        leftCol ? React.createElement(Column, null, mainContent) : mainContent));
});
FileInput.displayName = "FileInput";

function FooterLegacy(_a) {
    var { copyrightText = "Kansaneläkelaitos", links, testId, children, className } = _a, attrs = __rest$1(_a, ["copyrightText", "links", "testId", "children", "className"]);
    return (React.createElement("footer", Object.assign({ "data-testid": testId, className: className }, attrs),
        children && (React.createElement("div", { className: "kds-footer__content" },
            React.createElement(Container, null, children))),
        React.createElement(Container, null,
            React.createElement(Row$1, null,
                React.createElement(Column, { className: "kds-footer__copyright" },
                    React.createElement("span", { className: "kds-footer__copyright-text" },
                        "\u00A9 ",
                        copyrightText),
                    React.createElement("div", { className: "kds-footer__copyright-links" }, links === null || links === void 0 ? void 0 : links()))))));
}

function Footer(_a) {
    var { copyrightText = "Kansaneläkelaitos", isCopyrightOnly = false, links, testId, children, util, className, isLegacy = true } = _a, attrs = __rest$1(_a, ["copyrightText", "isCopyrightOnly", "links", "testId", "children", "util", "className", "isLegacy"]);
    const classNames = clsx("kds-footer", util || className, {
        "kds-footer--copyright-only": !React.Children.count(children) || isCopyrightOnly,
    });
    if (isLegacy) {
        return (React.createElement(FooterLegacy, Object.assign({ copyrightText: copyrightText, links: links, testId: testId, className: classNames }, attrs), children));
    }
    return (React.createElement("footer", Object.assign({ "data-testid": testId, className: classNames }, attrs), children));
}

const defaultElement$o = "h2";
function FooterTitle(_a) {
    var { as, children, util, className, testId } = _a, attrs = __rest$1(_a, ["as", "children", "util", "className", "testId"]);
    const headingAs = as || defaultElement$o;
    const classNames = clsx("kds-footer__title", util || className);
    return (React.createElement(Heading, Object.assign({ as: headingAs, size: 5, className: classNames, "data-testid": testId }, attrs), children));
}
FooterTitle.defaultProps = {
    as: defaultElement$o,
};

function FooterContent({ children, testId, className }) {
    return (React.createElement("div", { className: clsx("kds-footer__content", className), "data-testid": testId }, children));
}

function FooterCopyright({ children, testId, className, links }) {
    return (React.createElement("div", { className: clsx("kds-footer__copyright", className), "data-testid": testId },
        children && React.createElement("div", { className: "kds-footer__copyright-text" }, children),
        links && React.createElement("div", { className: "kds-footer__copyright-links" }, links)));
}

const defaultElement$n = "a";
function Link(_a) {
    var { as, children, emphasize, icon, newTabLabel = "Avautuu uuteen välilehteen", standalone, testId, variant, underline, util, className } = _a, attrs = __rest$1(_a, ["as", "children", "emphasize", "icon", "newTabLabel", "standalone", "testId", "variant", "underline", "util", "className"]);
    const Tag = as || defaultElement$n;
    const opensInNewTab = attrs.target === "_blank";
    const classNames = clsx("kds-link", util || className, {
        "kds-link--standalone": standalone && !icon,
        "kds-link--standalone-with-icon": standalone && icon,
        "kds-link--light": variant === "light",
        "kds-link--dark": variant === "dark",
        "kds-link--larger": emphasize,
        "kds-link--underline": underline === true,
        "kds-link--no-underline": underline === false,
        "kds-link--icon": icon,
    });
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs),
        icon &&
            React.cloneElement(icon, {
                className: clsx("kds-link__icon", icon.props.className),
                size: icon.props.size ? icon.props.size : "s",
            }),
        React.createElement("span", { className: "kds-link__text" }, children),
        opensInNewTab && React.createElement("span", { className: "kds-sr-only" },
            "(",
            newTabLabel,
            ")"),
        opensInNewTab ? React.createElement(SvgIconArrowInTheBox, { className: "kds-link__type-icon", "aria-hidden": "true" }) : null,
        standalone && !icon && !opensInNewTab ? React.createElement(SvgIconCaretRight, { className: "kds-link__type-icon", "aria-hidden": "true" }) : null));
}
Link.defaultProps = {
    as: defaultElement$n,
};

const defaultElement$m = "a";
function LinkBox(_a) {
    var { as, util, className, icon, children, newTabLabel = "Avautuu uuteen välilehteen", testId } = _a, attrs = __rest$1(_a, ["as", "util", "className", "icon", "children", "newTabLabel", "testId"]);
    const classNames = clsx("kds-link-box", util || className);
    const opensInNewTab = attrs.target === "_blank";
    const LinkTypeIcon = opensInNewTab ? SvgIconArrowInTheBox : SvgIconCaretRight;
    const Tag = as || defaultElement$m;
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs),
        icon ? React.cloneElement(icon, { className: "kds-link-box__icon", size: "m" }) : false,
        React.createElement("span", { className: "kds-link-box__content" }, children),
        opensInNewTab && React.createElement("span", { className: "kds-sr-only" },
            "(",
            newTabLabel,
            ")"),
        React.createElement(LinkTypeIcon, { size: "s", className: "kds-link-box__type-icon", "aria-hidden": "true" })));
}
LinkBox.defaultProps = {
    as: defaultElement$m,
};

const defaultElement$l = "a";
function LinkWithInfo(_a) {
    var { as, infoText, target, variant, icon, newTabLabel = "Avautuu uuteen välilehteen", util, className, testId, children } = _a, attrs = __rest$1(_a, ["as", "infoText", "target", "variant", "icon", "newTabLabel", "util", "className", "testId", "children"]);
    const Tag = as || defaultElement$l;
    const opensInNewTab = target === "_blank";
    let infoTextArray = null;
    const classNames = clsx("kds-link-with-info", util || className, {
        "kds-link-with-info--light": variant === "light",
        "kds-link-with-info--dark": variant === "dark",
    });
    const linkTitleClassNames = clsx("kds-link-with-info__title", {
        "kds-link-with-info__title--larger": !!icon,
    });
    const linkTypeIcon = opensInNewTab ? (React.createElement(SvgIconArrowInTheBox, { className: "kds-ml-2", "aria-hidden": "true" })) : (React.createElement(SvgIconCaretRight, { className: "kds-ml-1", "aria-hidden": "true" }));
    if (infoText instanceof Array) {
        infoTextArray = [];
        for (let i = 0; i < infoText.length; i++) {
            infoTextArray.push(React.createElement("span", { key: `text-${i}`, className: "kds-link-with-info__text-line" }, infoText[i]));
        }
    }
    const infoTextElement = infoTextArray ? (React.createElement("span", { className: "kds-link-with-info__text" }, infoTextArray)) : (React.createElement("span", { className: "kds-link-with-info__text" }, infoText));
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId, target: target }, attrs),
        icon &&
            React.cloneElement(icon, {
                className: clsx("kds-link-with-info__icon", icon.props.className || icon.props.util),
                size: "l",
            }),
        React.createElement("div", { className: "kds-link-with-info__content" },
            React.createElement("span", { className: linkTitleClassNames },
                React.createElement("span", { className: "kds-link-with-info__title-text" }, children),
                linkTypeIcon),
            opensInNewTab && React.createElement("span", { className: "kds-sr-only" },
                "(",
                newTabLabel,
                ")"),
            infoText && infoTextElement)));
}
LinkWithInfo.defaultProps = {
    as: defaultElement$l,
};

function List(_a) {
    var { text, ordered = false, inline = false, unstyled = false, util, className, testId, children } = _a, attrs = __rest$1(_a, ["text", "ordered", "inline", "unstyled", "util", "className", "testId", "children"]);
    const Tag = ordered ? "ol" : "ul";
    const classNames = clsx(util || className, "kds-list", {
        "kds-list--ordered": ordered,
        "kds-list--unordered": !ordered,
        "kds-list--unstyled": unstyled,
        "kds-list--inline": inline,
    });
    if (inline) {
        const childrenWithProps = React.Children.map(children, (child) => {
            if (!React.isValidElement(child))
                return child;
            return React.cloneElement(child, { inline });
        });
        return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), childrenWithProps));
    }
    return (React.createElement(React.Fragment, null,
        text && React.createElement("p", { className: "kds-list-caption" }, text),
        React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children)));
}

function ListItem(_a) {
    var { util, className, children, testId, inline } = _a, attrs = __rest$1(_a, ["util", "className", "children", "testId", "inline"]);
    const classNames = clsx(util || className, "kds-list__item", {
        "kds-list__item--inline": inline,
    });
    return (React.createElement("li", Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}

const defaultElement$k = "ul";
function ListGroup(_a) {
    var { as, flush, testId, util, className, children } = _a, attrs = __rest$1(_a, ["as", "flush", "testId", "util", "className", "children"]);
    const Tag = as || defaultElement$k;
    const classNames = clsx(util || className, "kds-list-group", {
        "kds-list-group--flush": flush,
    });
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
ListGroup.defaultProps = {
    as: defaultElement$k,
};

const defaultElement$j = "li";
function ListGroupItem(_a) {
    var { as, active, disabled, util, className, children, testId, href = "#" } = _a, attrs = __rest$1(_a, ["as", "active", "disabled", "util", "className", "children", "testId", "href"]);
    const Tag = as || defaultElement$j;
    const isButton = Tag === "button";
    const disabledValue = isButton && disabled ? "disabled" : undefined;
    const classNames = clsx(util || className, "kds-list-group__item", {
        "kds-list-group__item--active": active,
        "kds-list-group__item--disabled": disabled,
        "kds-list-group__item--action": Tag === "a" || Tag === "button",
    });
    return (React.createElement(Tag, Object.assign({ "data-testid": testId, type: isButton ? "button" : undefined, href: Tag === "a" ? href : undefined, className: classNames, disabled: disabledValue }, attrs), children));
}
ListGroupItem.defaultProps = {
    as: defaultElement$j,
};

const defaultElement$i = "div";
function Media(_a) {
    var { as, util, className, children, testId } = _a, attrs = __rest$1(_a, ["as", "util", "className", "children", "testId"]);
    const Tag = as || defaultElement$i;
    const classNames = clsx("kds-media kds-flex kds-items-start", util || className);
    return (React.createElement(Tag, Object.assign({ "data-testid": testId, className: classNames }, attrs), children));
}
Media.defaultProps = {
    as: defaultElement$i,
};

const defaultElement$h = "div";
const MediaBody = (_a) => {
    var { as, util, className, children, testId } = _a, attrs = __rest$1(_a, ["as", "util", "className", "children", "testId"]);
    const Tag = as || defaultElement$h;
    const classNames = clsx("media-body", util || className);
    // Create class names from props
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
};
MediaBody.defaultProps = {
    as: defaultElement$h,
};

const usePrevious = (value) => {
    const ref = React.useRef();
    React.useEffect(() => {
        ref.current = value;
    }, [value]);
    return ref.current;
};

const ModalIconContent = ({ util, className, icon, iconAriaLabel, children, }) => {
    const classNames = clsx(util || className, "kds-modal__icon-wrapper");
    if (icon) {
        const ariaLabel = iconAriaLabel ? { ["aria-label"]: iconAriaLabel } : undefined;
        const modalIcon = React.cloneElement(icon, Object.assign({ className: `kds-modal__icon`, size: "s", role: "presentation" }, ariaLabel));
        return (React.createElement("div", { id: "kds-modal-icon", className: classNames },
            React.createElement("div", null, modalIcon),
            React.createElement("div", null, children)));
    }
    return React.createElement(React.Fragment, null, children);
};
ModalIconContent.displayName = "ModalIcon";

function Modal(_a) {
    var { icon, iconAriaLabel, appRootId, isOpen, toggle, focusRef, variant, closeOnClickOutside, centered, small, large, xlarge, children, readContent, testId, showClose, closeLabel, backdropColor } = _a, attrs = __rest$1(_a, ["icon", "iconAriaLabel", "appRootId", "isOpen", "toggle", "focusRef", "variant", "closeOnClickOutside", "centered", "small", "large", "xlarge", "children", "readContent", "testId", "showClose", "closeLabel", "backdropColor"]);
    const prevIsOpen = usePrevious(isOpen);
    const id = appRootId && ((appRootId === null || appRootId === void 0 ? void 0 : appRootId.includes("#")) ? appRootId : `#${appRootId}`);
    const theAppRoot = id && canUseDOM$1 ? document.querySelector(id) : null;
    const modalDialog = React.useRef(null);
    const modalContent = React.useRef(null);
    const backdropDiv = React.useRef(null);
    const trigger = React.useRef();
    const { context, refs } = useFloating();
    const destroy = React.useCallback(() => {
        // Return focus to trigger element
        if (document.activeElement !== (trigger === null || trigger === void 0 ? void 0 : trigger.current)) {
            if ((trigger === null || trigger === void 0 ? void 0 : trigger.current) instanceof HTMLElement) {
                trigger === null || trigger === void 0 ? void 0 : trigger.current.focus();
            }
        }
        theAppRoot === null || theAppRoot === void 0 ? void 0 : theAppRoot.classList.remove("kds-modal-blur");
        document.body.classList.remove("kds-modal-open");
    }, [theAppRoot, trigger]);
    const onOpenStateChange = React.useCallback(() => {
        var _a, _b, _c;
        if (isOpen) {
            // Try to store the triggering element for returning focus on destroy
            try {
                trigger.current = document.activeElement;
            }
            catch (err) {
                trigger.current = null;
            }
            // If focusRef is given, focus to focusRef element, otherwise
            // If modal contains focusable children, move focus to the first one.
            // Otherwise, focus on the modal div.
            const focusableChildren = modalDialog.current ? getFocusableChildren(modalDialog.current) : [];
            if (focusRef && focusRef.current) {
                focusRef.current.focus();
            }
            else if (focusableChildren === null || focusableChildren === void 0 ? void 0 : focusableChildren.length) {
                (_a = focusableChildren[0]) === null || _a === void 0 ? void 0 : _a.focus();
            }
            else {
                (_c = (_b = modalDialog === null || modalDialog === void 0 ? void 0 : modalDialog.current) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.focus();
            }
            document.body.classList.add("kds-modal-open");
        }
        else {
            destroy();
        }
    }, [destroy, focusRef, isOpen]);
    const handleCloseOnClickOutside = (e) => {
        e.stopPropagation();
        if (isOpen && closeOnClickOutside) {
            // Get reference to .modal-dialog DOM element
            const el = modalDialog.current;
            // User clicked outside .modal-dialog --> close dialog
            if (e.target && !(el === null || el === void 0 ? void 0 : el.contains(e.target)) && toggle)
                toggle(e);
        }
    };
    const handleEsc = (e) => {
        if (isOpen && closeOnClickOutside && isEsc(e) && toggle) {
            e.preventDefault();
            e.stopPropagation();
            toggle(e);
        }
    };
    const animatedMaxOpacity = backdropColor === "dark" ? 0.45 : 0.8;
    React.useEffect(() => {
        if ((prevIsOpen === undefined && !isOpen) || prevIsOpen === isOpen)
            return;
        if (isOpen) {
            theAppRoot === null || theAppRoot === void 0 ? void 0 : theAppRoot.classList.add("kds-modal-blur");
            if (supportsAnimations()) {
                closeOnClickOutside &&
                    backdropDiv.current &&
                    fadeIn(backdropDiv.current, { direction: "normal", MAX_OPACITY: animatedMaxOpacity });
                modalContent.current && slideFromTop(modalContent.current, { direction: "normal" });
            }
            onOpenStateChange();
        }
        else {
            if (supportsAnimations()) {
                closeOnClickOutside &&
                    backdropDiv.current &&
                    fadeIn(backdropDiv.current, { direction: "reverse", MAX_OPACITY: animatedMaxOpacity });
                modalContent.current && slideFromTop(modalContent.current, { direction: "reverse" });
            }
            onOpenStateChange();
        }
    }, [
        prevIsOpen,
        isOpen,
        onOpenStateChange,
        theAppRoot,
        closeOnClickOutside,
        backdropDiv,
        modalContent,
        animatedMaxOpacity,
    ]);
    React.useEffect(() => {
        return () => {
            if (isOpen) {
                destroy();
            }
        };
    }, [destroy, isOpen]);
    if (!isOpen)
        return null;
    const handleClose = (e) => {
        toggle(e);
    };
    const hasIcon = React.isValidElement(icon);
    const classNames = clsx("kds-modal", {
        [`kds-modal--${variant}`]: variant,
        "kds-modal--sm": small,
        "kds-modal--lg": large,
        "kds-modal--xl": xlarge,
        "kds-modal--icon": hasIcon,
    });
    const dialogClassNames = clsx("kds-modal__dialog", {
        "kds-modal__dialog--center": centered,
    });
    const backdropClassNames = clsx("kds-modal-backdrop", {
        "kds-modal-backdrop--light": backdropColor === "light",
        "kds-modal-backdrop--dark": backdropColor === "dark",
    });
    return (React.createElement(Portal, null,
        isOpen && (React.createElement(FloatingFocusManager, { context: context, initialFocus: focusRef ? focusRef : 0, modal: true },
            React.createElement("div", Object.assign({ "data-testid": testId, className: classNames, tabIndex: -1, onKeyUp: handleEsc, onClick: handleCloseOnClickOutside, ref: refs.setFloating }, attrs),
                React.createElement("div", { className: dialogClassNames, role: "dialog", "aria-labelledby": "kds-modal-header", "aria-describedby": readContent ? "kds-modal-body" : undefined, "aria-modal": isOpen, ref: modalDialog },
                    React.createElement("div", { className: "kds-modal__content", "aria-hidden": !isOpen, ref: modalContent },
                        React.createElement(ModalIconContent, { icon: icon, iconAriaLabel: iconAriaLabel }, children),
                        showClose && toggle && (React.createElement("div", { className: "kds-modal__close" },
                            React.createElement("button", { type: "button", onClick: handleClose, "aria-label": closeLabel },
                                React.createElement(SvgIconClose, null))))))))),
        React.createElement("div", { ref: backdropDiv, className: backdropClassNames })));
}
Modal.defaultProps = {
    closeOnClickOutside: true,
    centered: false,
    small: false,
    large: false,
    xlarge: false,
    readContent: true,
    appRootId: "",
    isOpen: false,
    closeLabel: "Sulje",
    backdropColor: "light",
};

/**
 * Ref-prop välitetään komponentin div-elementille.
 */
const ModalContent = React.forwardRef((_a, ref) => {
    var { util, className, children, testId } = _a, attrs = __rest$1(_a, ["util", "className", "children", "testId"]);
    const classNames = clsx(util || className, "kds-modal__body");
    return (React.createElement("div", Object.assign({ id: "kds-modal-body", "data-testid": testId, className: classNames }, attrs, { ref: ref }), children));
});
ModalContent.displayName = "ModalContent";

/**
 * Ref-prop välitetään komponentin div-elementille.
 */
const ModalFooter = React.forwardRef((_a, ref) => {
    var { util, className, children, testId } = _a, attrs = __rest$1(_a, ["util", "className", "children", "testId"]);
    const classNames = clsx(util || className, "kds-modal__footer");
    return (React.createElement("div", Object.assign({ className: classNames, "data-testid": testId }, attrs, { ref: ref }), children));
});
ModalFooter.displayName = "ModalFooter";

const defaultElement$g = "div";
/**
 * Ref-prop välitetään otsikon sisältävälle div-elementille.
 */
const ModalHeader = React.forwardRef((_a, ref) => {
    var { as, testId, util, className, children } = _a, attrs = __rest$1(_a, ["as", "testId", "util", "className", "children"]);
    const Tag = as || defaultElement$g;
    const classNames = clsx(util || className, "kds-modal__header");
    return (React.createElement(Tag, Object.assign({ id: "kds-modal-header", className: classNames, "data-testid": testId }, attrs, { ref: ref }),
        React.createElement(Heading, { as: "h1", size: 3, className: "kds-my-0 kds-text-color-body" }, children)));
});
ModalHeader.displayName = "ModalHeader";
ModalHeader.defaultProps = {
    as: defaultElement$g,
};

var removeAccents$1 = {exports: {}};

var characterMap = {
    "À": "A",
    "Á": "A",
    "Â": "A",
    "Ã": "A",
    "Ä": "A",
    "Å": "A",
    "Ấ": "A",
    "Ắ": "A",
    "Ẳ": "A",
    "Ẵ": "A",
    "Ặ": "A",
    "Æ": "AE",
    "Ầ": "A",
    "Ằ": "A",
    "Ȃ": "A",
    "Ả": "A",
    "Ạ": "A",
    "Ẩ": "A",
    "Ẫ": "A",
    "Ậ": "A",
    "Ç": "C",
    "Ḉ": "C",
    "È": "E",
    "É": "E",
    "Ê": "E",
    "Ë": "E",
    "Ế": "E",
    "Ḗ": "E",
    "Ề": "E",
    "Ḕ": "E",
    "Ḝ": "E",
    "Ȇ": "E",
    "Ẻ": "E",
    "Ẽ": "E",
    "Ẹ": "E",
    "Ể": "E",
    "Ễ": "E",
    "Ệ": "E",
    "Ì": "I",
    "Í": "I",
    "Î": "I",
    "Ï": "I",
    "Ḯ": "I",
    "Ȋ": "I",
    "Ỉ": "I",
    "Ị": "I",
    "Ð": "D",
    "Ñ": "N",
    "Ò": "O",
    "Ó": "O",
    "Ô": "O",
    "Õ": "O",
    "Ö": "O",
    "Ø": "O",
    "Ố": "O",
    "Ṍ": "O",
    "Ṓ": "O",
    "Ȏ": "O",
    "Ỏ": "O",
    "Ọ": "O",
    "Ổ": "O",
    "Ỗ": "O",
    "Ộ": "O",
    "Ờ": "O",
    "Ở": "O",
    "Ỡ": "O",
    "Ớ": "O",
    "Ợ": "O",
    "Ù": "U",
    "Ú": "U",
    "Û": "U",
    "Ü": "U",
    "Ủ": "U",
    "Ụ": "U",
    "Ử": "U",
    "Ữ": "U",
    "Ự": "U",
    "Ý": "Y",
    "à": "a",
    "á": "a",
    "â": "a",
    "ã": "a",
    "ä": "a",
    "å": "a",
    "ấ": "a",
    "ắ": "a",
    "ẳ": "a",
    "ẵ": "a",
    "ặ": "a",
    "æ": "ae",
    "ầ": "a",
    "ằ": "a",
    "ȃ": "a",
    "ả": "a",
    "ạ": "a",
    "ẩ": "a",
    "ẫ": "a",
    "ậ": "a",
    "ç": "c",
    "ḉ": "c",
    "è": "e",
    "é": "e",
    "ê": "e",
    "ë": "e",
    "ế": "e",
    "ḗ": "e",
    "ề": "e",
    "ḕ": "e",
    "ḝ": "e",
    "ȇ": "e",
    "ẻ": "e",
    "ẽ": "e",
    "ẹ": "e",
    "ể": "e",
    "ễ": "e",
    "ệ": "e",
    "ì": "i",
    "í": "i",
    "î": "i",
    "ï": "i",
    "ḯ": "i",
    "ȋ": "i",
    "ỉ": "i",
    "ị": "i",
    "ð": "d",
    "ñ": "n",
    "ò": "o",
    "ó": "o",
    "ô": "o",
    "õ": "o",
    "ö": "o",
    "ø": "o",
    "ố": "o",
    "ṍ": "o",
    "ṓ": "o",
    "ȏ": "o",
    "ỏ": "o",
    "ọ": "o",
    "ổ": "o",
    "ỗ": "o",
    "ộ": "o",
    "ờ": "o",
    "ở": "o",
    "ỡ": "o",
    "ớ": "o",
    "ợ": "o",
    "ù": "u",
    "ú": "u",
    "û": "u",
    "ü": "u",
    "ủ": "u",
    "ụ": "u",
    "ử": "u",
    "ữ": "u",
    "ự": "u",
    "ý": "y",
    "ÿ": "y",
    "Ā": "A",
    "ā": "a",
    "Ă": "A",
    "ă": "a",
    "Ą": "A",
    "ą": "a",
    "Ć": "C",
    "ć": "c",
    "Ĉ": "C",
    "ĉ": "c",
    "Ċ": "C",
    "ċ": "c",
    "Č": "C",
    "č": "c",
    "C̆": "C",
    "c̆": "c",
    "Ď": "D",
    "ď": "d",
    "Đ": "D",
    "đ": "d",
    "Ē": "E",
    "ē": "e",
    "Ĕ": "E",
    "ĕ": "e",
    "Ė": "E",
    "ė": "e",
    "Ę": "E",
    "ę": "e",
    "Ě": "E",
    "ě": "e",
    "Ĝ": "G",
    "Ǵ": "G",
    "ĝ": "g",
    "ǵ": "g",
    "Ğ": "G",
    "ğ": "g",
    "Ġ": "G",
    "ġ": "g",
    "Ģ": "G",
    "ģ": "g",
    "Ĥ": "H",
    "ĥ": "h",
    "Ħ": "H",
    "ħ": "h",
    "Ḫ": "H",
    "ḫ": "h",
    "Ĩ": "I",
    "ĩ": "i",
    "Ī": "I",
    "ī": "i",
    "Ĭ": "I",
    "ĭ": "i",
    "Į": "I",
    "į": "i",
    "İ": "I",
    "ı": "i",
    "Ĳ": "IJ",
    "ĳ": "ij",
    "Ĵ": "J",
    "ĵ": "j",
    "Ķ": "K",
    "ķ": "k",
    "Ḱ": "K",
    "ḱ": "k",
    "K̆": "K",
    "k̆": "k",
    "Ĺ": "L",
    "ĺ": "l",
    "Ļ": "L",
    "ļ": "l",
    "Ľ": "L",
    "ľ": "l",
    "Ŀ": "L",
    "ŀ": "l",
    "Ł": "l",
    "ł": "l",
    "Ḿ": "M",
    "ḿ": "m",
    "M̆": "M",
    "m̆": "m",
    "Ń": "N",
    "ń": "n",
    "Ņ": "N",
    "ņ": "n",
    "Ň": "N",
    "ň": "n",
    "ŉ": "n",
    "N̆": "N",
    "n̆": "n",
    "Ō": "O",
    "ō": "o",
    "Ŏ": "O",
    "ŏ": "o",
    "Ő": "O",
    "ő": "o",
    "Œ": "OE",
    "œ": "oe",
    "P̆": "P",
    "p̆": "p",
    "Ŕ": "R",
    "ŕ": "r",
    "Ŗ": "R",
    "ŗ": "r",
    "Ř": "R",
    "ř": "r",
    "R̆": "R",
    "r̆": "r",
    "Ȓ": "R",
    "ȓ": "r",
    "Ś": "S",
    "ś": "s",
    "Ŝ": "S",
    "ŝ": "s",
    "Ş": "S",
    "Ș": "S",
    "ș": "s",
    "ş": "s",
    "Š": "S",
    "š": "s",
    "Ţ": "T",
    "ţ": "t",
    "ț": "t",
    "Ț": "T",
    "Ť": "T",
    "ť": "t",
    "Ŧ": "T",
    "ŧ": "t",
    "T̆": "T",
    "t̆": "t",
    "Ũ": "U",
    "ũ": "u",
    "Ū": "U",
    "ū": "u",
    "Ŭ": "U",
    "ŭ": "u",
    "Ů": "U",
    "ů": "u",
    "Ű": "U",
    "ű": "u",
    "Ų": "U",
    "ų": "u",
    "Ȗ": "U",
    "ȗ": "u",
    "V̆": "V",
    "v̆": "v",
    "Ŵ": "W",
    "ŵ": "w",
    "Ẃ": "W",
    "ẃ": "w",
    "X̆": "X",
    "x̆": "x",
    "Ŷ": "Y",
    "ŷ": "y",
    "Ÿ": "Y",
    "Y̆": "Y",
    "y̆": "y",
    "Ź": "Z",
    "ź": "z",
    "Ż": "Z",
    "ż": "z",
    "Ž": "Z",
    "ž": "z",
    "ſ": "s",
    "ƒ": "f",
    "Ơ": "O",
    "ơ": "o",
    "Ư": "U",
    "ư": "u",
    "Ǎ": "A",
    "ǎ": "a",
    "Ǐ": "I",
    "ǐ": "i",
    "Ǒ": "O",
    "ǒ": "o",
    "Ǔ": "U",
    "ǔ": "u",
    "Ǖ": "U",
    "ǖ": "u",
    "Ǘ": "U",
    "ǘ": "u",
    "Ǚ": "U",
    "ǚ": "u",
    "Ǜ": "U",
    "ǜ": "u",
    "Ứ": "U",
    "ứ": "u",
    "Ṹ": "U",
    "ṹ": "u",
    "Ǻ": "A",
    "ǻ": "a",
    "Ǽ": "AE",
    "ǽ": "ae",
    "Ǿ": "O",
    "ǿ": "o",
    "Þ": "TH",
    "þ": "th",
    "Ṕ": "P",
    "ṕ": "p",
    "Ṥ": "S",
    "ṥ": "s",
    "X́": "X",
    "x́": "x",
    "Ѓ": "Г",
    "ѓ": "г",
    "Ќ": "К",
    "ќ": "к",
    "A̋": "A",
    "a̋": "a",
    "E̋": "E",
    "e̋": "e",
    "I̋": "I",
    "i̋": "i",
    "Ǹ": "N",
    "ǹ": "n",
    "Ồ": "O",
    "ồ": "o",
    "Ṑ": "O",
    "ṑ": "o",
    "Ừ": "U",
    "ừ": "u",
    "Ẁ": "W",
    "ẁ": "w",
    "Ỳ": "Y",
    "ỳ": "y",
    "Ȁ": "A",
    "ȁ": "a",
    "Ȅ": "E",
    "ȅ": "e",
    "Ȉ": "I",
    "ȉ": "i",
    "Ȍ": "O",
    "ȍ": "o",
    "Ȑ": "R",
    "ȑ": "r",
    "Ȕ": "U",
    "ȕ": "u",
    "B̌": "B",
    "b̌": "b",
    "Č̣": "C",
    "č̣": "c",
    "Ê̌": "E",
    "ê̌": "e",
    "F̌": "F",
    "f̌": "f",
    "Ǧ": "G",
    "ǧ": "g",
    "Ȟ": "H",
    "ȟ": "h",
    "J̌": "J",
    "ǰ": "j",
    "Ǩ": "K",
    "ǩ": "k",
    "M̌": "M",
    "m̌": "m",
    "P̌": "P",
    "p̌": "p",
    "Q̌": "Q",
    "q̌": "q",
    "Ř̩": "R",
    "ř̩": "r",
    "Ṧ": "S",
    "ṧ": "s",
    "V̌": "V",
    "v̌": "v",
    "W̌": "W",
    "w̌": "w",
    "X̌": "X",
    "x̌": "x",
    "Y̌": "Y",
    "y̌": "y",
    "A̧": "A",
    "a̧": "a",
    "B̧": "B",
    "b̧": "b",
    "Ḑ": "D",
    "ḑ": "d",
    "Ȩ": "E",
    "ȩ": "e",
    "Ɛ̧": "E",
    "ɛ̧": "e",
    "Ḩ": "H",
    "ḩ": "h",
    "I̧": "I",
    "i̧": "i",
    "Ɨ̧": "I",
    "ɨ̧": "i",
    "M̧": "M",
    "m̧": "m",
    "O̧": "O",
    "o̧": "o",
    "Q̧": "Q",
    "q̧": "q",
    "U̧": "U",
    "u̧": "u",
    "X̧": "X",
    "x̧": "x",
    "Z̧": "Z",
    "z̧": "z",
    "й": "и",
    "Й": "И",
    "ё": "е",
    "Ё": "Е",
};
var chars = Object.keys(characterMap).join('|');
var allAccents = new RegExp(chars, 'g');
var firstAccent = new RegExp(chars, '');
function matcher(match) {
    return characterMap[match];
}
var removeAccents = function (string) {
    return string.replace(allAccents, matcher);
};
var hasAccents = function (string) {
    return !!string.match(firstAccent);
};
removeAccents$1.exports = removeAccents;
removeAccents$1.exports.has = hasAccents;
var remove = removeAccents$1.exports.remove = removeAccents;

function MultiselectOptionList({ emptyStateMessage, getItemProps, handleSelect, activeIndex, items, labelId, listRef, maxSelectedItems, menuId, selectedItems, onChange, }) {
    React.useEffect(() => onChange(items.length), [items, onChange]);
    const listProps = { "aria-labelledby": labelId };
    if (items.length === 0)
        return (React.createElement("div", Object.assign({ className: "kds-multiselect__no-result kds-my-4 kds-mx-6" }, listProps), emptyStateMessage));
    return (React.createElement("ul", { role: "presentation" }, items.map((item, index) => {
        const isSelected = selectedItems.some(({ value }) => value === item.value);
        const isDisabled = !isSelected && selectedItems.length === maxSelectedItems;
        const isHighlighted = activeIndex === index;
        const selectMethod = isSelected ? "deselect" : "select";
        const classNames = clsx("kds-multiselect__option", {
            "kds-multiselect__option--selected": isSelected,
            "kds-multiselect__option--highlighted": isHighlighted,
            "kds-multiselect__option--disabled": isDisabled,
        });
        const props = getItemProps({
            onClick(event) {
                event.preventDefault();
                handleSelect(item, selectMethod);
            },
            onKeyDown(event) {
                if (event.key === "Enter") {
                    event.preventDefault();
                    handleSelect(item, selectMethod);
                }
                if (event.key === " ") {
                    event.preventDefault();
                    handleSelect(item, selectMethod);
                }
            },
        });
        return (React.createElement("li", Object.assign({ "aria-checked": isSelected, "aria-disabled": isDisabled, className: classNames, id: `${menuId}-item-${index}`, key: item.value, ref: (node) => {
                listRef.current[index] = node;
            }, role: "option", tabIndex: index === activeIndex ? 0 : -1 }, props),
            React.createElement(Checkbox, { "aria-hidden": true, checked: isSelected, disabled: isDisabled, id: `${menuId}-checkbox-${index}`, labelText: item.label, onClick: (e) => e.preventDefault(), readOnly: true, tabIndex: -1 })));
    })));
}

const MultiselectButton = React.forwardRef(function MultiSelectButton(_a, ref) {
    var { disabled, filterButtonLabel, invalid, isFilter, isOpen, itemsSelectedText, placeholderText, selectedItems, showReset, size } = _a, rest = __rest$1(_a, ["disabled", "filterButtonLabel", "invalid", "isFilter", "isOpen", "itemsSelectedText", "placeholderText", "selectedItems", "showReset", "size"]);
    const isTestEnv = process.env.NODE_ENV === "test";
    const selectedItemsCount = selectedItems.length;
    const showFilterCount = isFilter && selectedItems.length > 0;
    const selectedItemsCountText = `${selectedItems.length} ${itemsSelectedText}`;
    const handleSelectButtonText = () => {
        if (selectedItemsCount === 0)
            return `(${placeholderText})`;
        if (selectedItemsCount === 1) {
            return selectedItems.map((selectedItem) => selectedItem.label);
        }
        return `(${selectedItemsCountText})`;
    };
    const selectButtonContainerClass = clsx("kds-multiselect__toggle", {
        "kds-multiselect__toggle--open": isOpen,
        "kds-multiselect__toggle--invalid": invalid,
    });
    const selectButtonClass = clsx("kds-multiselect__toggle-btn", {
        "kds-multiselect__toggle-btn--reset": selectedItems.length > 0 && showReset,
        [`kds-multiselect__toggle-btn--${size}`]: size && size !== "md",
    });
    return (React.createElement("div", { className: selectButtonContainerClass },
        React.createElement("button", Object.assign({ className: selectButtonClass, "data-testid": isTestEnv ? "multiselect-toggle" : undefined, disabled: disabled, ref: ref, role: "combobox", type: "button" }, rest),
            React.createElement("span", { "aria-hidden": !isFilter, className: "kds-multiselect__toggle-btn-text" },
                React.createElement("span", { className: "kds-truncate" }, isFilter ? filterButtonLabel : handleSelectButtonText()),
                showFilterCount && (React.createElement(Badge, { "aria-label": selectedItemsCountText, variant: "primary" }, selectedItemsCount))),
            React.createElement("span", { "aria-hidden": true, className: "kds-multiselect__toggle-btn-icon" }, isOpen ? React.createElement(SvgIconCaretUp, null) : React.createElement(SvgIconCaretDown, null)))));
});

const handleMessageWithPlaceholderValue = (message, placeholderValue, actualValue) => (message.indexOf(placeholderValue) > -1 ? message.replace(placeholderValue, actualValue) : message);
const handleSelectionStatusMessage = (currentSelectedItems, noSelectedItemsText, itemsSelectedText) => {
    return currentSelectedItems.length === 0
        ? noSelectedItemsText
        : `${itemsSelectedText} ${currentSelectedItems.map(({ label }) => label).join(", ")}`;
};

const getComparableArrayValue = (items) => JSON.stringify([...items].sort((a, b) => (a.value < b.value ? -1 : 1)));
const useMultipleSelection = ({ selectedItems, onSelectedItemsChange, onRemoveItem, onSelectItem, }) => {
    const items = React.useRef(selectedItems || []);
    const updateSelection = (newItems) => {
        if (getComparableArrayValue(newItems) === getComparableArrayValue(items.current))
            return;
        items.current = newItems;
        onSelectedItemsChange(newItems);
    };
    const addSelection = (item) => {
        const itemsAfterAddition = [...items.current, item];
        updateSelection(itemsAfterAddition);
        onSelectItem && onSelectItem({ item, selectedItemCount: itemsAfterAddition.length });
    };
    const removeSelection = (item) => {
        const newSelectedItems = items.current.filter((el) => el.value !== item.value);
        updateSelection(newSelectedItems);
        onRemoveItem && onRemoveItem({ item, selectedItemCount: newSelectedItems.length });
    };
    const reset = () => {
        items.current = [];
        onSelectedItemsChange([]);
    };
    return {
        addSelection,
        removeSelection,
        updateSelection,
        reset,
    };
};

/**
 * Ref-prop välitetään komponentin valintapainike-elementille (button).
 */
const Multiselect = React.forwardRef(function Multiselect(_a, ref) {
    var { a11yTextAllItemsRemoved = "Valinnat poistettu", a11yTextNoSelectedItems = "Ei valintoja", a11yTextAvailableOptions = "Valittavien vaihtoehtojen lukumäärä on ${resultCount}, käytä nuoli ylös ja nuoli alas -näppäimiä siirtääksesi kohdistusta vaihtoehtojen välillä. Valitse vaihtoehto painamalla enter tai välilyönti -näppäintä.", disabled = false, errorText, helpText, requiredLabel, usePortal = false, infoText, initialSelectedItems = [], invalid = false, inputWidth, items, itemsSelectedText = "valittu", labelText, leftCol, maxSelectedItems, required = false, resetButtonAriaLabel = "Tyhjennä valinnat", selectedItems: selectedItemsFromProps, onSelectedItemsChange, optionListEmptyStateMessage = "Ei tuloksia", placeholder = "Valitse", searchInputPlaceholderText = "Suodata valintoja", showReset = true, showSearch = false, util, className, testId, size: size$1 = "md", variant = "default", onBlur } = _a, rest = __rest$1(_a, ["a11yTextAllItemsRemoved", "a11yTextNoSelectedItems", "a11yTextAvailableOptions", "disabled", "errorText", "helpText", "requiredLabel", "usePortal", "infoText", "initialSelectedItems", "invalid", "inputWidth", "items", "itemsSelectedText", "labelText", "leftCol", "maxSelectedItems", "required", "resetButtonAriaLabel", "selectedItems", "onSelectedItemsChange", "optionListEmptyStateMessage", "placeholder", "searchInputPlaceholderText", "showReset", "showSearch", "util", "className", "testId", "size", "variant", "onBlur"]);
    const searchInputRef = React.useRef();
    const toggleButtonRef = React.useRef();
    const resetButtonRef = React.useRef();
    const containerRef = React.useRef();
    const [isOpen, setIsOpen] = React.useState(false);
    const [activeIndex, setActiveIndex] = React.useState(null);
    const [currentSelectedItems, setCurrentSelectedItems] = React.useState(selectedItemsFromProps || initialSelectedItems);
    const [userInput, setUserInput] = React.useState("");
    const [screenReaderSelectionStatusMessage, setScreenReaderSelectionStatusMessage] = React.useState("");
    const [screenReaderStatusChangeMessage, setScreenReaderStatusChangeMessage] = React.useState("");
    const liveArea = React.useRef(null);
    const isTestEnv = process.env.NODE_ENV === "test";
    const isFilter = variant === "filter";
    const isFirstRender = useIsFirstRender();
    const showErrorText = invalid && !disabled && errorText;
    const menuId = React.useId();
    const labelId = `${menuId}-label`;
    const helpTextId = `${menuId}-help-text`;
    const errorTextId = `${menuId}-error`;
    const infoTextId = `${menuId}-info`;
    const selectionStatusSRTextId = `${menuId}-selection-info`;
    const testEnvId = isTestEnv ? "multiselect-reset" : undefined;
    const buttonAriaDescribedBy = clsx({
        [`${helpTextId}`]: helpText,
        [`${errorTextId}`]: showErrorText,
        [`${infoTextId}`]: infoText,
        [`${selectionStatusSRTextId}`]: labelText,
    });
    const inputGroupClass = clsx(util || className, "kds-multiselect", {
        "kds-multiselect--filter": isFilter,
        [`kds-multiselect--${size$1}`]: size$1 && size$1 !== "md",
    });
    const mainContainerClass = clsx("kds-multiselect__list", {
        "kds-multiselect__list--invalid": disabled && invalid ? false : invalid,
    });
    const optionListContainerClass = clsx("kds-multiselect__option-list", {
        "kds-multiselect__option-list--open": isOpen,
    });
    const hasScandinavianLetters = (s) => Array.from(s).some((letter) => ["Ä", "Ö", "Å"].includes(letter.toUpperCase()));
    const removeAccentsFromSelected = (s) => (hasScandinavianLetters(s) ? s : remove(s));
    const getFilteredItems = (items, userInput) => {
        return userInput
            ? items.filter((item) => removeAccentsFromSelected(item.label.toUpperCase()).includes(removeAccentsFromSelected(userInput.toUpperCase())))
            : items;
    };
    const sortByIndexPosition = (userInput) => (a, b) => {
        if (userInput.trim() === "") {
            return 0;
        }
        const aPosition = a.label.toUpperCase().indexOf(userInput.toUpperCase());
        const bPosition = b.label.toUpperCase().indexOf(userInput.toUpperCase());
        if ((aPosition === 0 || bPosition === 0) && aPosition - bPosition !== 0) {
            return aPosition - bPosition;
        }
        const order = a.label.localeCompare(b.label);
        return order;
    };
    const filteredItems = getFilteredItems(items, userInput).sort(sortByIndexPosition(userInput));
    const { addSelection, removeSelection, reset, updateSelection } = useMultipleSelection({
        selectedItems: currentSelectedItems,
        onSelectedItemsChange: (newSelectedItems) => {
            if (newSelectedItems.length === 0) {
                setScreenReaderStatusChangeMessage(a11yTextAllItemsRemoved);
            }
            setCurrentSelectedItems(newSelectedItems);
            setScreenReaderSelectionStatusMessage(handleSelectionStatusMessage(newSelectedItems, a11yTextNoSelectedItems, itemsSelectedText));
            if (!isFirstRender) {
                onSelectedItemsChange && onSelectedItemsChange(newSelectedItems);
            }
        },
        onSelectItem: () => {
            setScreenReaderStatusChangeMessage("");
        },
    });
    const { x, y, refs, context, strategy } = useFloating({
        nodeId: menuId,
        open: isOpen,
        onOpenChange: (open) => {
            setIsOpen(open);
        },
    });
    const listRef = React.useRef([]);
    const click = useClick(context, { event: "mousedown" });
    const role = useRole(context, { role: "listbox" });
    const listNav = useListNavigation(context, {
        listRef,
        activeIndex,
        onNavigate: (i) => {
            const newIndex = showSearch && document.activeElement === searchInputRef.current ? 0 : i;
            setActiveIndex(newIndex);
        },
        loop: false,
    });
    const { getReferenceProps, getFloatingProps, getItemProps } = useInteractions([role, listNav, click]);
    React.useEffect(() => {
        if (!selectedItemsFromProps)
            return;
        setCurrentSelectedItems(selectedItemsFromProps);
        updateSelection(selectedItemsFromProps);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [selectedItemsFromProps]);
    React.useEffect(() => {
        const liveAreaTimer = setTimeout(() => {
            if (liveArea.current) {
                liveArea.current.innerHTML = screenReaderStatusChangeMessage;
            }
            return false;
        }, 500);
        return () => clearTimeout(liveAreaTimer);
    }, [screenReaderStatusChangeMessage]);
    useIsomorphicLayoutEffect$1(() => {
        var _a, _b;
        const triggerRef = refs.reference.current;
        const floatingRef = refs.floating.current;
        const minHeightIsSet = ((_b = (_a = floatingRef === null || floatingRef === void 0 ? void 0 : floatingRef.style) === null || _a === void 0 ? void 0 : _a.minHeight) === null || _b === void 0 ? void 0 : _b.indexOf("px")) > -1;
        if (!isOpen && minHeightIsSet)
            floatingRef.style.minHeight = "unset";
        if (!isOpen || !triggerRef || !floatingRef)
            return;
        const listMinHeight = floatingRef.offsetHeight;
        return autoUpdate(triggerRef, floatingRef, () => {
            computePosition(triggerRef, floatingRef, {
                placement: "bottom-start",
                strategy: "absolute",
                middleware: [
                    flip(),
                    size({
                        apply({ rects, elements }) {
                            Object.assign(elements.floating.style, {
                                width: `${rects.reference.width}px`,
                            });
                        },
                    }),
                ],
            }).then(({ x: xPos, y: yPos, placement }) => {
                Object.assign(floatingRef.style, {
                    left: `${xPos}px`,
                    top: `${yPos}px`,
                    // Keep list height unchanged when it's rendered on top
                    // and visible item count updates on search
                    minHeight: showSearch && placement.indexOf("top") > -1 ? `${listMinHeight}px` : "unset",
                });
            });
        });
    }, [isOpen, refs.reference.current, refs.floating.current, showSearch, userInput]);
    function handleRef(element) {
        refs.setReference(element);
        toggleButtonRef.current = element;
        if (typeof ref === "function") {
            ref(element);
        }
        else if (ref) {
            ref.current = element;
        }
    }
    function handleClose(e, focusElement) {
        e.preventDefault();
        focusElement && focusElement.focus();
        setIsOpen(false);
        return setActiveIndex(-1);
    }
    /**
     * Custom handling for focus
     */
    function handleKeyDown(e) {
        var _a;
        if (!isOpen)
            return;
        // Close menu on esc press and focus toggle
        if (isEsc(e)) {
            return handleClose(e, toggleButtonRef.current);
        }
        // Close menu on tab press and handle focus if search is not shown
        // and either portal is used or reset is shown
        if (!showSearch && isTab(e) && (resetButtonRef.current || usePortal)) {
            const focusTarget = (_a = resetButtonRef.current) !== null && _a !== void 0 ? _a : toggleButtonRef.current;
            return handleClose(e, focusTarget);
        }
        // Handle arrow or tab key press when search is focused
        if (document.activeElement === searchInputRef.current) {
            // Move focus to first item when search is focused
            if (isTab(e) || isDown(e)) {
                e.preventDefault();
                return setActiveIndex(0);
            }
            // Move focus to last visible item on arrow up
            if (isUp(e))
                return setActiveIndex(filteredItems.length - 1);
        }
        // If search is enabled move focus to search on tab press
        if (showSearch && isTab(e)) {
            e.preventDefault();
            searchInputRef.current.focus();
            return setActiveIndex(-1);
        }
    }
    function handleSelect(item, selectMethod) {
        if (selectMethod === "select") {
            const selectionIsDisabled = currentSelectedItems && currentSelectedItems.length === maxSelectedItems;
            !selectionIsDisabled && addSelection(item);
        }
        else {
            removeSelection(item);
        }
    }
    function handleBlur(e) {
        var _a;
        if (!e.relatedTarget ||
            (!containerRef.current.contains(e.relatedTarget) && !((_a = refs.floating.current) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)))) {
            setIsOpen(false);
            onBlur && onBlur(e);
        }
    }
    const updateItemsStatus = useDebounce((visibleItemCount) => {
        if (visibleItemCount < 1)
            return setScreenReaderStatusChangeMessage(optionListEmptyStateMessage);
        return setScreenReaderStatusChangeMessage(handleMessageWithPlaceholderValue(a11yTextAvailableOptions, "${resultCount}", visibleItemCount.toString()));
    }, 750);
    const labelAndHelpText = (React.createElement(React.Fragment, null,
        labelText && (React.createElement(InputLabel, { "aria-hidden": isFilter, center: !!leftCol, id: labelId, required: required, requiredLabel: requiredLabel, className: isFilter ? "kds-sr-only" : "" }, labelText)),
        helpText && React.createElement(InputText, { id: helpTextId }, helpText)));
    const optionListElements = (React.createElement(FloatingFocusManager, { context: context, modal: false, returnFocus: false, closeOnFocusOut: false },
        React.createElement("div", Object.assign({ className: optionListContainerClass, "data-testid": isTestEnv ? "multiselect-option-list-container" : undefined, ref: refs.setFloating, style: {
                position: strategy,
                top: y !== null && y !== void 0 ? y : 0,
                left: x !== null && x !== void 0 ? x : 0,
            } }, getFloatingProps({ id: menuId })),
            showSearch && (React.createElement("div", { className: "kds-multiselect__search" },
                React.createElement(Input, { onChange: (e) => {
                        setScreenReaderStatusChangeMessage("");
                        setUserInput(e.target.value);
                    }, placeholder: searchInputPlaceholderText, ref: searchInputRef, type: "text", value: userInput, tabIndex: -1 }))),
            React.createElement(MultiselectOptionList, { emptyStateMessage: optionListEmptyStateMessage, getItemProps: getItemProps, handleSelect: handleSelect, activeIndex: activeIndex, items: filteredItems, labelId: labelId, listRef: listRef, maxSelectedItems: maxSelectedItems, menuId: menuId, selectedItems: currentSelectedItems, onChange: (visibleItemCount) => {
                    if (document.activeElement !== searchInputRef.current)
                        return;
                    updateItemsStatus(visibleItemCount);
                } }))));
    const optionListContent = usePortal ? React.createElement(FloatingPortal, null, optionListElements) : optionListElements;
    const selectElements = (React.createElement("div", { className: "kds-relative", onKeyDown: handleKeyDown, onBlur: handleBlur },
        React.createElement("div", { className: mainContainerClass, ref: containerRef },
            React.createElement("div", { className: "kds-sr-only", id: selectionStatusSRTextId }, screenReaderSelectionStatusMessage),
            React.createElement("div", { "aria-live": "polite", className: "kds-sr-only", ref: liveArea, role: "status" }),
            React.createElement(MultiselectButton, Object.assign({ disabled: disabled, filterButtonLabel: labelText || placeholder, invalid: invalid, isFilter: isFilter, isOpen: isOpen, size: size$1, itemsSelectedText: itemsSelectedText, placeholderText: placeholder, ref: handleRef, selectedItems: currentSelectedItems, showReset: showReset }, getReferenceProps({
                "aria-activedescendant": `${menuId}-item-${activeIndex}`,
                "aria-controls": menuId,
                "aria-describedby": buttonAriaDescribedBy,
                "aria-labelledby": labelId,
                "aria-owns": menuId,
            }))),
            isOpen && optionListContent,
            showReset && currentSelectedItems.length ? (React.createElement("button", { "aria-label": resetButtonAriaLabel, className: "kds-multiselect__reset-btn", "data-testid": testEnvId, disabled: disabled, onClick: (e) => {
                    e.stopPropagation();
                    reset();
                    toggleButtonRef.current.focus();
                }, type: "button", ref: resetButtonRef },
                React.createElement(SvgIconClose, null))) : null)));
    const mainContent = (React.createElement(React.Fragment, null,
        showErrorText && (React.createElement(InputText, { error: true, id: errorTextId }, errorText)),
        inputWidth ? React.createElement(Row$1, { gx: 2 }, inputWidth(selectElements)) : selectElements,
        infoText && (React.createElement(InputText, { id: infoTextId, info: true, className: "kds-mt-2" }, infoText))));
    return (React.createElement(InputGroup, Object.assign({ "data-testid": testId, row: !!leftCol, className: inputGroupClass }, rest),
        leftCol ? leftCol(labelAndHelpText) : labelAndHelpText,
        leftCol ? React.createElement(Column, null, mainContent) : mainContent));
});

const SkipLink = React.forwardRef((_a, ref) => {
    var { href, onClick, children, testId, className } = _a, rest = __rest$1(_a, ["href", "onClick", "children", "testId", "className"]);
    return (React.createElement("a", Object.assign({ className: clsx("kds-skip-link kds-sr-focusable", className), href: href, onClick: onClick, ref: ref, "data-testid": testId }, rest),
        React.createElement("span", null, children),
        React.createElement(SvgIconCaretRight, { className: "kds-ml-2" })));
});
SkipLink.displayName = "SkipLink";

/**
 * Ref-prop välitetään kohdistuksen resetointiin tarkoitetulle, piilotetulle span-elementille.
 */
const Page = React.forwardRef((_a, ref) => {
    var { pageToolbar, sidebar, layout, footer, isOpen, jumpToContentLabel, jumpToContentHref, jumpToContentOnClick, util, className, focusResetText, focusResetId, testId } = _a, attrs = __rest$1(_a, ["pageToolbar", "sidebar", "layout", "footer", "isOpen", "jumpToContentLabel", "jumpToContentHref", "jumpToContentOnClick", "util", "className", "focusResetText", "focusResetId", "testId"]);
    const containerClassNames = clsx("kds-page", util || className, {
        "kds-page--sidebar-visible": isOpen,
    });
    return (React.createElement(React.Fragment, null,
        focusResetId && focusResetText && (React.createElement("span", { ref: ref, id: focusResetId, className: "kds-sr-only", tabIndex: -1 }, focusResetText)),
        jumpToContentHref && jumpToContentLabel && (React.createElement(SkipLink, { href: jumpToContentHref, onClick: jumpToContentOnClick }, jumpToContentLabel)),
        React.createElement("div", Object.assign({ "data-testid": testId, className: containerClassNames }, attrs),
            pageToolbar,
            sidebar,
            layout,
            footer)));
});
Page.displayName = "Page";

function Pagination(_a) {
    var { children, util, className, testId } = _a, attrs = __rest$1(_a, ["children", "util", "className", "testId"]);
    const classNames = clsx("kds-pagination", util || className);
    return (React.createElement("nav", Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}

/**
 * Ref-prop välitetään komponentin renderöimän painikkeen HTML-elementille.
 */
const PaginationButton = React.forwardRef((_a, ref) => {
    var { active = false, caret = false, onClick = () => void 0, disabled = false, util, className, testId, children, previous = false, next = false } = _a, attrs = __rest$1(_a, ["active", "caret", "onClick", "disabled", "util", "className", "testId", "children", "previous", "next"]);
    const classString = "kds-pagination__btn";
    const classNames = clsx(util || className, classString, {
        [`${classString}--active`]: active,
        [`${classString}--disabled`]: disabled,
        [`${classString}--previous`]: previous,
        [`${classString}--next`]: next,
        [`${classString}--caret kds-btn--toggle`]: caret,
    });
    const childrenWithIconClassNames = clsx("kds-grow", {
        "kds-text-end": previous,
        "kds-text-start": next,
    });
    return (React.createElement("button", Object.assign({ "data-testid": testId, className: classNames, onClick: onClick, ref: ref, disabled: disabled, "aria-current": active ? "page" : undefined, type: "button" }, attrs),
        previous ? React.createElement(SvgIconCaretLeft, { className: childrenWithIconClassNames }) : null,
        children,
        next ? React.createElement(SvgIconCaretRight, { className: childrenWithIconClassNames }) : null));
});
PaginationButton.displayName = "PaginationButton";

function PaginationGroup(_a) {
    var { children, util, className, testId } = _a, attrs = __rest$1(_a, ["children", "util", "className", "testId"]);
    const classNames = clsx("kds-pagination__group", util || className);
    return (React.createElement("div", Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
PaginationGroup.defaultProps = {
    util: "",
};

const defaultElement$f = "span";
function PaginationMoreText({ more, srOnlyText, children }) {
    if (more && srOnlyText) {
        return (React.createElement(React.Fragment, null,
            React.createElement("span", { "aria-hidden": true }, "\u2026"),
            React.createElement("span", { className: "kds-sr-only" }, srOnlyText)));
    }
    if (more) {
        return React.createElement(React.Fragment, null, "\u2026");
    }
    return React.createElement(React.Fragment, null, children);
}
function PaginationText(_a) {
    var { as, more, util, className, children, testId, srOnlyText } = _a, attrs = __rest$1(_a, ["as", "more", "util", "className", "children", "testId", "srOnlyText"]);
    const Tag = as || defaultElement$f;
    const classNames = clsx(util || className, "kds-pagination__text");
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs),
        React.createElement(PaginationMoreText, { more: more, srOnlyText: srOnlyText }, children)));
}
PaginationText.defaultProps = {
    as: defaultElement$f,
    more: false,
    util: "",
    srOnlyText: "",
};

const defaultElement$e = "fieldset";
const SimplePanel = (_a) => {
    var { as, variant, id, testId, heading, headingAs, util, className, children } = _a, attrs = __rest$1(_a, ["as", "variant", "id", "testId", "heading", "headingAs", "util", "className", "children"]);
    const Tag = as || defaultElement$e;
    const panelClassNames = clsx("kds-panel", util || className, {
        [`kds-panel--${variant}`]: variant,
    });
    return (React.createElement(Tag, Object.assign({ id: id, className: panelClassNames, "data-testid": testId }, attrs),
        React.createElement("legend", { className: "kds-sr-only" }, heading),
        React.createElement("div", { className: "kds-panel__header" }, headingAs && (React.createElement(Heading, { as: headingAs, size: 4, className: "kds-m-0" }, heading))),
        children));
};

const defaultElement$d = "fieldset";
const CollapsePanel = (_a) => {
    var { as, variant, id, isOpen, heading, headingAs, onClick, testId, util, className, children, animate } = _a, attrs = __rest$1(_a, ["as", "variant", "id", "isOpen", "heading", "headingAs", "onClick", "testId", "util", "className", "children", "animate"]);
    const Tag = as || defaultElement$d;
    const elRef = React.useRef(null);
    const toggleCollapse = useCollapse(elRef, !!isOpen, animate);
    const generatedId = React.useId();
    const elementId = id || generatedId;
    React.useEffect(() => {
        toggleCollapse();
    }, [isOpen, toggleCollapse]);
    const panelClassNames = clsx("kds-panel", "kds-panel--collapse", util || className, {
        [`kds-panel--${variant}`]: variant,
    });
    const handleClick = (e) => {
        e.preventDefault();
        onClick && onClick(e);
    };
    return (React.createElement(Tag, Object.assign({ id: elementId, "data-testid": testId, className: panelClassNames }, attrs),
        React.createElement("legend", { className: "kds-sr-only" }, heading),
        React.createElement("button", { type: "button", id: `${elementId}-toggle`, className: "kds-panel__toggle", onClick: (e) => handleClick(e), "aria-controls": `${elementId}-body`, "aria-expanded": isOpen },
            React.createElement("div", { className: "kds-grow" }, headingAs && (React.createElement(Heading, { as: headingAs, size: 4, className: "kds-m-0" }, heading))),
            isOpen ? (React.createElement(SvgIconCaretUp, { className: "kds-panel__toggle-icon", "aria-hidden": "true" })) : (React.createElement(SvgIconCaretDown, { className: "kds-panel__toggle-icon", "aria-hidden": "true" }))),
        React.createElement("div", { ref: elRef, id: `${elementId}-body` }, children)));
};

const defaultElement$c = "fieldset";
function Panel(props) {
    if (props.isOpen !== undefined || props.onClick !== undefined) {
        return React.createElement(CollapsePanel, Object.assign({}, props), props.children);
    }
    const simpleProps = Object.assign({}, props);
    delete simpleProps.onClick;
    delete simpleProps.isOpen;
    delete simpleProps.animate;
    return React.createElement(SimplePanel, Object.assign({}, simpleProps), props.children);
}
Panel.defaultProps = {
    as: defaultElement$c,
    variant: "primary",
    headingAs: "h2",
    animate: true,
};

const defaultElement$b = "div";
function PanelActions(_a) {
    var { as, util, className, children, testId } = _a, attrs = __rest$1(_a, ["as", "util", "className", "children", "testId"]);
    const Tag = as || defaultElement$b;
    const classNames = clsx("kds-panel__actions", util || className);
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
PanelActions.defaultProps = {
    as: defaultElement$b,
};

const defaultElement$a = "div";
function PanelBody(_a) {
    var { as, util, className, children, testId } = _a, attrs = __rest$1(_a, ["as", "util", "className", "children", "testId"]);
    const Tag = as || defaultElement$a;
    const classNames = clsx("kds-panel__body", util || className);
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
PanelBody.defaultProps = {
    as: defaultElement$a,
};

/**
 * Ref-prop välitetään komponentin input-elementille.
 */
const Radio = React.forwardRef((_a, ref) => {
    var { id, labelText, infoText, hideLabel = false, invalid = false, disabled = false, testId, size = "md", requiredGroup = false, center = false, util, className } = _a, attrs = __rest$1(_a, ["id", "labelText", "infoText", "hideLabel", "invalid", "disabled", "testId", "size", "requiredGroup", "center", "util", "className"]);
    const generatedId = React.useId();
    const elementId = id || generatedId;
    const containerClassNames = clsx("kds-option kds-radio kds-flex", util || className, {
        "kds-option--centered": center,
        "kds-option--label-hidden": hideLabel,
        "kds-option--invalid kds-radio--invalid": disabled && invalid ? false : invalid,
    });
    const inputClassName = clsx("kds-option__input kds-radio__input", {
        [`kds-option__input--${size}`]: size && size !== "md",
        [`kds-radio__input--${size}`]: size && size !== "md",
    });
    const labelClassNames = clsx("kds-flex kds-flex-col", {
        "kds-sr-only": hideLabel,
        "kds-text-sm": size === "xs",
    });
    return (React.createElement("div", { className: containerClassNames, "data-testid": testId },
        React.createElement("input", Object.assign({ type: "radio", id: elementId, ref: ref, disabled: disabled, className: inputClassName, required: requiredGroup }, attrs)),
        !infoText || typeof infoText === "string" ? (React.createElement("label", { className: "kds-option__label", htmlFor: elementId },
            React.createElement("span", { className: labelClassNames },
                React.createElement("span", null, labelText),
                infoText && React.createElement("small", { className: "kds-input-text--info" }, infoText)))) : (React.createElement("div", { className: "kds-flex kds-flex-col" },
            React.createElement("label", { className: "kds-option__label", htmlFor: elementId },
                React.createElement("span", { className: labelClassNames },
                    React.createElement("span", null, labelText))),
            React.createElement("div", { className: "kds-input-text--info kds-pl-2" }, infoText)))));
});
Radio.displayName = "Radio";

const SvgResultDanger = (props) => (React__namespace.createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100" }, props),
    React__namespace.createElement("circle", { cx: 50, cy: 50, r: 50, fill: "#faafc8" }),
    React__namespace.createElement("path", { fill: "#fff", d: "M73.88 30.86v33.51a2.74 2.74 0 0 1-2.8 2.63H46.49l-9.14 11.55a1.09 1.09 0 0 1-.85.41 1.15 1.15 0 0 1-1.08-1.1V67h-6.5a2.71 2.71 0 0 1-2.8-2.64V30.81a2.76 2.76 0 0 1 .82-1.87 2.67 2.67 0 0 1 2-.77h42.17a2.9 2.9 0 0 1 2 .77 2.65 2.65 0 0 1 .77 1.92" }),
    React__namespace.createElement("path", { fill: "#ec3484", d: "M58.12 54.09a1.3 1.3 0 0 1-1.88 1.8L50 49.38l-6.24 6.51a1.3 1.3 0 1 1-1.88-1.8l6.32-6.59-6.32-6.59a1.3 1.3 0 1 1 1.88-1.8L50 45.62l6.24-6.51a1.3 1.3 0 0 1 1.88 1.8L51.8 47.5Z" })));

const SvgResultInfo = (props) => (React__namespace.createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100" }, props),
    React__namespace.createElement("circle", { cx: 50, cy: 50, r: 50, fill: "#a5c5fc" }),
    React__namespace.createElement("path", { fill: "#fff", d: "M73.88 30.87v33.5a2.75 2.75 0 0 1-2.8 2.63H46.49l-9.14 11.55a1.1 1.1 0 0 1-.85.42 1.07 1.07 0 0 1-.36-.08 1.09 1.09 0 0 1-.72-1V67h-6.5a2.71 2.71 0 0 1-2.8-2.65V30.82a2.79 2.79 0 0 1 .82-1.88 2.67 2.67 0 0 1 2-.77h42.17a2.9 2.9 0 0 1 2 .77 2.68 2.68 0 0 1 .77 1.93" }),
    React__namespace.createElement("circle", { cx: 50, cy: 37.37, r: 2.25, fill: "#3b81de" }),
    React__namespace.createElement("path", { fill: "#3b81de", d: "M53.49 57.59a1.3 1.3 0 0 1-1.3 1.3h-4.37a1.3 1.3 0 0 1 0-2.6h.88V45h-.37a1.3 1.3 0 0 1 0-2.6h3.34a1.3 1.3 0 0 1 0 2.6h-.37v11.29h.89a1.3 1.3 0 0 1 1.3 1.3" })));

const SvgResultSuccess = (props) => (React__namespace.createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100" }, props),
    React__namespace.createElement("circle", { cx: 50, cy: 50, r: 50, fill: "#86d4a2" }),
    React__namespace.createElement("path", { fill: "#fff", d: "M73.88 30.86v33.51a2.74 2.74 0 0 1-2.8 2.63H46.49l-9.14 11.55a1.09 1.09 0 0 1-.85.41 1.15 1.15 0 0 1-1.08-1.1V67h-6.5a2.71 2.71 0 0 1-2.8-2.64V30.81a2.76 2.76 0 0 1 .82-1.87 2.67 2.67 0 0 1 2-.77h42.17a2.9 2.9 0 0 1 2 .77 2.65 2.65 0 0 1 .77 1.92" }),
    React__namespace.createElement("path", { fill: "#09953b", d: "M47.92 56.77a1.32 1.32 0 0 1-1.07-.56l-6.74-9.65a1.3 1.3 0 0 1 2.13-1.49l5.67 8.11 9.84-14.38a1.3 1.3 0 1 1 2.15 1.47L49 56.2a1.33 1.33 0 0 1-1.06.57Z" })));

const SvgResultWarning = (props) => (React__namespace.createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100" }, props),
    React__namespace.createElement("circle", { cx: 50, cy: 50, r: 50, fill: "#fedd9f" }),
    React__namespace.createElement("path", { fill: "#fff", d: "M73.88 30.86v33.51a2.74 2.74 0 0 1-2.8 2.63H46.49l-9.14 11.55a1.09 1.09 0 0 1-.85.41 1.15 1.15 0 0 1-1.08-1.1V67h-6.5a2.71 2.71 0 0 1-2.8-2.64V30.81a2.76 2.76 0 0 1 .82-1.87 2.67 2.67 0 0 1 2-.77h42.17a2.9 2.9 0 0 1 2 .77 2.65 2.65 0 0 1 .77 1.92" }),
    React__namespace.createElement("circle", { cx: 50, cy: 56.6, r: 2.25, fill: "#c56745" }),
    React__namespace.createElement("path", { fill: "#c56745", d: "M50 51.5a1.3 1.3 0 0 1-1.3-1.3V36.34a1.3 1.3 0 1 1 2.6 0V50.2a1.3 1.3 0 0 1-1.3 1.3" })));

const getResultIllustration = (variant) => {
    switch (variant) {
        case "success":
            return React.createElement(SvgResultSuccess, { "aria-hidden": "true", className: "kds-result__icon" });
        case "warning":
            return React.createElement(SvgResultWarning, { "aria-hidden": "true", className: "kds-result__icon" });
        case "danger":
            return React.createElement(SvgResultDanger, { "aria-hidden": "true", className: "kds-result__icon" });
        default:
            return React.createElement(SvgResultInfo, { "aria-hidden": "true", className: "kds-result__icon" });
    }
};
function Result(_a) {
    var { children, variant, title, titleAs, testId, msg, util, className } = _a, attrs = __rest$1(_a, ["children", "variant", "title", "titleAs", "testId", "msg", "util", "className"]);
    const containerClassNames = clsx("kds-result", util || className);
    return (React.createElement("div", Object.assign({ role: "alert", className: containerClassNames, "data-testid": testId }, attrs),
        getResultIllustration(variant),
        title && (React.createElement(Heading, { as: titleAs, size: 4, className: "kds-mt-0 kds-mb-4" }, title)),
        msg && React.createElement("p", { className: "kds-text-muted" }, msg),
        children));
}
Result.defaultProps = {
    variant: "info",
    titleAs: "h2",
};

/**
 * Attempt to detect mobile Safari.
 * If the detection fails, for one reason or another, a falsy value is returned.
 * userAgentData: newer API
 * userAgent: older API
 */
const isIOS = () => {
    try {
        const userAgentData = "userAgentData" in navigator ? navigator.userAgentData : false;
        userAgentData
            ? userAgentData.platform.match(/(iPad|iPhone|iPod);/i)
            : navigator.userAgent.match(/(iPad|iPhone|iPod);/i);
    }
    catch (err) {
        return null;
    }
};
/**
 * Ref-prop välitetään komponentin input-elementille.
 */
const Select = React.forwardRef((_a, ref) => {
    var { invalid = false, disabled = false, children, util, className, testId, size = "md" } = _a, attrs = __rest$1(_a, ["invalid", "disabled", "children", "util", "className", "testId", "size"]);
    const wrapperClassNames = clsx("kds-select", {
        "kds-select--disabled": disabled,
        [`kds-select--${size}`]: size && size !== "md",
    });
    const classNames = clsx("kds-select__input", util || className, {
        "kds-select__input--invalid": disabled && invalid ? false : invalid,
        [`kds-select__input--${size}`]: size && size !== "md",
    });
    return (React.createElement("div", { className: wrapperClassNames, "data-testid": testId },
        React.createElement("select", Object.assign({ ref: ref, className: classNames, disabled: disabled }, attrs),
            children,
            isIOS() != null && React.createElement("optgroup", { label: "", "aria-hidden": "true" }))));
});
Select.displayName = "Select";

const Fieldset = (_a) => {
    var { disabled, className, children } = _a, attrs = __rest$1(_a, ["disabled", "className", "children"]);
    const containerClassNames = clsx("kds-selection-group", className);
    return (React.createElement("fieldset", Object.assign({ className: containerClassNames, disabled: disabled }, attrs), children));
};

const FieldsetLegend = ({ visibleText, hiddenText, required, requiredLabel, visuallyHidden, }) => (React.createElement(InputLabel, { as: "legend", required: required, requiredLabel: requiredLabel, className: visuallyHidden ? "kds-sr-only" : undefined },
    visibleText,
    hiddenText && React.createElement("span", { className: "kds-sr-only" }, hiddenText)));

const groupChildren = (children, invalid, required) => React.Children.map(children, (child) => {
    if (!React.isValidElement(child))
        return;
    const isOption = child.type === Checkbox || child.type === Radio;
    if (isOption) {
        return React.cloneElement(child, {
            invalid,
            requiredGroup: required,
        });
    }
    return child;
});

const OneColSelectionGroup = (_a) => {
    var { required, disabled, invalid, labelText, helpText, requiredLabel, errorText, util, className, children, inputWidth } = _a, attrs = __rest$1(_a, ["required", "disabled", "invalid", "labelText", "helpText", "requiredLabel", "errorText", "util", "className", "children", "inputWidth"]);
    const isInvalid = !disabled && invalid;
    return (React.createElement(Fieldset, Object.assign({ className: util || className, disabled: disabled }, attrs),
        labelText && (React.createElement(FieldsetLegend, { requiredLabel: requiredLabel, required: required, visibleText: labelText, hiddenText: `${helpText} ${isInvalid && errorText ? errorText : ""}` })),
        helpText && React.createElement(InputText, { "aria-hidden": "true" }, helpText),
        isInvalid && errorText && (React.createElement(InputText, { error: isInvalid, className: "kds-mb-2", "aria-hidden": "true" }, errorText)),
        inputWidth ? (React.createElement(Row$1, { form: true }, inputWidth(React.createElement(React.Fragment, null, groupChildren(children, isInvalid, required))))) : (React.createElement(React.Fragment, null, groupChildren(children, isInvalid, required)))));
};
OneColSelectionGroup.defaultProps = {
    labelText: "",
    errorText: "",
    helpText: "",
    required: false,
    disabled: false,
    invalid: false,
    util: "",
};

const TwoColSelectionGroup = (_a) => {
    var { required, disabled, invalid, labelText, helpText, errorText, requiredLabel, util, className, leftCol, inputWidth, children } = _a, rest = __rest$1(_a, ["required", "disabled", "invalid", "labelText", "helpText", "errorText", "requiredLabel", "util", "className", "leftCol", "inputWidth", "children"]);
    const isInvalid = !disabled && invalid;
    /**
     * Left column contains visible label & help text.
     */
    const leftColChildren = (React.createElement(React.Fragment, null,
        React.createElement(InputLabel, { requiredLabel: requiredLabel, "aria-hidden": "true", required: required }, labelText),
        helpText && React.createElement(InputText, { "aria-hidden": "true" }, helpText)));
    /**
     * Right column contains children, e.g., Radio or Checkbox -components.
     */
    const rightColChildren = React.createElement(React.Fragment, null, groupChildren(children, isInvalid, required));
    return (React.createElement(Fieldset, Object.assign({ className: util || className, disabled: disabled }, rest),
        labelText && (React.createElement(FieldsetLegend, { requiredLabel: requiredLabel, required: required, visuallyHidden: true, visibleText: labelText, hiddenText: `${helpText} ${isInvalid && errorText ? errorText : ""}` })),
        React.createElement(Row$1, { form: true },
            leftCol(leftColChildren),
            React.createElement(Column, null,
                isInvalid && errorText && !disabled && (React.createElement(InputText, { error: isInvalid, className: "kds-mb-2", "aria-hidden": "true" }, errorText)),
                inputWidth ? React.createElement(Row$1, { form: true }, inputWidth(rightColChildren)) : rightColChildren))));
};
TwoColSelectionGroup.defaultProps = {
    labelText: "",
    errorText: "",
    helpText: "",
    required: false,
    disabled: false,
    invalid: false,
    util: "",
};

function SelectionGroup(_a) {
    var { leftCol, testId } = _a, rest = __rest$1(_a, ["leftCol", "testId"]);
    if (leftCol) {
        return React.createElement(TwoColSelectionGroup, Object.assign({ "data-testid": testId, leftCol: leftCol }, rest));
    }
    return React.createElement(OneColSelectionGroup, Object.assign({ "data-testid": testId }, rest));
}
SelectionGroup.defaultProps = {
    labelText: "",
    errorText: "",
    helpText: "",
    required: false,
    disabled: false,
    invalid: false,
    util: "",
};

const initialContext = {
    isOpen: false,
    isOverlay: false,
    toggleSidebar: () => { },
};
const SidebarContext = React.createContext(initialContext);

/**
 * Enable / Disable body scrolling.
 */
const scrollableBody = (enable) => {
    if (enable)
        document.body.classList.remove("kds-overflow-hidden");
    else
        document.body.classList.add("kds-overflow-hidden");
};
function Sidebar(_a) {
    var { isOpen, isOverlay, toggle, title, description, navLinks, testId, closeLabel, logo, util, className, animate } = _a, attrs = __rest$1(_a, ["isOpen", "isOverlay", "toggle", "title", "description", "navLinks", "testId", "closeLabel", "logo", "util", "className", "animate"]);
    const sidebarTriggerNode = React.useRef();
    const sidebarContainerNode = React.useRef(null);
    const focusableChildren = React.useRef(null);
    const handleTransitionEnd = () => {
        if (isOpen && isOverlay && sidebarContainerNode && sidebarContainerNode.current) {
            sidebarContainerNode.current.focus();
        }
    };
    const renderTitleSection = logo || title || description;
    React.useEffect(() => {
        if (isOverlay && isOpen) {
            // Store previous focused element on open
            try {
                sidebarTriggerNode.current = document.activeElement;
            }
            catch (err) {
                sidebarTriggerNode.current = null;
            }
        }
        else if (isOverlay && !isOpen) {
            // Return focus to previous element when Sidebar is closed
            if (sidebarTriggerNode && sidebarTriggerNode.current) {
                sidebarTriggerNode.current.focus();
            }
        }
    }, [isOpen, isOverlay]);
    /**
     * Handle keyboard events for closing the Sidebar / navigating focusable elements.
     */
    const handleKeyDown = (e) => {
        if (!isOpen)
            return null;
        if (focusableChildren && focusableChildren.current) {
            focusableChildren.current = sidebarContainerNode.current
                ? getFocusableChildren(sidebarContainerNode.current)
                : null;
        }
        let { activeElement } = document;
        try {
            activeElement = document.activeElement;
        }
        catch (err) {
            [activeElement] = focusableChildren.current;
            if (activeElement !== null) {
                activeElement.focus();
            }
        }
        if (focusableChildren && focusableChildren.current) {
            const currentIndex = focusableChildren.current.indexOf(activeElement);
            if (isEsc(e) && isOverlay) {
                toggle();
            }
            else if ((isUp(e) && currentIndex === 0) || (isOverlay && isTabBackward(e) && currentIndex === 0)) {
                e.preventDefault();
                focusableChildren.current[focusableChildren.current.length - 1].focus();
            }
            else if (isUp(e)) {
                e.preventDefault();
                focusableChildren.current[currentIndex - 1].focus();
            }
            else if ((isDown(e) && currentIndex === focusableChildren.current.length - 1) ||
                (isOverlay && isTabForward(e) && currentIndex === focusableChildren.current.length - 1)) {
                e.preventDefault();
                focusableChildren.current[0].focus();
            }
            else if (isDown(e)) {
                e.preventDefault();
                focusableChildren.current[currentIndex + 1].focus();
            }
        }
    };
    React.useEffect(() => {
        // Close menu by calling toggle-function when event target is outside Sidebar.
        const handleClickOutside = (e) => {
            if (sidebarContainerNode && sidebarContainerNode.current) {
                if (isOpen && !sidebarContainerNode.current.contains(e.target)) {
                    toggle();
                }
            }
        };
        /**
         * Add & remove click event listener when Sidebar is in overlay mode.
         * When overlay is open, Sidebar listens for click events outside the component.
         * Listerner is removed when menu is closed or not in overlay mode.
         */
        if (isOpen && isOverlay) {
            document.addEventListener("click", handleClickOutside);
            scrollableBody(false);
        }
        return () => {
            if (isOverlay) {
                document.removeEventListener("click", handleClickOutside);
                scrollableBody(true);
            }
        };
    }, [isOpen, isOverlay, toggle]);
    /**
     * Update focusable children when component updates.
     */
    React.useEffect(() => {
        focusableChildren.current = sidebarContainerNode.current
            ? getFocusableChildren(sidebarContainerNode.current)
            : null;
    });
    const contextValues = {
        isOpen,
        toggleSidebar: toggle,
        isOverlay,
    };
    const containerClassNames = clsx("kds-sidebar", util || className, {
        "kds-sidebar--visible": isOpen,
        "kds-sidebar--hidden": !isOpen,
        "kds-sidebar--animated": animate,
    });
    const navClassNames = clsx("kds-mb-4", {
        "kds-mt-4": !renderTitleSection,
    });
    return (React.createElement("nav", Object.assign({ "data-testid": testId, ref: sidebarContainerNode, onKeyDown: (e) => handleKeyDown(e), className: containerClassNames, tabIndex: -1, onTransitionEnd: () => handleTransitionEnd() }, attrs),
        isOverlay && (React.createElement("button", { type: "button", className: "kds-mr-auto kds-sidebar__btn-close", "aria-label": closeLabel, onClick: toggle },
            React.createElement(SvgIconClose, null))),
        renderTitleSection && (React.createElement("div", { className: "kds-px-6 kds-pt-0 kds-pt-12 kds-pb-6" },
            logo,
            title && React.createElement("p", { className: "kds-mt-2 kds-mb-0 kds-font-bold" }, title),
            description && React.createElement("p", { className: "kds-mt-2 kds-mb-0 kds-text-muted" }, description))),
        React.createElement(SidebarContext.Provider, { value: contextValues },
            React.createElement("div", { className: navClassNames }, navLinks))));
}
Sidebar.defaultProps = {
    title: "",
    description: "",
    util: "",
    animate: true,
};

const defaultElement$9 = "a";
function SidebarNavItem(_a) {
    var { active = false, as, children, disabled = false, iconAfter, iconBefore, linkColor = false, onClick, preventAutoToggle = false, testId, util, className } = _a, attrs = __rest$1(_a, ["active", "as", "children", "disabled", "iconAfter", "iconBefore", "linkColor", "onClick", "preventAutoToggle", "testId", "util", "className"]);
    const Tag = as || defaultElement$9;
    const { toggleSidebar, isOverlay } = React.useContext(SidebarContext);
    const classNames = clsx("kds-sidebar__nav-item", util || className, {
        "kds-sidebar__nav-item--link-with-color": linkColor,
        "kds-sidebar__nav-item--active": active,
        "kds-sidebar__nav-item--disabled": disabled && Tag === "a",
    });
    const handleClick = (e) => {
        if (toggleSidebar !== null) {
            if (!preventAutoToggle && isOverlay)
                toggleSidebar();
            if (typeof onClick === "function")
                onClick(e);
        }
    };
    return (React.createElement(Tag, Object.assign({ "data-testid": testId, className: classNames, onClick: (e) => handleClick(e), disabled: Tag === "button" && disabled ? true : undefined, "aria-current": active ? "page" : null }, attrs),
        iconBefore && React.createElement("div", { className: "kds-mr-4" }, iconBefore),
        children,
        iconAfter && React.createElement("div", { className: "kds-ml-auto" }, iconAfter)));
}
SidebarNavItem.defaultProps = {
    as: defaultElement$9,
};

const defaultElement$8 = "h2";
function SidebarNavHeading(_a) {
    var { as, children, testId, util, className } = _a, attrs = __rest$1(_a, ["as", "children", "testId", "util", "className"]);
    const headingAs = as || defaultElement$8;
    const cssClass = clsx("kds-sidebar__nav-heading", util || className);
    return (React.createElement(Heading, Object.assign({ as: headingAs, size: "category", testId: testId, className: cssClass }, attrs), children));
}
SidebarNavHeading.defaultProps = {
    as: defaultElement$8,
    util: "",
};

function SplitButton(_a) {
    var { children, variant, outline, testId, util, className } = _a, attrs = __rest$1(_a, ["children", "variant", "outline", "testId", "util", "className"]);
    const classNames = clsx(util || className, "kds-split-btn");
    if (React.Children.count(children) < 2) {
        console.error("Virhe, SplitButtonin sisällä tulee olla tasan kaksi lapsikomponenttia.");
        return null;
    }
    return (React.createElement("div", Object.assign({ className: classNames, "data-testid": testId }, attrs), React.Children.map(children, (child) => React.isValidElement(child) &&
        React.cloneElement(child, { variant, appearance: outline ? "outline" : "solid", rounded: undefined }))));
}
SplitButton.defaultProps = {
    variant: undefined,
    children: null,
    outline: false,
    util: "",
};

const defaultElement$7 = "button";
/**
 * Ref-prop välitetään komponentin renderöimän painikkeen HTML-elementille.
 */
const Tab = React.forwardRef((_a, ref) => {
    var { label, onClick, onKeyDown, util, className, activeTab, testId, as } = _a, rest = __rest$1(_a, ["label", "onClick", "onKeyDown", "util", "className", "activeTab", "testId", "as"]);
    const Tag = as || defaultElement$7;
    return (React.createElement(Tag, Object.assign({ "data-testid": testId, type: Tag === "button" ? "button" : undefined, role: "tab", ref: ref, onClick: onClick, className: clsx("kds-tabs__btn", { "kds-tabs__btn--active": activeTab }, util || className), onKeyDown: onKeyDown }, rest),
        React.createElement("span", { className: "kds-tabs__btn-label" }, label)));
});
Tab.displayName = "Tab";
Tab.defaultProps = {
    as: defaultElement$7,
};

const TabScrollButton = ({ onClick, isVisible, icon, }) => {
    return (React.createElement("button", { "aria-hidden": "true", tabIndex: -1, type: "button", className: clsx("kds-tabs__scroll-btn kds-tabs__scroll-btn--start", {
            "kds-invisible": !isVisible,
        }), onClick: onClick }, icon));
};

function Tabs(_a) {
    var { children, small, activePanel, testId, selectionFollowsFocus, scrollable, flush, util, className, mode = "dynamic", onSelect } = _a, rest = __rest$1(_a, ["children", "small", "activePanel", "testId", "selectionFollowsFocus", "scrollable", "flush", "util", "className", "mode", "onSelect"]);
    const isFirstRender = useIsFirstRender();
    const debouncedWindowResize = useDebounce(() => checkScrollPosition(), 250);
    const [activeTab, setActiveTab] = React.useState(activePanel);
    const [hasFocusableChildren, sethasFocusableChildren] = React.useState(false);
    const [isScrollable, setIsScrollable] = React.useState(scrollable);
    const [isLeftScrollVisible, setIsLeftScrollVisible] = React.useState(false);
    const [isRightScrollVisible, setIsRightScrollVisible] = React.useState(true);
    const activeLink = React.useRef(null);
    const listRef = React.useRef(null);
    const contentRef = React.useRef(null);
    React.useEffect(() => {
        if (!Array.isArray(children))
            return;
        const newTab = activePanel > children.length - 1 ? 0 : activePanel;
        setActiveTab(newTab);
    }, [activePanel, children]);
    const changeTab = (index) => {
        if (typeof onSelect === "function") {
            onSelect(index);
        }
        else {
            setActiveTab(index);
        }
    };
    React.useEffect(() => {
        // Listen to scrollevents in tablist
        const el = listRef.current;
        el === null || el === void 0 ? void 0 : el.addEventListener("scroll", checkScrollPosition, false);
        window.addEventListener("resize", handleResize, false);
        return () => {
            window.removeEventListener("resize", handleResize);
            el === null || el === void 0 ? void 0 : el.removeEventListener("scroll", checkScrollPosition);
            debouncedWindowResize.cancel();
        };
        // Only run this on mount / unmount.
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    React.useEffect(() => {
        const el = listRef.current;
        // Check if tab has focusable children
        contentRef.current && getFocusableChildren(contentRef.current).length
            ? sethasFocusableChildren(true)
            : sethasFocusableChildren(false);
        // Check if tablist should scroll
        (el === null || el === void 0 ? void 0 : el.scrollWidth) > (el === null || el === void 0 ? void 0 : el.clientWidth) ? setIsScrollable(true) : setIsScrollable(false);
    }, [isFirstRender, activePanel, activeTab, isScrollable, children]);
    const handleScroll = (scrollOffset) => {
        listRef.current.scrollLeft += scrollOffset / 2;
    };
    const checkScrollPosition = () => {
        var _a;
        listRef.current.scrollLeft == 0 ? setIsLeftScrollVisible(false) : setIsLeftScrollVisible(true);
        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    setIsRightScrollVisible(false);
                    observer.unobserve(entry.target);
                }
                else {
                    setIsRightScrollVisible(true);
                }
            });
        }, { threshold: 0.95 });
        // Watch for intersection events on a last tab label.
        observer.observe((_a = listRef.current) === null || _a === void 0 ? void 0 : _a.lastChild);
    };
    const handleResize = () => {
        const el = listRef.current;
        //check if tablist should scroll when window is resized
        (el === null || el === void 0 ? void 0 : el.scrollWidth) > (el === null || el === void 0 ? void 0 : el.clientWidth) ? setIsScrollable(true) : setIsScrollable(false);
        debouncedWindowResize();
    };
    const handleKeyDown = (onKeyDown, event, index) => {
        changeTab(index);
        onKeyDown && onKeyDown(event, index);
    };
    const handleKey = (e, tab, i, onKeyDown) => {
        var _a, _b, _c, _d;
        if (!Array.isArray(children))
            return;
        const index = children.indexOf(tab);
        const focusableChildren = getFocusableChildren(listRef === null || listRef === void 0 ? void 0 : listRef.current);
        switch (e.key) {
            case "Enter":
            case " ": {
                !(e.target instanceof HTMLAnchorElement) && e.preventDefault();
                changeTab(i);
                handleKeyDown(onKeyDown, e, i);
                break;
            }
            case "ArrowLeft": {
                e.preventDefault();
                // If selectionFollowsFocus is true, activate tab when navigating to it
                const newIndex = index > 0 ? i - 1 : children.length - 1;
                selectionFollowsFocus && handleKeyDown(onKeyDown, e, newIndex);
                // Focus tab when navigating to it
                index > 0 ? (_a = focusableChildren[index - 1]) === null || _a === void 0 ? void 0 : _a.focus() : focusableChildren[focusableChildren.length - 1].focus();
                break;
            }
            case "ArrowRight": {
                e.preventDefault();
                // If selectionFollowsFocus is true, activate tab when navigating to it
                const newIndex = index < children.length - 1 ? index + 1 : 0;
                selectionFollowsFocus && handleKeyDown(onKeyDown, e, newIndex);
                // Focus tab when navigating to it
                index < children.length - 1 ? (_b = focusableChildren[index + 1]) === null || _b === void 0 ? void 0 : _b.focus() : focusableChildren[0].focus();
                break;
            }
            case "Home": {
                e.preventDefault();
                selectionFollowsFocus && handleKeyDown(onKeyDown, e, 0);
                (_c = focusableChildren[0]) === null || _c === void 0 ? void 0 : _c.focus();
                break;
            }
            case "End": {
                e.preventDefault();
                selectionFollowsFocus && handleKeyDown(onKeyDown, e, children.length - 1);
                (_d = focusableChildren[focusableChildren.length - 1]) === null || _d === void 0 ? void 0 : _d.focus();
            }
        }
    };
    const tabsClassNames = clsx("kds-tabs", {
        "kds-tabs--small": small,
        "kds-tabs--flush": flush,
        "kds-tabs--scrollable": isScrollable,
    }, util || className);
    return (React.createElement("div", Object.assign({ className: tabsClassNames, "data-testid": testId }, rest),
        React.createElement("div", { className: "kds-tabs__container" },
            isScrollable ? (React.createElement(TabScrollButton, { onClick: () => handleScroll(-listRef.current.clientWidth), isVisible: isLeftScrollVisible, icon: React.createElement(SvgIconCaretLeft, null) })) : null,
            React.createElement("div", { className: "kds-tabs__list", role: "tablist", ref: listRef }, React.Children.map(children, (child, index) => React.cloneElement(child, {
                activeTab: index === activeTab,
                ref: (link) => {
                    if (index === activeTab)
                        activeLink.current = link;
                },
                onClick: (e) => {
                    changeTab(index);
                    child.props.onClick && child.props.onClick(e, index);
                },
                onKeyDown: (e) => handleKey(e, child, index, child.props.onKeyDown),
                tabIndex: activeTab === index ? 0 : -1,
                "aria-selected": activeTab === index ? "true" : "false",
                "aria-labelledby": `tab-${index + 1}`,
            }))),
            isScrollable ? (React.createElement(TabScrollButton, { onClick: () => handleScroll(+listRef.current.clientWidth), isVisible: isRightScrollVisible, icon: React.createElement(SvgIconCaretRight, null) })) : null),
        React.createElement("div", { className: "kds-tabs__content", role: "tabpanel", ref: contentRef, tabIndex: hasFocusableChildren ? -1 : 0 }, React.Children.map(children, (tab, index) => {
            if (index === activeTab && mode === "dynamic")
                return tab.props.children;
            if (mode === "static")
                return React.createElement("div", { hidden: index !== activeTab }, tab.props.children);
        }))));
}
Tabs.defaultProps = {
    flush: false,
    activePanel: 0,
    selectionFollowsFocus: false,
    scrollable: false,
    util: undefined,
};

const initialState = { isVariantRows: false, striped: false };
const TableContext = React.createContext({
    state: initialState,
    dispatch: () => null,
});
const tableReducer = (state, action) => {
    switch (action.type) {
        case "add":
            return Object.assign(Object.assign({}, state), { isVariantRows: true });
        case "remove":
            return Object.assign(Object.assign({}, state), { isVariantRows: false });
        case "striped":
            return Object.assign(Object.assign({}, state), { striped: action.payload });
        case "small":
            return Object.assign(Object.assign({}, state), { small: action.payload });
        default:
            throw new Error("Woops. Something is wrong in tableReducer.");
    }
};

const defaultCaptionElement = "caption";
function Table(_a) {
    var { util, className, small, caption, captionAs, testId, striped, orderKeyLabel, orderLabel, responsive, children } = _a, attrs = __rest$1(_a, ["util", "className", "small", "caption", "captionAs", "testId", "striped", "orderKeyLabel", "orderLabel", "responsive", "children"]);
    const CaptionTag = captionAs || defaultCaptionElement;
    const [state, dispatch] = React.useReducer(tableReducer, initialState);
    const liveArea = React.useRef(null);
    const classNames = clsx("kds-table", util || className, {
        "kds-table--sm": small,
    });
    const contextValues = {
        state,
        dispatch,
    };
    React.useEffect(() => {
        dispatch({ type: "striped", payload: striped });
        dispatch({ type: "small", payload: small });
    }, [striped, small]);
    React.useEffect(() => {
        let liveAreaTimer;
        if (orderKeyLabel && orderLabel && liveArea.current) {
            // Add text to aria live region
            liveArea.current.innerHTML = `${orderKeyLabel} ${orderLabel}`;
            // Remove text from DOM after a small delay
            liveAreaTimer = setTimeout(() => {
                if (liveArea.current)
                    liveArea.current.innerHTML = "";
                return false;
            }, 500);
        }
        return () => liveAreaTimer && clearTimeout(liveAreaTimer);
    }, [orderKeyLabel, orderLabel]);
    const tableRoot = () => (React.createElement(React.Fragment, null,
        caption && captionAs !== "caption" ? (React.createElement("div", { className: "kds-table__title-container" },
            React.createElement(CaptionTag, { className: "kds-table__title" }, caption))) : null,
        React.createElement("div", { className: "kds-sr-only", "aria-live": "polite", "aria-atomic": "true", ref: liveArea }),
        React.createElement(TableContext.Provider, { value: contextValues },
            React.createElement("table", Object.assign({ className: classNames, "data-testid": testId }, attrs),
                caption && captionAs === "caption" && React.createElement("caption", { className: "kds-table__title" }, caption),
                children))));
    if (responsive) {
        return React.createElement("div", { className: "kds-table-responsive" }, tableRoot());
    }
    return tableRoot();
}
Table.defaultProps = {
    responsive: true,
    small: false,
    captionAs: defaultCaptionElement,
};

function TableBody(_a) {
    var { util, className, children, testId } = _a, attrs = __rest$1(_a, ["util", "className", "children", "testId"]);
    const classNames = clsx(util || className, "kds-table__body");
    return (React.createElement("tbody", Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}

const defaultElement$6 = "td";
function TableCell(_a) {
    var { as, align, util, className, children, testId } = _a, attrs = __rest$1(_a, ["as", "align", "util", "className", "children", "testId"]);
    const Tag = as || defaultElement$6;
    const classNames = clsx(util || className, "kds-table__cell", {
        "kds-text-end": align === "numeric",
        "kds-text-start": align === "textual",
    });
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}
TableCell.defaultProps = {
    as: defaultElement$6,
    align: "textual",
};

function TableHead(_a) {
    var { util, className, children, testId } = _a, attrs = __rest$1(_a, ["util", "className", "children", "testId"]);
    const classNames = clsx(util || className, "kds-table__head");
    return (React.createElement("thead", Object.assign({ className: classNames, "data-testid": testId }, attrs), children));
}

const defaultElement$5 = "th";
function TableHeader(_a) {
    var { as, align, onClick, testId, order, className, util, children } = _a, attrs = __rest$1(_a, ["as", "align", "onClick", "testId", "order", "className", "util", "children"]);
    const Tag = as || defaultElement$5;
    const classNames = clsx(util || className, "kds-table__cell", "kds-table__header-cell", {
        "kds-text-end": align === "numeric",
        "kds-text-start": align === "textual",
        "kds-table__header-cell-sortable": !!onClick,
    });
    const getSortIcon = () => {
        if (order === "ascending") {
            return React.createElement(SvgIconSortUp, { className: "kds-ml-2 kds-table__cell-btn-sort--active" });
        }
        else if (order === "descending") {
            return React.createElement(SvgIconSortDown, { className: "kds-ml-2 kds-table__cell-btn-sort--active" });
        }
        else {
            return React.createElement(SvgIconSort, { className: "kds-ml-2 kds-table__cell-btn-sort--inactive" });
        }
    };
    if (onClick) {
        return (React.createElement(Tag, Object.assign({ "data-testid": testId, className: classNames, "aria-sort": order ? order : "none" }, attrs),
            React.createElement("button", { className: "kds-table__cell-btn", type: "button", onClick: onClick },
                children,
                getSortIcon())));
    }
    return (React.createElement(Tag, Object.assign({ className: classNames }, attrs), children));
}
TableHeader.defaultProps = {
    as: defaultElement$5,
    order: "none",
    align: "textual",
};

/**
 * Ref-prop välitetään komponentin input-elementille (valintaruutu).
 */
const TableHeadRow = React.forwardRef((_a, ref) => {
    var { id, children, collapseLabel, collapseOnClick, isOpen, isSelected, selectLabel, selectOnChange, util, className, testId, variantLabel } = _a, attrs = __rest$1(_a, ["id", "children", "collapseLabel", "collapseOnClick", "isOpen", "isSelected", "selectLabel", "selectOnChange", "util", "className", "testId", "variantLabel"]);
    const { state } = React.useContext(TableContext);
    const isCollapse = !!id && !!collapseOnClick;
    const isSelect = !!id && !!selectOnChange;
    const rowClassNames = clsx(util || className, "kds-table__head-row");
    return (React.createElement("tr", Object.assign({ className: rowClassNames, "data-testid": testId }, attrs),
        state.isVariantRows && (React.createElement("th", { scope: "col", className: "kds-table__cell-icon" },
            React.createElement("span", { className: "kds-sr-only" }, variantLabel))),
        isSelect && (React.createElement("td", { className: "kds-table__cell kds-table__cell-selection kds-table__cell-icon" },
            React.createElement(Checkbox, { size: state.small ? "xs" : "md", ref: ref, id: `select-header-${id}`, name: `select-header-${id}`, onChange: selectOnChange, checked: isSelected, labelText: selectLabel, hideLabel: true }))),
        isCollapse && (React.createElement("td", { className: "kds-table__cell kds-table__cell-collapse-toggle kds-table__cell-icon" },
            React.createElement("button", { className: "kds-table__cell-btn", onClick: collapseOnClick, "aria-label": collapseLabel, "aria-expanded": isOpen, type: "button" }, isOpen ? React.createElement(SvgIconCaretUp, { size: "s" }) : React.createElement(SvgIconCaretDown, { size: "s" })))),
        children));
});
TableHeadRow.displayName = "TableHeadRow";

function Tooltip({ children, content, isPopover, popoverIcon = React.createElement(SvgIconInfoCircle, { size: "s", className: "kds-text-primary" }), popoverIconLabel = "Työkaluvihje", placement = "top", showCloseButton, util, className, testId, }) {
    const [isOpen, setIsOpen] = React.useState(false);
    const enableCloseButton = showCloseButton || isPopover;
    const arrowElement = React.useRef();
    const { x, y, refs, strategy, context, placement: actualPlacement, middlewareData: { arrow: { x: arrowX, y: arrowY } = {} }, } = useFloating({
        placement,
        open: isOpen,
        onOpenChange: setIsOpen,
        middleware: [offset(16), flip(), shift({ padding: 8 }), arrow({ element: arrowElement })],
        whileElementsMounted: autoUpdate,
    });
    const { getReferenceProps, getFloatingProps } = useInteractions([
        useClick(context, {
            enabled: isPopover,
        }),
        useHover(context, {
            enabled: !isPopover,
            handleClose: safePolygon(),
            delay: TIMINGS_TOOLTIP_DELAY,
        }),
        useDismiss(context),
        useFocus(context, {
            enabled: !isPopover,
        }),
        useRole(context, { role: "tooltip" }),
    ]);
    const classNames = clsx("kds-tooltip", enableCloseButton && "kds-tooltip--with-close-button", util || className);
    arrowElement.current &&
        Object.assign(arrowElement.current.style, {
            left: arrowX != null ? `${arrowX}px` : "",
            top: arrowY != null ? `${arrowY}px` : "",
            right: "",
            bottom: "",
        });
    return (React.createElement(React.Fragment, null,
        isPopover ? (React.createElement("button", Object.assign({ className: "kds-tooltip__trigger", "aria-expanded": isOpen, "aria-label": popoverIconLabel, type: "button", "data-testid": testId }, getReferenceProps({
            ref: refs.setReference,
        })), popoverIcon)) : (React.cloneElement(children, getReferenceProps(Object.assign(Object.assign({ ref: refs.setReference }, (testId ? { testId } : {})), children.props)))),
        isOpen && (React.createElement("div", Object.assign({ ref: refs.setFloating, className: classNames, "data-placement": actualPlacement, style: {
                position: strategy,
                top: y !== null && y !== void 0 ? y : 0,
                left: x !== null && x !== void 0 ? x : 0,
            } }, getFloatingProps()),
            React.createElement("div", { className: "kds-tooltip__content" },
                React.createElement("div", null, content),
                enableCloseButton && (React.createElement("button", { "aria-hidden": true, className: "kds-tooltip__close", onClick: () => setIsOpen(false), tabIndex: -1, type: "button" },
                    React.createElement(SvgIconClose, null)))),
            React.createElement("div", { ref: arrowElement, className: "kds-tooltip__arrow" })))));
}

const TableRowVariantIcon = ({ variant, className }) => {
    const icons = {
        primary: SvgIconInfoCircle,
        success: SvgIconCheck,
        warning: SvgIconWarning,
        danger: SvgIconError,
    };
    const RowIcon = Object.prototype.hasOwnProperty.call(icons, variant) ? icons[variant] : SvgIconInfoCircle;
    return React.createElement(RowIcon, { className: className, size: "s", "aria-hidden": "true" });
};
const TableRowVariant = ({ tooltipIsPopover, variant, variantLabel }) => {
    const tooltipIconClassName = clsx({
        "kds-table__icon-warning-text": variant === "warning",
        [`kds-text-${variant}`]: variant !== "warning",
    });
    return (React.createElement(React.Fragment, null,
        React.createElement("td", { className: "kds-table__cell kds-table__cell-status kds-table__cell-icon" },
            React.createElement("span", { className: "kds-sr-only" }, variantLabel),
            variantLabel ? (React.createElement(Tooltip, { isPopover: tooltipIsPopover, popoverIcon: React.createElement(TableRowVariantIcon, { className: tooltipIconClassName, variant: variant }), content: variantLabel, className: "kds-text-dark" },
                React.createElement("span", null,
                    React.createElement(TableRowVariantIcon, { variant: variant })))) : (React.createElement(TableRowVariantIcon, { variant: variant })))));
};
TableRowVariant.displayName = "TableRowVariant";

/**
 * Ref-prop välitetään komponentin input-elementille (valintaruutu tai -painike).
 */
const TableRow = React.forwardRef((_a, ref) => {
    var { id, isOpen, checkbox = false, children, testId, tooltipIsPopover, collapseColspan, collapseContent, collapseLabel, collapseOnClick, isSelected, isSummary, isSelectionDisabled = false, radio = false, selectLabel, selectOnChange, util, className, variant, variantLabel, animate } = _a, attrs = __rest$1(_a, ["id", "isOpen", "checkbox", "children", "testId", "tooltipIsPopover", "collapseColspan", "collapseContent", "collapseLabel", "collapseOnClick", "isSelected", "isSummary", "isSelectionDisabled", "radio", "selectLabel", "selectOnChange", "util", "className", "variant", "variantLabel", "animate"]);
    const { state: { isVariantRows, striped, small }, dispatch, } = React.useContext(TableContext);
    const prevVariant = React.useRef(false);
    const elRef = React.useRef(null);
    const toggleCollapse = useCollapse(elRef, !!isOpen, animate);
    const isCollapse = !!id && !!collapseOnClick;
    const formElementSize = small ? "xs" : "md";
    const rowClassNames = clsx(util || className, "kds-table__row", {
        "kds-table__row--striped": striped,
        "kds-table__row--active": isSelected && !variant,
        "kds-table__row-summary": isSummary,
        "kds-table__row-collapse-parent": isCollapse,
        "kds-table__row-collapse-open": isCollapse && isOpen,
        "kds-table__row--primary": variant === "primary",
        "kds-table__row--success": variant === "success",
        "kds-table__row--warning": variant === "warning",
        "kds-table__row--danger": variant === "danger",
        "kds-disable-collapse-transitions": animate === false,
    });
    const collapseClassNames = clsx("kds-table__row-collapse-child", "kds-table__row", {
        "kds-table__row--active": isSelected && !variant,
    });
    // Update variant to context on mount
    React.useEffect(() => {
        const shouldRemove = !variant && prevVariant.current && isVariantRows;
        if (variant) {
            dispatch({ type: "add" });
            prevVariant.current = true;
        }
        else if (shouldRemove) {
            dispatch({ type: "remove" });
            prevVariant.current = false;
        }
    }, [dispatch, variant, isVariantRows]);
    useIsomorphicLayoutEffect$1(() => {
        isCollapse && toggleCollapse();
    }, [isCollapse, toggleCollapse]);
    return (React.createElement(React.Fragment, null,
        React.createElement("tr", Object.assign({ className: rowClassNames, "data-testid": testId }, attrs),
            !variant && isVariantRows && React.createElement("td", { className: "kds-table__cell kds-table__cell-icon" }),
            variant && (React.createElement(TableRowVariant, { variant: variant, variantLabel: variantLabel, tooltipIsPopover: tooltipIsPopover })),
            checkbox && (React.createElement("td", { className: "kds-table__cell  kds-table__cell-selection kds-table__cell-icon" },
                React.createElement(Checkbox, { size: formElementSize, ref: ref, id: `kds-table__select-row-${id}`, name: `kds-table__select-row-${id}`, disabled: isSelectionDisabled, onChange: selectOnChange, checked: isSelected, labelText: selectLabel, hideLabel: true }))),
            radio && (React.createElement("td", { className: "kds-table__cell  kds-table__cell-selection kds-table__cell-icon" },
                React.createElement(Radio, { size: formElementSize, ref: ref, id: `kds-table__select-row-${id}`, name: `kds-table__select-row-${id}`, disabled: isSelectionDisabled, onChange: selectOnChange, checked: isSelected, labelText: selectLabel, hideLabel: true }))),
            isCollapse && (React.createElement("td", { className: "kds-table__cell kds-table__cell-collapse-toggle kds-table__cell-icon" },
                React.createElement("button", { className: "kds-table__cell-btn", onClick: collapseOnClick, "aria-controls": id, "aria-expanded": isOpen, "aria-label": collapseLabel, type: "button" }, isOpen ? React.createElement(SvgIconCaretUp, { size: "s" }) : React.createElement(SvgIconCaretDown, { size: "s" })))),
            children),
        isCollapse && !!collapseContent && (React.createElement("tr", { id: id, className: collapseClassNames },
            React.createElement("td", { className: "kds-table__cell", colSpan: isVariantRows ? collapseColspan + 1 : collapseColspan },
                React.createElement("div", { ref: elRef }, collapseContent()))))));
});
TableRow.displayName = "TableRow";

const defaultElement$4 = "p";
const Text = React.forwardRef((_a, ref) => {
    var { as, util, className, testId, size, color, transform, align, mt, mb, children } = _a, attrs = __rest$1(_a, ["as", "util", "className", "testId", "size", "color", "transform", "align", "mt", "mb", "children"]);
    const Tag = as || defaultElement$4;
    const classNames = clsx("kds-text", util || className, {
        [`kds-text-${color}`]: color,
        [`kds-mt-${mt}`]: mt !== undefined && mt >= 0,
        [`kds-mb-${mb}`]: mb !== undefined && mb >= 0,
        [`kds-text-${transform}`]: transform,
        [`kds-text-${size}`]: size,
        [`kds-text-${align}`]: align,
    });
    return (React.createElement(Tag, Object.assign({ ref: ref, className: classNames, "data-testid": testId }, attrs), children));
});
Text.displayName = "Text";
Text.defaultProps = {
    as: defaultElement$4,
};

const defaultElement$3 = "span";
const TextTruncate = React.forwardRef((_a, ref) => {
    var { as, util, className, testId, expandable = true, suffix, tooltip = false, onClick, children } = _a, attrs = __rest$1(_a, ["as", "util", "className", "testId", "expandable", "suffix", "tooltip", "onClick", "children"]);
    const Tag = as || defaultElement$3;
    const [isOpen, setIsOpen] = React.useState(false);
    const classNames = clsx("kds-mb-0", util || className, {
        "kds-truncate": (!isOpen && expandable) || !expandable,
        "kds-block": tooltip,
    });
    const containerClassNames = clsx("kds-text-truncate", {
        "kds-text-truncate--suffix": !isOpen && suffix,
    });
    const onClickHandler = (e) => {
        setIsOpen(!isOpen);
        onClick && onClick(e);
    };
    return (React.createElement("span", { className: containerClassNames, "data-testid": testId },
        tooltip && !isOpen ? (React.createElement(Tooltip, { placement: "top", content: React.createElement("div", null, children) },
            React.createElement(Tag, Object.assign({ ref: ref, className: classNames }, attrs), children))) : (React.createElement(Tag, Object.assign({ ref: ref, className: classNames }, attrs), children)),
        expandable && (React.createElement(Button$1, { appearance: "link", "aria-hidden": "true", className: "kds-ml-1 kds-whitespace-nowrap", onClick: onClickHandler }, suffix))));
});
TextTruncate.displayName = "TextTruncate";
TextTruncate.defaultProps = {
    as: defaultElement$3,
};

/**
 * Ref-prop välitetään komponentin textarea-elementille.
 */
const Textarea = React.forwardRef((_a, ref) => {
    var { disabled, invalid, util, className, testId, autogrow = true, size = "md" } = _a, attrs = __rest$1(_a, ["disabled", "invalid", "util", "className", "testId", "autogrow", "size"]);
    const textareaContainerRef = React.useRef(null);
    const textareaRef = React.useRef(null);
    /**
     * Set data-replicated-value with textarea value on initial component render.
     */
    useIsomorphicLayoutEffect$1(() => {
        if (!!textareaRef.current && textareaContainerRef.current) {
            textareaContainerRef.current.dataset.replicatedValue = textareaRef.current.value;
        }
    }, [textareaRef, textareaContainerRef]);
    const cssClassName = clsx("kds-textarea__input", util || className, {
        "kds-textarea__input--invalid": invalid,
        [`kds-textarea__input--${size}`]: size && size !== "md",
    });
    return (React.createElement("div", { className: autogrow ? "kds-textarea__grow-wrap" : "kds-textarea", ref: textareaContainerRef, "data-testid": testId },
        React.createElement("textarea", Object.assign({ className: cssClassName, disabled: disabled, onInput: (e) => {
                const target = e.target;
                if (!textareaContainerRef.current)
                    return null;
                textareaContainerRef.current.dataset.replicatedValue = target.value;
                return textareaContainerRef.current.dataset.replicatedValue;
            }, ref: (element) => {
                textareaRef.current = element;
                if (typeof ref === "function") {
                    ref(element);
                }
                else if (ref) {
                    ref.current = element;
                }
            } }, attrs))));
});
Textarea.displayName = "Textarea";

function getInputType(select, multiline) {
    if (select)
        return "select";
    if (multiline)
        return "textarea";
    return "input";
}
function getAddOnId(addOn, elementId, type) {
    if (!addOn)
        return null;
    const { "aria-label": addOnLabel } = addOn.props;
    return addOnLabel && `${elementId}-addon-${type}`;
}

/**
 * Ref-prop välitetään komponentin input-elementille.
 */
const TextInput = React.forwardRef((_a, ref) => {
    var { id, labelText, helpText, collapsibleContentToggleText, collapsibleContent, infoText, errorText, multiline, select, requiredLabel, required, disabled, invalid, testId, readOnly, type = "text", leftCol, inputWidth, rows, children, util, className } = _a, attrs = __rest$1(_a, ["id", "labelText", "helpText", "collapsibleContentToggleText", "collapsibleContent", "infoText", "errorText", "multiline", "select", "requiredLabel", "required", "disabled", "invalid", "testId", "readOnly", "type", "leftCol", "inputWidth", "rows", "children", "util", "className"]);
    const generatedId = React.useId();
    const elementId = id || generatedId;
    const [collapsibleHelpIsOpen, setCollapsibleHelpIsOpen] = React.useState(false);
    const formElementRef = React.useRef();
    const isInvalid = !disabled && invalid;
    const showError = errorText && isInvalid;
    const inputType = getInputType(select, multiline);
    const isInput = inputType === "input";
    const utilClass = clsx(util || className, "kds-text-input");
    const _b = attrs, { addonAfter, addonBefore } = _b, rest = __rest$1(_b, ["addonAfter", "addonBefore"]);
    let inputAddonAfter, inputAddonBefore, addonAfterId, addonBeforeId;
    if (isInput) {
        addonAfterId = getAddOnId(addonAfter, elementId, "after");
        inputAddonAfter = addonAfter && React.cloneElement(addonAfter, { id: addonAfterId });
        addonBeforeId = getAddOnId(addonBefore, elementId, "before");
        inputAddonBefore = addonBefore && React.cloneElement(addonBefore, { id: addonBeforeId });
    }
    const textIds = clsx({
        [`${elementId}-help`]: helpText,
        [`${elementId}-error`]: showError,
        [`${elementId}-info`]: infoText,
        [addonAfterId]: !!addonAfterId,
        [addonBeforeId]: !!addonBeforeId,
    });
    const inputDescribedBy = textIds.length ? textIds : undefined;
    function handleRef(element) {
        formElementRef.current = element;
        if (typeof ref === "function") {
            ref(element);
        }
        else if (ref) {
            ref.current = element;
        }
    }
    const renderInputElement = () => {
        switch (inputType) {
            case "select":
                return (React.createElement(Select, Object.assign({ id: elementId, ref: handleRef, required: required, disabled: disabled, invalid: isInvalid, "aria-describedby": inputDescribedBy }, attrs), children));
            case "textarea":
                return (React.createElement(Textarea, Object.assign({ id: elementId, ref: handleRef, required: required, disabled: disabled, readOnly: readOnly, invalid: isInvalid, "aria-describedby": inputDescribedBy, rows: rows && Number(rows) }, attrs)));
            default:
                return (React.createElement(Input, Object.assign({ id: elementId, ref: handleRef, type: type, required: required, disabled: disabled, readOnly: readOnly, invalid: isInvalid, "aria-describedby": inputDescribedBy, addonAfter: inputAddonAfter, addonBefore: inputAddonBefore }, rest)));
        }
    };
    const labelAndHelpText = (React.createElement(React.Fragment, null,
        labelText && (React.createElement(InputLabel, { center: !!leftCol, requiredLabel: requiredLabel, required: required, htmlFor: elementId }, labelText)),
        helpText && (React.createElement(InputText, { id: `${elementId}-help`, className: "kds-mb-2" }, helpText)),
        collapsibleContent && collapsibleContentToggleText && (React.createElement(Accordion, { id: `${elementId}-collapse`, isOpen: collapsibleHelpIsOpen, appearance: "link", className: clsx("kds-text-input__collapse", {
                "kds-text-input__collapse--open": collapsibleHelpIsOpen,
            }) },
            React.createElement(AccordionToggle, { onClick: () => setCollapsibleHelpIsOpen(!collapsibleHelpIsOpen), className: "kds-text-input__collapse-toggle" }, collapsibleContentToggleText),
            React.createElement(AccordionBody, { className: "kds-text-input__collapse-body" }, collapsibleContent)))));
    const mainContent = (React.createElement(React.Fragment, null,
        showError && (React.createElement(InputText, { error: true, id: `${elementId}-error` }, errorText)),
        inputWidth ? (React.createElement(Row$1, { gy: 2, gx: 2 }, inputWidth(renderInputElement()))) : (renderInputElement()),
        infoText && (React.createElement(InputText, { id: `${elementId}-info`, info: true, className: "kds-mt-2" }, infoText))));
    return (React.createElement(InputGroup, { "data-testid": testId, row: !!leftCol, className: utilClass }, leftCol ? (React.createElement(React.Fragment, null,
        leftCol(labelAndHelpText),
        React.createElement(Column, null, mainContent))) : (React.createElement(React.Fragment, null,
        labelAndHelpText,
        mainContent))));
});
TextInput.displayName = "TextInput";

function Tile(_a) {
    var { icon, label, highlightValue = false, value, testId, util, className, variant = "primary-light", valueSize, appearance = "solid", align = "center" } = _a, rest = __rest$1(_a, ["icon", "label", "highlightValue", "value", "testId", "util", "className", "variant", "valueSize", "appearance", "align"]);
    const tileClassNames = clsx("kds-tile", util || className, variant && `kds-tile--${variant}`, icon && `kds-tile--with-icon`, appearance === "outline" && "kds-tile--outline");
    const bodyClassNames = clsx("kds-tile__value", highlightValue && "kds-tile__value--alert", {
        [`kds-tile__value--size-${valueSize}`]: valueSize,
    });
    const tileContainerClassNames = clsx("kds-tile__container", `kds-tile__container--${align}`);
    const tileContentClassNames = clsx("kds-tile__text-content", valueSize && `kds-tile__text-content--size-${valueSize}`);
    // Handle how value is returned; allow using line breaks or custom html
    const handleValue = (value) => {
        // If value is text string return content with wrapper and styling
        if (typeof value === "string") {
            return React.createElement("div", { className: bodyClassNames }, value);
        }
        // If value is not string or react fragment return content without wrapper and styling
        if (!reactIsExports.isFragment(value)) {
            return value;
        }
        const { children: contentChildren } = value.props;
        // Check if some of direct children in fragment are strings and line breaks
        const hasStringsAndLinebreaks = Array.isArray(contentChildren) &&
            contentChildren.some((item) => {
                return typeof item === "string" || item.type === "br";
            });
        return hasStringsAndLinebreaks ? React.createElement("div", { className: bodyClassNames }, contentChildren) : contentChildren;
    };
    return (React.createElement("div", Object.assign({ className: tileClassNames, "data-testid": testId }, rest),
        React.createElement("div", { className: tileContainerClassNames },
            icon && React.cloneElement(icon, { className: "kds-tile__icon" }),
            React.createElement("div", { className: tileContentClassNames },
                React.createElement("div", { className: "kds-tile__label" }, label),
                handleValue(value)))));
}

function TileGroup(_a) {
    var { children, breakpoint = "sm", testId, util, className } = _a, rest = __rest$1(_a, ["children", "breakpoint", "testId", "util", "className"]);
    const TileGroupClassNames = clsx("kds-tile-group", breakpoint === "none" ? "kds-tile-group--stack" : `${breakpoint}:kds-tile-group--stack`, util || className);
    return (React.createElement("div", Object.assign({ className: TileGroupClassNames, "data-testid": testId }, rest), children));
}

exports.TimeValidatorErrorType = void 0;
(function (TimeValidatorErrorType) {
    TimeValidatorErrorType["invalidFormat"] = "invalidFormat";
    TimeValidatorErrorType["required"] = "required";
})(exports.TimeValidatorErrorType || (exports.TimeValidatorErrorType = {}));

const splitTime = (value) => value.split(":");
const adjustTimeSegment = (value, position, increment, withSeconds) => {
    const parts = splitTime(value);
    const segmentIndex = getSegmentIndex(value, position);
    const adjustSegment = (segmentValue, increment) => {
        let newValue = (parseInt(segmentValue) || 0) + increment;
        if (segmentIndex === 1 || segmentIndex === 2) {
            if (newValue > 59)
                newValue = 0;
            else if (newValue < 0)
                newValue = 59;
        }
        if (segmentIndex === 0) {
            if (newValue > 23)
                newValue = 0;
            else if (newValue < 0)
                newValue = 23;
        }
        return String(newValue).padStart(2, "0");
    };
    parts[segmentIndex] = adjustSegment(parts[segmentIndex], increment);
    if (segmentIndex === 0 && !parts[1])
        parts[1] = "00";
    if (segmentIndex === 1 && withSeconds && !parts[2])
        parts[2] = "00";
    return parts.join(":");
};
const selectSegment = (segmentIndex, value) => {
    const parts = splitTime(value);
    let currentPosition = 0;
    for (let i = 0; i < segmentIndex; i++) {
        if (parts[i] !== undefined) {
            currentPosition += parts[i].length + 1; // +1 for the colon
        }
    }
    if (parts[segmentIndex] !== undefined) {
        return [currentPosition, currentPosition + parts[segmentIndex].length];
    }
    else if (segmentIndex === parts.length) {
        // if trying to select beyond the last segment, place cursor at the end of value
        return [value.length, value.length];
    }
    else {
        throw new Error(`Cannot select segment ${segmentIndex} from value "${value}"`);
    }
};
const getSegmentCursorPosition = (value, segmentIndex) => {
    var _a;
    const parts = splitTime(value);
    const getPositionInParts = (parts, upto) => {
        let position = 0;
        for (let i = 0; i < upto; i++) {
            position += parts[i].length + 1;
        }
        return position;
    };
    return getPositionInParts(parts, segmentIndex) + (((_a = parts[segmentIndex]) === null || _a === void 0 ? void 0 : _a.length) || 0);
};
const getSegmentIndex = (value, cursorPosition) => {
    const colonsBeforeCursor = value.slice(0, cursorPosition).split(":").length - 1;
    return colonsBeforeCursor;
};
const formatValueParts = (value, placeholder) => {
    let parts = splitTime(value);
    const placeholderParts = splitTime(placeholder);
    for (let i = 0; i < parts.length; i++) {
        if (parts[i].length > 2) {
            const currentPart = parts[i];
            parts[i] = currentPart.substring(0, 2);
            parts.splice(i + 1, 0, currentPart.substring(2));
        }
    }
    parts = parts.map((part, index) => {
        if (part.length < 2 && part !== "" && placeholderParts[index]) {
            const suffix = placeholderParts[index].slice(0, 1);
            return part + suffix;
        }
        if (part === "") {
            return placeholderParts[index];
        }
        return part;
    });
    return parts;
};
const formatInputValue = (parts, withSeconds) => {
    if (parts.every((part) => !part)) {
        return "";
    }
    if (parts[0].length === 2 && !parts[1]) {
        return parts[0] + ":";
    }
    else if (withSeconds && parts[1] && parts[1].length === 2 && !parts[2]) {
        return parts[0] + ":" + parts[1] + ":";
    }
    else {
        return parts.join(":");
    }
};
const getNewCursorPosition = (parts, cursorPosition, placeholder) => {
    let segmentStart = 0;
    let segment = 0;
    const placeholderParts = splitTime(placeholder);
    for (let i = 0; i < parts.length && segmentStart <= cursorPosition; i++) {
        segmentStart += parts[i].length + 1;
        segment = i;
    }
    let newRange;
    const currentRange = [cursorPosition, cursorPosition + 1];
    if (parts[segment].length === 2 && segment < parts.length) {
        if (parts[segment][1].includes(placeholderParts[segment][1])) {
            newRange = currentRange;
        }
        else {
            newRange = selectSegment(segment + 1, parts.join(":"));
        }
    }
    return newRange;
};
const getNextSegmentIndex = (value, cursorPosition, key) => {
    let jumpToNextSegment = false;
    let segment = getSegmentIndex(value, cursorPosition);
    switch (key) {
        case "ArrowRight":
            jumpToNextSegment = value[cursorPosition] === ":";
            if (jumpToNextSegment)
                segment += 1;
            break;
        case "ArrowLeft":
            jumpToNextSegment = value[cursorPosition - 1] === ":";
            if (jumpToNextSegment)
                segment -= 1;
            break;
    }
    return { jumpToNextSegment, segment };
};
const padPreviousSegment = (value, currentSegment, directionKey) => {
    const parts = splitTime(value);
    const previousSegment = currentSegment + (directionKey === "ArrowRight" ? -1 : 1);
    if (previousSegment >= 0 && previousSegment < parts.length && parts[previousSegment].length === 1) {
        parts[previousSegment] = "0" + parts[previousSegment];
        return parts.join(":");
    }
    return parts.join(":");
};
const getTimeInputLocalization = (localization, withSeconds) => {
    const timeInputFormat = withSeconds ? "tt:mm:ss" : "tt:mm";
    return {
        errorTexts: Object.assign({ [exports.TimeValidatorErrorType.invalidFormat]: `Kellonaika on virheellinen. Syötä kellonaika muodossa ${timeInputFormat}.`, [exports.TimeValidatorErrorType.required]: `Kellonaika on pakollinen tieto. Ilmoita päivämäärä muodossa ${timeInputFormat}.` }, localization === null || localization === void 0 ? void 0 : localization.errorTexts),
    };
};

const isISOValue = (timeString) => /^(\d{2}):(\d{2})(:(\d{2})|())$/.test(timeString);
const isInitialValue = (timeString) => /^([^0-9]{2}):([^0-9]{2})(:([^0-9]{2})|())$/.test(timeString);
const getTimeNumber = (time) => {
    const timeNumber = Number.parseInt(time);
    if (isNaN(timeNumber)) {
        return false;
    }
    return timeNumber;
};
const isValidSexagesimal = (time) => {
    if (time >= 0 && time <= 60) {
        return true;
    }
    return false;
};
const isValid24 = (time) => {
    if (time >= 0 && time <= 24) {
        return true;
    }
    return false;
};
const isTimeValid = (time, compareFn) => {
    const timeNumber = getTimeNumber(time);
    if (timeNumber === false) {
        return false;
    }
    if (compareFn(timeNumber)) {
        return true;
    }
    return false;
};
function isValidTimeFormat(timeString) {
    if (!timeString) {
        return false;
    }
    if (!isISOValue(timeString)) {
        return false;
    }
    const hours = timeString.split(":").shift();
    const areHoursValid = isTimeValid(hours, (time) => isValid24(time));
    const areMinutesAndSecondsValid = timeString
        .split(":")
        .slice(1)
        .every((timeUnit) => isTimeValid(timeUnit, (time) => isValidSexagesimal(time)));
    const lastHourCheck = getTimeNumber(hours) === 24
        ? timeString
            .split(":")
            .slice(1)
            .every((timeUnit) => isTimeValid(timeUnit, (time) => time === 0))
        : true;
    return areHoursValid && areMinutesAndSecondsValid && lastHourCheck;
}
function isAllowedNonAlphanumericKey(key) {
    return /^(Tab|Enter|Backspace|Escape|ArrowUp|ArrowDown|ArrowLeft|ArrowRight)$/.test(key);
}
const getUniqueChars = (str) => {
    const cleanedStr = str.replace(/:/g, "");
    const chars = Array.from(cleanedStr);
    const reduced = chars.reduce((collected, current) => {
        if (!collected.includes(current)) {
            collected.push(current);
        }
        return collected;
    }, []);
    return reduced;
};
const isAllowedLetter = (key, allowedLetters) => {
    return allowedLetters.includes(key);
};
const isAllowedNumber = (key) => {
    return !isNaN(parseInt(key));
};
const isKeyToBePrevented = (key, placeholder) => {
    const allowedLetters = getUniqueChars(placeholder);
    if (isAllowedNonAlphanumericKey(key) || isAllowedLetter(key, allowedLetters) || isAllowedNumber(key)) {
        return false;
    }
    return true;
};

const getErrorText = (type, errorTexts) => (errorTexts === null || errorTexts === void 0 ? void 0 : errorTexts[type]) || "";
const getResult = ({ isValid, value, errorType = null, errorTexts, }) => {
    return {
        isValid,
        error: {
            type: errorType,
            message: getErrorText(errorType, errorTexts),
        },
        value: value,
    };
};
const getTimeValidator = ({ withSeconds, required, errorTexts } = {}) => {
    const { errorTexts: defaultErrorTexts } = getTimeInputLocalization({ errorTexts }, withSeconds);
    const validate = (value) => {
        if ((!value || isInitialValue(value)) && required) {
            return getResult({
                isValid: false,
                errorType: exports.TimeValidatorErrorType.required,
                errorTexts: defaultErrorTexts,
                value: null,
            });
        }
        if (value && !isValidTimeFormat(value)) {
            return getResult({
                isValid: false,
                errorType: exports.TimeValidatorErrorType.invalidFormat,
                errorTexts: defaultErrorTexts,
                value: null,
            });
        }
        return getResult({ isValid: true, value });
    };
    const isValid = (value) => validate(value).isValid;
    return {
        isValid,
        validate,
    };
};

const getHandleInputChange = (params) => (event) => {
    const onChange = params === null || params === void 0 ? void 0 : params.onChange;
    const validate = params.validate;
    if (!event.target.value)
        return onChange === null || onChange === void 0 ? void 0 : onChange(event, validate(event.target.value));
    const cursorPosition = event.target.selectionStart || 0;
    const value = event.target.value.replace(/\./g, ":"); // Replace dots with colons.
    const parts = formatValueParts(value, params.placeholder);
    const selectionRange = getNewCursorPosition(parts, cursorPosition, params.placeholder);
    event.target.value = formatInputValue(parts, params.withSeconds);
    if (selectionRange) {
        event.target.setSelectionRange(...selectionRange);
    }
    onChange === null || onChange === void 0 ? void 0 : onChange(event, validate(event.target.value));
};

const getHandleKeyDown = (params) => (event) => {
    var _a;
    if (isKeyToBePrevented(event.key, params.placeholder)) {
        event.preventDefault();
        return;
    }
    const onKeyDown = params === null || params === void 0 ? void 0 : params.onKeyDown;
    const validate = params.validate;
    const cursorPosition = event.target.selectionStart || 0;
    const value = event.target.value;
    const placeholderParts = ((_a = params.placeholder) === null || _a === void 0 ? void 0 : _a.split(":")) || [];
    // Adjust the segment values and cursor position correctly when incrementing with arrow keys
    if (event.key === "ArrowUp" || event.key === "ArrowDown") {
        event.preventDefault();
        const incrementValue = event.key === "ArrowUp" ? 1 : -1;
        event.target.value = adjustTimeSegment(value, cursorPosition, incrementValue, params.withSeconds);
        const newCursorPosition = getSegmentCursorPosition(value, getSegmentIndex(value, cursorPosition));
        event.target.setSelectionRange(newCursorPosition, newCursorPosition);
    }
    if (event.key === "Backspace") {
        event.preventDefault();
        const parts = value.split(":");
        let segmentIndex = getSegmentIndex(value, cursorPosition);
        // If part already contains placeholder, move to next part
        if (parts[segmentIndex] === placeholderParts[segmentIndex]) {
            segmentIndex = getSegmentIndex(value, cursorPosition - 1);
            const selectionRange = selectSegment(segmentIndex, value);
            event.target.setSelectionRange(...selectionRange);
        }
        else if (segmentIndex < placeholderParts.length) {
            // Replace the current segment with the correct placeholder part
            parts[segmentIndex] = placeholderParts[segmentIndex];
            const newValue = parts.join(":");
            event.target.value = newValue;
            const selectionRange = selectSegment(segmentIndex, newValue);
            event.target.setSelectionRange(...selectionRange);
        }
    }
    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event, validate(event.target.value));
};
const getHandleKeyUp = (params) => (event) => {
    const onKeyUp = params === null || params === void 0 ? void 0 : params.onKeyUp;
    const validate = params.validate;
    if (!event.target.value)
        return onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp(event, validate(event.target.value));
    const cursorPosition = event.target.selectionStart || 0;
    const { jumpToNextSegment, segment } = getNextSegmentIndex(event.target.value, cursorPosition, event.key);
    if (jumpToNextSegment || ["ArrowRight", "ArrowLeft"].includes(event.key)) {
        event.target.value = padPreviousSegment(event.target.value, segment, event.key);
        event.target.setSelectionRange(...selectSegment(segment, event.target.value));
    }
    onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp(event, validate(event.target.value));
};

const getHandleInputFocus = (params) => (event) => {
    const onFocus = params === null || params === void 0 ? void 0 : params.onFocus;
    const validate = params.validate;
    // If the field is empty, populate it with initial values
    if (!event.target.value) {
        event.target.value = params.placeholder;
    }
    event.target.select();
    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event, validate(event.target.value));
};
const getHandleInputBlur = (params) => (event) => {
    const onBlur = params === null || params === void 0 ? void 0 : params.onBlur;
    const validate = params.validate;
    const parts = formatValueParts(event.target.value, params.placeholder);
    for (let i = 0; i < parts.length; i++) {
        if (parts[i].length === 1) {
            // When leaving field, make sure segments are two digits
            parts[i] = "0" + parts[i];
        }
    }
    event.target.value = event.target.value === params.placeholder ? "" : parts.join(":");
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event, validate(event.target.value));
};

const getHandleClick = (params) => (event) => {
    const onClick = params === null || params === void 0 ? void 0 : params.onClick;
    const validate = params.validate;
    if (!event.target.value)
        return onClick === null || onClick === void 0 ? void 0 : onClick(event, validate(event.target.value));
    const cursorPosition = event.target.selectionStart || 0;
    const segment = getSegmentIndex(event.target.value, cursorPosition);
    event.target.setSelectionRange(...selectSegment(segment, event.target.value));
    onClick === null || onClick === void 0 ? void 0 : onClick(event, validate(event.target.value));
};

/**
 * Ref-prop välitetään komponentin input-elementille.
 */
const TimeInput = React.forwardRef((_a, ref) => {
    var { withSeconds = false, placeholder = withSeconds ? "tt:mm:ss" : "tt:mm", required, errorTexts, onKeyDown, onChange, onFocus, onBlur, onKeyUp, onClick } = _a, attrs = __rest$1(_a, ["withSeconds", "placeholder", "required", "errorTexts", "onKeyDown", "onChange", "onFocus", "onBlur", "onKeyUp", "onClick"]);
    const { validate } = getTimeValidator({ withSeconds, required, errorTexts });
    const defaultHandlerParams = { validate, withSeconds, placeholder };
    return (React.createElement(Input, Object.assign({ ref: ref, placeholder: placeholder, onChange: getHandleInputChange(Object.assign({ onChange }, defaultHandlerParams)), onKeyDown: getHandleKeyDown(Object.assign({ onKeyDown }, defaultHandlerParams)), onKeyUp: getHandleKeyUp(Object.assign({ onKeyUp }, defaultHandlerParams)), onFocus: getHandleInputFocus(Object.assign({ onFocus }, defaultHandlerParams)), onBlur: getHandleInputBlur(Object.assign({ onBlur }, defaultHandlerParams)), onClick: getHandleClick(Object.assign({ onClick }, defaultHandlerParams)), maxLength: withSeconds ? 8 : 5 }, attrs)));
});
TimeInput.displayName = "TimeInput";

const defaultElement$2 = "ol";
function Timeline(_a) {
    var { as, util, className, horizontal, testId, children } = _a, attrs = __rest$1(_a, ["as", "util", "className", "horizontal", "testId", "children"]);
    const Tag = as || defaultElement$2;
    const classNames = clsx(util || className, "kds-timeline", {
        "kds-timeline--horizontal": horizontal,
    });
    const childrenWithProps = React.Children.map(children, (child) => React.isValidElement(child) && React.cloneElement(child, { horizontal }));
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId }, attrs), childrenWithProps));
}
Timeline.defaultProps = {
    as: defaultElement$2,
    util: "",
    horizontal: false,
};

const defaultElement$1 = "li";
function TimelineItem(_a) {
    var { as, variant, bgColor, color, outline, util, className, horizontal, testId, children, icon } = _a, attrs = __rest$1(_a, ["as", "variant", "bgColor", "color", "outline", "util", "className", "horizontal", "testId", "children", "icon"]);
    const Tag = as || defaultElement$1;
    const prefix = "kds-timeline__item";
    const customItemColors = {
        "--kds-c-timeline-item-bg-color": bgColor,
        "--kds-c-timeline-item-color": color === "light" ? "var(--kds-color-white)" : "var(--kds-base-text-color)",
    };
    const classNames = clsx(util || className, prefix, {
        [`${prefix}--horizontal`]: horizontal,
        [`${prefix}--outline`]: outline,
        [`${prefix}--${variant}`]: variant,
        [`${prefix}--numbered`]: !icon,
    });
    const iconClassNames = clsx("kds-timeline__item-icon");
    return (React.createElement(Tag, Object.assign({ className: classNames, "data-testid": testId, style: (bgColor || color) && customItemColors }, attrs),
        icon && React.createElement("div", { className: iconClassNames }, icon),
        React.createElement("div", { className: "kds-timeline__item-content" }, children)));
}
TimelineItem.defaultProps = {
    variant: "",
    as: defaultElement$1,
    util: "",
    outline: false,
};

const defaultElement = "div";
function Toast(_a) {
    var { as, header, body, variant, autoHideDuration, autoHide, testId, closeLabel, onClick, util, className } = _a, attrs = __rest$1(_a, ["as", "header", "body", "variant", "autoHideDuration", "autoHide", "testId", "closeLabel", "onClick", "util", "className"]);
    const toastRef = React.useRef(null);
    const closeTimer = React.useRef(null);
    const Tag = as || defaultElement;
    const [visible, setVisible] = React.useState(false);
    const [mounted, setMounted] = React.useState(true);
    const generatedId = React.useId();
    const headingId = `${generatedId}-heading`;
    const bodyId = `${generatedId}-body`;
    const toastClassNames = clsx("kds-toast", util || className, {
        [`kds-toast--${variant}`]: variant,
    });
    React.useEffect(() => {
        setVisible(true);
        if (autoHide) {
            startCloseTimer();
        }
        return () => {
            closeTimer.current && clearTimeout(closeTimer.current);
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    React.useEffect(() => {
        if (visible) {
            toastRef.current.classList.add("kds-toast--show"); // Show toast with animation
        }
        else {
            toastRef.current.classList.remove("kds-toast--show"); // hide toast with animation
        }
    }, [visible]);
    if (!mounted) {
        return null;
    }
    const startCloseTimer = () => {
        if (autoHide) {
            closeTimer.current = setTimeout(() => setVisible(false), autoHideDuration);
        }
    };
    const handleTransitionEnd = () => {
        if (!visible) {
            setMounted(false);
        }
    };
    const clearCloseTimer = () => {
        clearTimeout(closeTimer.current);
    };
    const getHeader = () => {
        if (!header)
            return null;
        return (React.createElement("div", { className: "kds-toast__header" },
            React.createElement("h3", { id: headingId }, header),
            closeLabel && onClick ? (React.createElement("button", { type: "button", className: "kds-toast__close", onClick: () => onClick(), "aria-label": closeLabel },
                React.createElement(SvgIconClose, null))) : null));
    };
    const getBody = () => {
        if (!body)
            return null;
        return (React.createElement("div", { id: bodyId, className: "kds-toast__body" }, body));
    };
    return (React.createElement(Tag, Object.assign({ "data-testid": testId, id: "toastId", ref: toastRef, role: "alert", className: toastClassNames, onMouseEnter: () => clearCloseTimer(), onMouseLeave: () => startCloseTimer(), onTransitionEnd: () => handleTransitionEnd(), "aria-labelledby": headingId, "aria-describedby": body ? bodyId : null }, attrs),
        getHeader(),
        getBody()));
}
Toast.defaultProps = {
    as: defaultElement,
    body: null,
    closeLabel: null,
    onClick: null,
    variant: "",
    util: "",
    autoHideDuration: 10000,
    autoHide: true,
};

function ToastContainer(_a) {
    var { position, srHeading, srHeadingId, testId, children, util, className } = _a, attrs = __rest$1(_a, ["position", "srHeading", "srHeadingId", "testId", "children", "util", "className"]);
    const containerRef = React.useRef(null);
    const prevCoordinatesMap = React.useRef(new Map());
    const hasChildren = React.Children.count(children) > 0;
    const hasToastIds = React.Children.toArray(children)
        .map((child) => React.isValidElement(child) && child.props["data-toast-id"])
        .every((id) => id !== undefined);
    const getToastEls = () => containerRef && containerRef.current && Array.from(containerRef.current.children);
    const updateCoords = () => {
        var _a;
        prevCoordinatesMap.current.clear();
        (_a = getToastEls()) === null || _a === void 0 ? void 0 : _a.forEach((toast) => {
            prevCoordinatesMap.current.set(toast.dataset.toastId, toast.getBoundingClientRect());
        });
    };
    React.useEffect(() => updateCoords());
    useIsomorphicLayoutEffect$1(() => {
        const elementArray = getToastEls();
        if (hasChildren && hasToastIds && supportsAnimations()) {
            elementArray === null || elementArray === void 0 ? void 0 : elementArray.forEach((toast) => {
                const prevRects = prevCoordinatesMap.current.get(toast.dataset.toastId);
                const currRects = toast.getBoundingClientRect();
                if (prevRects && currRects !== prevRects) {
                    const animation = toast.animate([
                        { position: "relative", top: `${prevRects.top - currRects.top}px` },
                        { position: "relative", top: "0px" },
                    ], {
                        duration: DURATION_LARGE_EXIT,
                        easing: EASING_DEFAULT,
                    });
                    animation.onfinish = updateCoords;
                }
            });
            updateCoords();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [children, hasChildren, hasToastIds]);
    if (React.Children.count(children) === 0)
        return null;
    const classNames = clsx("kds-toast__container", util || className, {
        [`kds-toast__container--${position}`]: position,
    });
    const getChildren = () => {
        if (position === "bottom") {
            return React.Children.toArray(children).reverse();
        }
        return React.Children.toArray(children);
    };
    return (React.createElement(Portal, null,
        React.createElement("div", Object.assign({ "data-testid": testId, className: classNames }, attrs),
            srHeading && srHeadingId ? (React.createElement("h2", { id: srHeadingId, className: "kds-sr-only" }, srHeading)) : null,
            React.createElement("ul", { ref: containerRef }, getChildren().map((child) => React.isValidElement(child) && React.cloneElement(child, { as: "li" }))))));
}
ToastContainer.defaultProps = {
    srHeading: "",
    srHeadingId: "",
    position: "top-right",
    util: "",
};

const useSort = (data, locale = "fi", options = { numeric: true, ignorePunctuation: true }) => {
    const [sortConfig, setSortConfig] = React.useState(null);
    // Language sensitive string comparison
    const collator = React.useRef(new Intl.Collator(locale, options));
    // Set sort config: key & sort order
    const requestSort = (key) => {
        let order = "ascending";
        if (sortConfig !== null && key !== sortConfig.key) {
            setSortConfig({ key, order });
        }
        else if (sortConfig !== null && sortConfig.order === "ascending") {
            order = "descending";
        }
        else if (sortConfig !== null && sortConfig.order === "descending") {
            order = "none";
        }
        setSortConfig({ key, order });
    };
    // Sort data
    const memoizedData = React.useMemo(() => {
        const sortedData = [...data];
        if (sortConfig !== null && sortConfig.order !== "none") {
            // Sort to ascending order
            sortedData.sort((a, b) => {
                const itemA = a[sortConfig.key];
                const itemB = b[sortConfig.key];
                // Sort non-null values
                if (itemA && itemB) {
                    return collator.current.compare(a[sortConfig.key].toString(), b[sortConfig.key].toString());
                }
                // Sort null / undefined values
                return !itemA ? -1 : 1;
            });
            // Sort to descending order
            if (sortConfig.order === "descending") {
                sortedData.reverse();
            }
        }
        return sortedData;
    }, [data, sortConfig]);
    return {
        data: memoizedData,
        sortKey: sortConfig ? sortConfig.key : null,
        sortOrder: sortConfig ? sortConfig.order : null,
        requestSort,
    };
};

const getInitialToggleState = (initialOpenIDs) => {
    const initialToggleState = {};
    initialOpenIDs.forEach((id) => (initialToggleState[`_${id}`] = true));
    return initialToggleState;
};
const useToggle = (options = { multiple: true }) => {
    const [toggleState, setToggleState] = React.useState((options === null || options === void 0 ? void 0 : options.initialOpenIDs) ? getInitialToggleState(options.initialOpenIDs) : {});
    const [toggleAllState, setToggleAllState] = React.useState(false);
    const isToggleOn = (id) => {
        return toggleState[`_${id}`] === true;
    };
    const setToggleOn = (id) => {
        if (options.multiple) {
            setToggleState(Object.assign(Object.assign({}, toggleState), { [`_${id}`]: true }));
        }
        else {
            setToggleState({ [`_${id}`]: true });
        }
    };
    const setToggleOff = (id) => {
        if (options.multiple) {
            setToggleState((prevState) => {
                const newState = prevState;
                delete newState[`_${id}`];
                return Object.assign({}, newState);
            });
        }
        else {
            setToggleState({});
        }
    };
    const flipToggle = (id) => {
        if (isToggleOn(id)) {
            setToggleOff(id);
        }
        else {
            setToggleOn(id);
        }
    };
    const setAllOn = (arr) => {
        const newState = {};
        arr.forEach((id) => {
            newState[`_${id}`] = true;
        });
        setToggleState(Object.assign({}, newState));
    };
    const setAllOff = (arr) => {
        const newState = {};
        arr.forEach((id) => {
            newState[`_${id}`] = false;
        });
        setToggleState(Object.assign({}, newState));
    };
    const flipAll = (arr) => {
        const newState = {};
        arr.forEach((id) => {
            newState[`_${id}`] = !toggleAllState;
        });
        setToggleAllState((prevState) => !prevState);
        setToggleState(Object.assign({}, newState));
    };
    return {
        isToggleOn,
        setToggleOn,
        setToggleOff,
        flipToggle,
        setAllOn,
        setAllOff,
        flipAll,
    };
};

exports.Accordion = Accordion;
exports.AccordionBody = AccordionBody;
exports.AccordionGroup = AccordionGroup;
exports.AccordionTitle = AccordionTitle;
exports.AccordionToggle = AccordionToggle;
exports.Alert = Alert;
exports.Badge = Badge;
exports.Box = Box;
exports.Breadcrumb = Breadcrumb;
exports.BreadcrumbItem = BreadcrumbItem;
exports.Button = Button$1;
exports.ButtonGroup = ButtonGroup;
exports.ButtonToolbar = ButtonToolbar;
exports.Card = Card;
exports.CardBody = CardBody;
exports.CardFooter = CardFooter;
exports.CardHeader = CardHeader;
exports.CardIcon = CardIcon;
exports.CardImage = CardImage;
exports.CardTitle = CardTitle;
exports.Chat = Chat;
exports.ChatMessage = ChatMessage;
exports.Checkbox = Checkbox;
exports.Chip = Chip;
exports.Collapse = Collapse;
exports.CollapseBody = CollapseBody;
exports.CollapseToggle = CollapseToggle;
exports.Column = Column;
exports.Combobox = Combobox;
exports.ComboboxMenu = ComboboxMenu;
exports.ComboboxMenuOption = ComboboxMenuOption;
exports.Container = Container;
exports.ContentHighlight = ContentHighlight;
exports.DatePicker = DatePicker;
exports.DatePickerV2 = DatePickerV2;
exports.DateRangePicker = DateRangePicker;
exports.DateRangePickerV2 = DateRangePickerV2;
exports.DescriptionList = DescriptionList;
exports.DescriptionListItem = DescriptionListItem;
exports.Dropdown = Dropdown;
exports.DropdownMenu = DropdownMenu;
exports.DropdownMenuGroup = DropdownMenuGroup;
exports.DropdownMenuGroupHeading = DropdownMenuGroupHeading;
exports.DropdownMenuItem = DropdownMenuItem;
exports.DropdownToggle = DropdownToggle;
exports.FileInput = FileInput;
exports.Footer = Footer;
exports.FooterContent = FooterContent;
exports.FooterCopyright = FooterCopyright;
exports.FooterTitle = FooterTitle;
exports.Heading = Heading;
exports.Icon = Icon;
exports.Input = Input;
exports.InputGroup = InputGroup;
exports.InputLabel = InputLabel;
exports.InputText = InputText;
exports.Link = Link;
exports.LinkBox = LinkBox;
exports.LinkWithInfo = LinkWithInfo;
exports.List = List;
exports.ListGroup = ListGroup;
exports.ListGroupItem = ListGroupItem;
exports.ListItem = ListItem;
exports.MainBar = MainBar;
exports.MainBarAction = MainBarAction;
exports.MainBarActionGroup = MainBarActionGroup;
exports.MainBarActionGroupItem = MainBarActionGroupItem;
exports.MainBarContainer = MainBarContainer;
exports.MainBarMenuButton = MainBarMenuButton;
exports.MainBarSearch = MainBarSearch;
exports.MainBarSearchV2 = MainBarSearchV2;
exports.Media = Media;
exports.MediaBody = MediaBody;
exports.Modal = Modal;
exports.ModalContent = ModalContent;
exports.ModalFooter = ModalFooter;
exports.ModalHeader = ModalHeader;
exports.Multiselect = Multiselect;
exports.Page = Page;
exports.Pagination = Pagination;
exports.PaginationButton = PaginationButton;
exports.PaginationGroup = PaginationGroup;
exports.PaginationText = PaginationText;
exports.Panel = Panel;
exports.PanelActions = PanelActions;
exports.PanelBody = PanelBody;
exports.Portal = Portal;
exports.Radio = Radio;
exports.Result = Result;
exports.Row = Row$1;
exports.Select = Select;
exports.SelectionGroup = SelectionGroup;
exports.Sidebar = Sidebar;
exports.SidebarNavHeading = SidebarNavHeading;
exports.SidebarNavItem = SidebarNavItem;
exports.Skeleton = Skeleton;
exports.SkipLink = SkipLink;
exports.Spinner = Spinner;
exports.SplitButton = SplitButton;
exports.Tab = Tab;
exports.Table = Table;
exports.TableBody = TableBody;
exports.TableCell = TableCell;
exports.TableHead = TableHead;
exports.TableHeadRow = TableHeadRow;
exports.TableHeader = TableHeader;
exports.TableRow = TableRow;
exports.Tabs = Tabs;
exports.Text = Text;
exports.TextInput = TextInput;
exports.TextTruncate = TextTruncate;
exports.Textarea = Textarea;
exports.Tile = Tile;
exports.TileGroup = TileGroup;
exports.TimeInput = TimeInput;
exports.Timeline = Timeline;
exports.TimelineItem = TimelineItem;
exports.TitleBar = TitleBar;
exports.TitleBarAction = TitleBarAction;
exports.Toast = Toast;
exports.ToastContainer = ToastContainer;
exports.Tooltip = Tooltip;
exports.getDateRangeValidator = getDateRangeValidator;
exports.getDateValidator = getDateValidator;
exports.getTimeValidator = getTimeValidator;
exports.useCollapse = useCollapse;
exports.useDebounce = useDebounce;
exports.useIsFirstRender = useIsFirstRender;
exports.useOnClickOutside = useOnClickOutside;
exports.usePrevious = usePrevious;
exports.useSort = useSort;
exports.useThrottle = useThrottle;
exports.useToggle = useToggle;
//# sourceMappingURL=index.js.map
